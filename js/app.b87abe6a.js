(function(){"use strict";var e={9269:function(e,t,n){var r=n(9242),i=n(3396);const a={class:"main"},o=(0,i._)("h3",{class:"blog_title"},[(0,i._)("a",{target:"_blank",href:"http://mail.qq.com/cgi-bin/qm_share?t=qm_mailme&email=rtfG2fHdwcja2c-cy_7f34DNwcM"},"yhw-miracle")],-1),s=(0,i._)("span",{class:"slogan"},"每一个人的生命中，都有最艰难的那一年，将人生变得美好而辽阔。",-1),d={class:"blog_header"},c={class:"blog_home"},l={class:"blog_footer"};function u(e,t,n,r,u,h){const m=(0,i.up)("BlogHeader"),b=(0,i.up)("router-view"),g=(0,i.up)("BlogFooter"),f=(0,i.up)("BlogEditorView");return(0,i.wg)(),(0,i.iD)("div",a,[o,s,(0,i._)("div",d,[(0,i.Wm)(m)]),(0,i._)("div",c,[(0,i.Wm)(b)]),(0,i._)("div",l,[(0,i.Wm)(g)]),(0,i.Wm)(f,{editorViewValue:"",style:{display:"none"}})])}var h=n(7139);const m={class:"header"};function b(e,t,n,r,a,o){const s=(0,i.up)("el-menu-item"),d=(0,i.up)("el-menu");return(0,i.wg)(),(0,i.iD)("div",m,[(0,i.Wm)(d,{class:"blog_menu",mode:"horizontal",ellipsis:!1,"background-color":"#FF6A00","text-color":"#800080","active-text-color":"#00FF00","default-active":a.current,router:!0,onSelect:o.handleSelect},{default:(0,i.w5)((()=>[((0,i.wg)(!0),(0,i.iD)(i.HY,null,(0,i.Ko)(a.menu_info,((e,t)=>((0,i.wg)(),(0,i.j4)(s,{key:t,index:e.path},{default:(0,i.w5)((()=>[(0,i.Uk)((0,h.zw)(e.name),1)])),_:2},1032,["index"])))),128))])),_:1},8,["default-active","onSelect"])])}const g={class:"home"},f={class:"article_list"},p={class:"row1"},w={class:"title"},y=(0,i._)("img",{src:"/images/system/article.svg"},null,-1),Q={class:"start_reading"},x=(0,i.Uk)("开始阅读.."),_={class:"row2"},B={class:"author"},T=(0,i._)("img",{src:"/images/system/author.svg"},null,-1),S={class:"create_time"},L=(0,i._)("img",{src:"/images/system/publication.svg"},null,-1),I={key:0,class:"row3"},W={class:"category"},k=(0,i._)("img",{src:"/images/system/category.svg"},null,-1),v=(0,i._)("span",null,"分类:",-1),M={class:"category_item"},P={key:0,class:"tags"},A=(0,i._)("img",{src:"/images/system/tag.svg"},null,-1),C=(0,i._)("span",null,"标签:",-1),D=(0,i._)("hr",null,null,-1),N={class:"page"},E=["src"],O=["src"];function V(e,t,n,r,a,o){const s=(0,i.up)("router-link");return(0,i.wg)(),(0,i.iD)("div",g,[(0,i._)("div",f,[((0,i.wg)(!0),(0,i.iD)(i.HY,null,(0,i.Ko)(a.articles,((e,t)=>((0,i.wg)(),(0,i.iD)("div",{key:t,class:"article_info"},[(0,i._)("div",p,[(0,i._)("div",w,[y,(0,i._)("span",null,[(0,i.Wm)(s,{to:{path:"/detail",query:{id:e.hash}}},{default:(0,i.w5)((()=>[(0,i.Uk)((0,h.zw)(e.title),1)])),_:2},1032,["to"])])]),(0,i._)("div",Q,[(0,i.Wm)(s,{to:{path:"/detail",query:{id:e.hash}}},{default:(0,i.w5)((()=>[x])),_:2},1032,["to"])])]),(0,i._)("div",_,[(0,i._)("div",B,[T,(0,i._)("span",null,"作者:"+(0,h.zw)(e.author.username),1)]),(0,i._)("div",S,[L,(0,i._)("span",null,"首次发表:"+(0,h.zw)(e.create),1)])]),e.category?((0,i.wg)(),(0,i.iD)("div",I,[(0,i._)("div",W,[k,v,(0,i._)("p",M,(0,h.zw)(e.category.name),1)]),e.tags.length>0?((0,i.wg)(),(0,i.iD)("div",P,[A,C,((0,i.wg)(!0),(0,i.iD)(i.HY,null,(0,i.Ko)(e.tags,((e,t)=>((0,i.wg)(),(0,i.iD)("p",{class:"tag_item",key:t},(0,h.zw)(e.name),1)))),128))])):(0,i.kq)("",!0)])):(0,i.kq)("",!0),D])))),128))]),(0,i._)("div",N,[a.pageCount>1?((0,i.wg)(),(0,i.iD)("img",{key:0,src:a.previousImg,onClick:t[0]||(t[0]=e=>o.handleCurrentChange(a.currentPage,"previous")),class:(0,h.C_)([1===a.currentPage?"page_cancel":""])},null,10,E)):(0,i.kq)("",!0),(0,i._)("span",null,"第 "+(0,h.zw)(a.currentPage)+" 页,",1),(0,i._)("span",null,"共 "+(0,h.zw)(a.pageCount)+" 页,",1),(0,i._)("span",null,"计 "+(0,h.zw)(a.count)+" 篇.",1),a.pageCount>1?((0,i.wg)(),(0,i.iD)("img",{key:1,src:a.nextImg,onClick:t[1]||(t[1]=e=>o.handleCurrentChange(a.currentPage,"next")),class:(0,h.C_)([a.currentPage===a.pageCount?"page_cancel":""])},null,10,O)):(0,i.kq)("",!0)]),a.isShowTop?((0,i.wg)(),(0,i.iD)("img",{key:0,src:"/images/system/to_top.svg",class:"go_top",onClick:t[2]||(t[2]=(...e)=>o.backTop&&o.backTop(...e))})):(0,i.kq)("",!0)])}var G=JSON.parse('{"1":{"articles":[{"title":"报错 “System limit for number of file watchers reached”","hash":"973fe62230808e3541bbf2d1d92c9714cd2183e145e9fc88fc889d7b1657f214","sub_title":null,"category":{"name":"问题解决"},"tags":[{"name":"linux"}],"create":"2022-02-21","update":"2022-02-21","author":{"username":"yhw-miracle"},"reader":3,"is_comment":true,"comments":[]},{"title":"磁盘扩容","hash":"e4a685980f20b9199ae6289fa1bb74aea0a61eb963729eb9c653e31cb7afebf7","sub_title":null,"category":{"name":"问题解决"},"tags":[{"name":"linux"}],"create":"2022-02-19","update":"2022-02-19","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"QHostInfo QNetworkInterface","hash":"13d20a508bb7489bb2c6952f6f4d7801577c33c564c0897a4471360426a049c3","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2022-02-14","update":"2022-02-14","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"多线程 互斥量","hash":"dc73af7547e0b16223b32a02446ace647bed7b2115d8802db1c9b097763632f3","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2022-02-13","update":"2022-02-13","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"基于 QWaitCondition 的线程同步","hash":"f801ddade1495b72de5d3752c74e796b1e682c62fa215f30457d9aa5e00a8811","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2022-02-13","update":"2022-02-13","author":{"username":"yhw-miracle"},"reader":0,"is_comment":true,"comments":[]},{"title":"基于信号量的线程同步","hash":"6574fb60475b751d80b567fb99c1887e01faf656e3633207e61c18a3690cb303","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2022-02-13","update":"2022-02-13","author":{"username":"yhw-miracle"},"reader":0,"is_comment":true,"comments":[]},{"title":"自定义 Widget 组件","hash":"79cbc463848e4fab99f453ff94b5d5cb114140a8d100380791d83fdf4daa67e7","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2022-02-12","update":"2022-02-12","author":{"username":"yhw-miracle"},"reader":0,"is_comment":true,"comments":[]},{"title":"QSqlTableModel","hash":"8bfe36af0186a42c04140d3b452cb38663b838cfb9caed663b5b92a4e58fea29","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2022-02-11","update":"2022-02-11","author":{"username":"yhw-miracle"},"reader":0,"is_comment":true,"comments":[]},{"title":"QChart 绘图详细功能","hash":"a308226b7af8bfdc37bb01a7a0d34c57efd0efa4e277c247ee53dce469cf57e3","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2022-02-10","update":"2022-02-10","author":{"username":"yhw-miracle"},"reader":0,"is_comment":true,"comments":[]},{"title":"QChart 简单绘图","hash":"160fa4df466ebd0fbcabe512ce770655d8716c2cded1275b6c3d3841c8e0e7f9","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2022-02-09","update":"2022-02-09","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]}],"count":119},"2":{"articles":[{"title":"Graphics View 绘图","hash":"8706099c293f75e24cb2d3908adf7a2ca5eb121b0632c52da2117df168de8e72","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2022-02-08","update":"2022-02-08","author":{"username":"yhw-miracle"},"reader":0,"is_comment":true,"comments":[]},{"title":"view scene item 基本关系和坐标变换","hash":"5853fec45ce789cb10e5c9c2eb3e4f93e17c94c0aece88ac80bd598dd46fc645","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2022-02-07","update":"2022-02-07","author":{"username":"yhw-miracle"},"reader":0,"is_comment":true,"comments":[]},{"title":"坐标变换","hash":"02fe3d385d7dabbddcfc77c999c1c15e24a472acbb732d7298d682cd42d95e25","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2022-02-06","update":"2022-02-06","author":{"username":"yhw-miracle"},"reader":0,"is_comment":true,"comments":[]},{"title":"QPainter 绘图","hash":"2d51cb21fedd6cb4741ddd8af396a54c432df80d30388640de17969da61eae5b","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2022-02-05","update":"2022-02-05","author":{"username":"yhw-miracle"},"reader":0,"is_comment":true,"comments":[]},{"title":"目录和文件操作","hash":"c69ca6cfe5ef7406f989f813aff6ecfe6aa8235a0cdd77f0e94e1ce05abaf0ae","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2022-02-03","update":"2022-02-03","author":{"username":"yhw-miracle"},"reader":0,"is_comment":true,"comments":[]},{"title":"QDataStream 读写文件","hash":"f30123eba9621ea24ccf71909dd3eb6dd06ff0cbfa5f360bd76af9a030263111","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2022-02-02","update":"2022-02-02","author":{"username":"yhw-miracle"},"reader":0,"is_comment":true,"comments":[]},{"title":"文本文件读写","hash":"6275d91b22c6c250e9817d6be805ecc63de65b36a9b85e1c55cfc7d14624284f","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2022-01-17","update":"2022-01-17","author":{"username":"yhw-miracle"},"reader":0,"is_comment":true,"comments":[]},{"title":"QT Splash 窗口","hash":"d2c78c2a1b338822d72d948b4113ad8598be906ee481c4b5f481e91856e5dae0","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2022-01-16","update":"2022-01-16","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"QT MDI 应用程序","hash":"8991356abc17ce79b5091537ad1d9f069e54e4661490b2250e9b07fc95025e05","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2022-01-15","update":"2022-01-15","author":{"username":"yhw-miracle"},"reader":0,"is_comment":true,"comments":[]},{"title":"QT 多窗口应用程序","hash":"6e99b7fc114b5666f5b65cda619c8dbb9d96650722971aecae1069f303743392","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2022-01-14","update":"2022-01-14","author":{"username":"yhw-miracle"},"reader":0,"is_comment":true,"comments":[]}],"count":119},"3":{"articles":[{"title":"QT 自定义对话框","hash":"59ea31a1cc4fa39882f50bf8f28bfb7deb9e3baee93f8cb4058ba0b83e857e5f","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2022-01-13","update":"2022-01-13","author":{"username":"yhw-miracle"},"reader":0,"is_comment":true,"comments":[]},{"title":"QT 对话框","hash":"2fd1196d3dbf8bac688fb53fd63c7692b29e7948cdee4263a6ce9e6a68811fd7","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2022-01-12","update":"2022-01-12","author":{"username":"yhw-miracle"},"reader":0,"is_comment":true,"comments":[]},{"title":"QStandardItmeModel","hash":"51f66c981a1d3c58ea8241382ae5c66ec4c5d6124d153a3de6bfa15410f03679","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2022-01-11","update":"2022-01-11","author":{"username":"yhw-miracle"},"reader":0,"is_comment":true,"comments":[]},{"title":"QStringListModel","hash":"1e1ecb1869e43399905dafa495f07c4b3b5ac7a6bdb5320472267237f93022b8","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2022-01-10","update":"2022-01-10","author":{"username":"yhw-miracle"},"reader":0,"is_comment":true,"comments":[]},{"title":"文件系统 Model 和 View","hash":"7723af9ef08750e22fe429efa017257d2e3b8305ae25767236dee1dc78cb8894","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2022-01-09","update":"2022-01-09","author":{"username":"yhw-miracle"},"reader":0,"is_comment":true,"comments":[]},{"title":"QTableWidget","hash":"222137b183bf4820900bce92c86bef9726754fa42ec9e8ca8b6e51bf0c990b90","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2022-01-08","update":"2022-01-08","author":{"username":"yhw-miracle"},"reader":0,"is_comment":true,"comments":[]},{"title":"QTreeWidget 和 QDockWidget","hash":"0f2819e64af807ce5f59b7e050f0628a8d1367f03262fe4c3d6f305c15d7258f","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2022-01-07","update":"2022-01-07","author":{"username":"yhw-miracle"},"reader":0,"is_comment":true,"comments":[]},{"title":"QListWidget","hash":"6e44336e6d3176bafe097c03c8b4fa1b4720238d35450c44b72f7e3177370a57","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2022-01-06","update":"2022-01-06","author":{"username":"yhw-miracle"},"reader":0,"is_comment":true,"comments":[]},{"title":"QComboBox 与 QPlainTextEdit","hash":"9ffb95c55f457c59b13eb3830359a9ffb88bc697f86dfba172b1c403a2fca547","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2021-12-11","update":"2021-12-11","author":{"username":"yhw-miracle"},"reader":0,"is_comment":true,"comments":[]},{"title":"定时器","hash":"433f4907bfc0355f5d83ffa8fb35c5c1f9f5071760204594286ed2850f98ae07","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2021-12-10","update":"2021-12-10","author":{"username":"yhw-miracle"},"reader":0,"is_comment":true,"comments":[]}],"count":119},"4":{"articles":[{"title":"日历","hash":"5a044901d20d03b5ca5c87123f084c8403b08064b937f1b8a0ee0bdb4287fe5a","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2021-12-09","update":"2021-12-09","author":{"username":"yhw-miracle"},"reader":0,"is_comment":true,"comments":[]},{"title":"日期时间","hash":"c7b7c6856d0c994e79e83db768d39c88f8e09f56c04f1595777dd16fb71d996f","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2021-12-08","update":"2021-12-08","author":{"username":"yhw-miracle"},"reader":0,"is_comment":true,"comments":[]},{"title":"QDial 与 QLCDNumber 使用","hash":"36f0a938aa1bfa69dfe45d6f1b31085c8ec61a3b824026d1f5e2ff915be923fd","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2021-12-07","update":"2021-12-07","author":{"username":"yhw-miracle"},"reader":0,"is_comment":true,"comments":[]},{"title":"QProgressBar","hash":"5a8408f9489b97ae187a42b7209ac8f0da05e700c73c67836dfa870ea82541e7","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2021-12-06","update":"2021-12-06","author":{"username":"yhw-miracle"},"reader":0,"is_comment":true,"comments":[]},{"title":"QScrollBar","hash":"1d1a9cbd6ef9504257026be403a93f3529f94d45594243953b0f6ad1ed1f85b9","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2021-12-05","update":"2021-12-05","author":{"username":"yhw-miracle"},"reader":0,"is_comment":true,"comments":[]},{"title":"QSlider","hash":"ca65ce3eacc94969c87cdbaca44ffc36ff1cd29e4231c94774ac124187b96fc8","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2021-12-04","update":"2021-12-04","author":{"username":"yhw-miracle"},"reader":0,"is_comment":true,"comments":[]},{"title":"QSpinBox 与 QDoubleSpinBox 的使用","hash":"e1e488f407b70335b91dca4af03479960c29d68eba9bc8890b3227ea498786a8","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2021-12-03","update":"2021-12-03","author":{"username":"yhw-miracle"},"reader":0,"is_comment":true,"comments":[]},{"title":"QString 的常用功能","hash":"c7977fcb1e92d746a1e3e4e785b4c032f2e8fa558d6ba3844e741196f6118377","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2021-12-02","update":"2021-12-02","author":{"username":"yhw-miracle"},"reader":0,"is_comment":true,"comments":[]},{"title":"字符串与数值之间的转换","hash":"82c9fd9a979cf75a24b79a98aa3f81d5edf826ea0db5b42fcfebc4987fc70582","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2021-12-01","update":"2021-12-01","author":{"username":"yhw-miracle"},"reader":2,"is_comment":true,"comments":[]},{"title":"QT 窗体类","hash":"10048f18a4b00cda21d5adee26e40c14f444983afffb4810bc46c52eb4f7e4b7","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"QT"}],"create":"2021-11-30","update":"2021-11-30","author":{"username":"yhw-miracle"},"reader":0,"is_comment":true,"comments":[]}],"count":119},"5":{"articles":[{"title":"QT 事件","hash":"4767070de7562964926437cea497ad5a2ee1b4088008e7c0ec5b8bf5eb7b6614","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"QT"}],"create":"2021-11-30","update":"2021-11-30","author":{"username":"yhw-miracle"},"reader":0,"is_comment":true,"comments":[]},{"title":"Model View","hash":"6d1d64e7ecf3169283a65272c165714d818d1359098e620290c7d34467b75db3","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"QT"}],"create":"2021-11-29","update":"2021-11-29","author":{"username":"yhw-miracle"},"reader":0,"is_comment":true,"comments":[]},{"title":"QPlainTextEdit","hash":"cbd4226fad52065942bc6888839bb0527ce92157c47881a99834579f881eec60","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"QT"}],"create":"2021-11-28","update":"2021-11-28","author":{"username":"yhw-miracle"},"reader":0,"is_comment":true,"comments":[]},{"title":"QComboBox","hash":"1d610e0ab20e5fbf32591b9fd07cd149c80c61010a9e5bbffdefe06778f4224d","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"QT"}],"create":"2021-11-28","update":"2021-11-28","author":{"username":"yhw-miracle"},"reader":0,"is_comment":true,"comments":[]},{"title":"QDateEdit QTimeEdit","hash":"d7e012b39a551b475a823dacc814ba8440744138f06dc905e753a7ed598a50aa","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"QT"}],"create":"2021-11-28","update":"2021-11-28","author":{"username":"yhw-miracle"},"reader":0,"is_comment":true,"comments":[]},{"title":"QSpinBox 与 QDOubleSpinBox 的属性","hash":"04863573382c6e610f2b7871cfb65292d613fbb1ba29334574b9b2bf718cdb3c","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"QT"}],"create":"2021-11-27","update":"2021-11-27","author":{"username":"yhw-miracle"},"reader":0,"is_comment":true,"comments":[]},{"title":"QSlider QScrollBar Qdial","hash":"02f80b76e979409a82770dfc0ed605725c2b61c5335d7490121f56ea77915736","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"QT"}],"create":"2021-11-27","update":"2021-11-27","author":{"username":"yhw-miracle"},"reader":0,"is_comment":true,"comments":[]},{"title":"QString","hash":"44c42138d0984a831e0c1b84eba5a4339871c6bc2170560ded4306e884c5c712","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"QT"}],"create":"2021-11-27","update":"2021-11-27","author":{"username":"yhw-miracle"},"reader":0,"is_comment":true,"comments":[]},{"title":"QT 模块","hash":"d3b10c6a1d4ecca24b29e93b714a83e57ad4c2db1000891376d0683b9a65564b","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"QT"}],"create":"2021-11-26","update":"2021-11-26","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"QT 容器类的迭代","hash":"8fe94e1580fea922a255e2d7bf5226c57b92fb56a8125dd75e6f23331612e0d6","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"QT"}],"create":"2021-11-26","update":"2021-11-26","author":{"username":"yhw-miracle"},"reader":0,"is_comment":true,"comments":[]}],"count":119},"6":{"articles":[{"title":"QT 容器类","hash":"600a08d87247d1d0ac32f8052d43b5457c64fb622a352ac23329b994acca86c8","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"QT"}],"create":"2021-11-26","update":"2021-11-26","author":{"username":"yhw-miracle"},"reader":0,"is_comment":true,"comments":[]},{"title":"QT 数据类型","hash":"02e6c33c9dd5c850a8af5cacedee6cb343f8e3bfdad0fddd57be21313183295f","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"QT"}],"create":"2021-11-26","update":"2021-11-26","author":{"username":"yhw-miracle"},"reader":0,"is_comment":true,"comments":[]},{"title":"列表去重并保留原先顺序","hash":"ccf8d0c551a805fb5c9de4c3eddf1baa7c13cd33b3f337c7043f8da6c99c90c6","sub_title":null,"category":{"name":"问题解决"},"tags":[{"name":"Python"}],"create":"2021-11-24","update":"2021-11-24","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"CentOS7 切换不同更新源","hash":"6ea9ec5b049dbc93a537898e72fdd28a33f7716205bc3222574193ebcdc1100b","sub_title":null,"category":{"name":"问题解决"},"tags":[{"name":"CentOS7"}],"create":"2021-11-18","update":"2021-11-18","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"showdoc 安装与迁移","hash":"5296fb7855d8ce7db9ed2deffcba61e064f0b498b38452e435455843cf28feff","sub_title":null,"category":{"name":"问题解决"},"tags":[{"name":"showdoc"}],"create":"2021-11-18","update":"2021-11-18","author":{"username":"yhw-miracle"},"reader":0,"is_comment":true,"comments":[]},{"title":"MySQL 相关设置","hash":"d64b3c10b20f779b1f9a34fa56495e172ea71b37e9c260fb3f039fb0a2b0b333","sub_title":null,"category":{"name":"问题解决"},"tags":[{"name":"MySQL"}],"create":"2021-11-18","update":"2021-11-18","author":{"username":"yhw-miracle"},"reader":0,"is_comment":true,"comments":[]},{"title":"《如何阅读一本书》读书笔记","hash":"f747274243178693efee3e32240e3cbd8e6a9725b757218d72c1156660706881","sub_title":null,"category":{"name":"读书笔记"},"tags":[],"create":"2020-07-19","update":"2020-07-19","author":{"username":"yhw-miracle"},"reader":0,"is_comment":true,"comments":[]},{"title":"《故事力》读书笔记","hash":"2bcba820cb957f905b0fca0d1e25a4c566f0f0eb340ee18df66d03d28fb02f71","sub_title":null,"category":{"name":"读书笔记"},"tags":[],"create":"2020-07-05","update":"2020-07-05","author":{"username":"yhw-miracle"},"reader":2,"is_comment":true,"comments":[]},{"title":"真的被治愈了","hash":"05ecdea6b8be509ec8e635fb50f7c79fb52ddf3ec6e61016efb1687a9712c8ab","sub_title":null,"category":{"name":"生活感悟"},"tags":[],"create":"2020-07-02","update":"2020-07-02","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"ubuntu 设置自定义分辨率","hash":"251c51eb95ac570dd24eeb6f238169de6073674302e9da55ad68b955a65740d0","sub_title":null,"category":{"name":"问题解决"},"tags":[{"name":"ubuntu"}],"create":"2020-07-02","update":"2020-07-02","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]}],"count":119},"7":{"articles":[{"title":"《园丁与木匠》读书笔记","hash":"6d753d7b79505c348c67ed4667920c22d8bd4bdf347a49b206504b087d18c51b","sub_title":null,"category":{"name":"读书笔记"},"tags":[],"create":"2020-06-21","update":"2020-06-21","author":{"username":"yhw-miracle"},"reader":0,"is_comment":true,"comments":[]},{"title":"《格局》读书笔记","hash":"c7382f3816d2150e7cba7300092f46a53a1e1c63e4193cca6d64a5bcd2bf5736","sub_title":null,"category":{"name":"读书笔记"},"tags":[],"create":"2020-06-07","update":"2020-06-07","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"《你当像鸟飞往你的山》读书笔记","hash":"5534967fda7a8320eef3b021ff620ca717ea43195e54dd74b2fa3dad0c79ecf4","sub_title":null,"category":{"name":"读书笔记"},"tags":[],"create":"2020-05-24","update":"2020-05-24","author":{"username":"yhw-miracle"},"reader":0,"is_comment":true,"comments":[]},{"title":"《剧变：人类社会与国家危机的转折点》读书笔记","hash":"2581c164beba7ab738e7d00e603ab7341ba6557805e7182e4cb431f38369f7b5","sub_title":null,"category":{"name":"读书笔记"},"tags":[],"create":"2020-05-10","update":"2020-05-10","author":{"username":"yhw-miracle"},"reader":0,"is_comment":true,"comments":[]},{"title":"利用 gitbook 记录知识","hash":"e1abce7c247261f411cf7800af146c5c9b75c9fa472632f0d87280e11c47cc4e","sub_title":null,"category":{"name":"问题解决"},"tags":[{"name":"gitbook"}],"create":"2019-08-01","update":"2019-08-01","author":{"username":"yhw-miracle"},"reader":0,"is_comment":true,"comments":[]},{"title":"ubuntu16.04 本地部署 YApi 平台","hash":"d64df1145d90ae1bca3dfe98432e187d3575c6fef79bb6d397e07c49074b5e13","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"yapi"}],"create":"2019-07-24","update":"2019-07-24","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"linux 系统下安装 Python3 及配置 Python 虚拟环境","hash":"b13fa4a084a48ee3db0498326add6c03c41aea06a0471d8947001ed42b27b9f0","sub_title":null,"category":{"name":"问题解决"},"tags":[{"name":"Python"},{"name":"virtualenv"}],"create":"2019-07-07","update":"2019-07-07","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"搭建一台可以永久使用的编程机器","hash":"ea153ab03304c254cc019a2f9d330401e8510b1fbab18a3cde57808955f5069b","sub_title":null,"category":{"name":"问题解决"},"tags":[{"name":"ubuntu"}],"create":"2019-07-03","update":"2019-07-03","author":{"username":"yhw-miracle"},"reader":0,"is_comment":true,"comments":[]},{"title":"搭建本地 git 服务器","hash":"84b79cac3ff4ef7e95d1c3e577d85c4216b98903a60fe86898f8792a557b2535","sub_title":null,"category":{"name":"问题解决"},"tags":[{"name":"git"}],"create":"2019-05-01","update":"2019-05-01","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"learning_python_模块和包","hash":"142c92770f592ab19a182ef18e8ffb14020e37349cb768b83f0e85b24482add1","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"Python"}],"create":"2019-04-12","update":"2019-04-12","author":{"username":"yhw-miracle"},"reader":0,"is_comment":true,"comments":[]}],"count":119},"8":{"articles":[{"title":"learning_python_异常","hash":"ee416d39dba8e3a3df9fd7539962fb4572e8712c0d4320595bdd88c033cdb0ff","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"Python"}],"create":"2019-04-11","update":"2019-04-11","author":{"username":"yhw-miracle"},"reader":0,"is_comment":true,"comments":[]},{"title":"learning_python_引用","hash":"a61296fcb8bf9dbba163417c8ba74f12493e260b6926e34d512886d7f57bef03","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"Python"}],"create":"2019-04-09","update":"2019-04-09","author":{"username":"yhw-miracle"},"reader":0,"is_comment":true,"comments":[]},{"title":"learning_python_面向对象","hash":"974add8b18ea3d81cdd24b8f1362f73cb8c1916075afcc4dcb7089c5abeb339e","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"Python"}],"create":"2019-04-08","update":"2019-04-08","author":{"username":"yhw-miracle"},"reader":0,"is_comment":true,"comments":[]},{"title":"learning_python_function","hash":"167fa77db6534dbbdc2691c0dd038699518b895aebc9d059df58ebb04012e6b6","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"Python"}],"create":"2019-04-07","update":"2019-04-07","author":{"username":"yhw-miracle"},"reader":0,"is_comment":true,"comments":[]},{"title":"learning_python_str_2","hash":"7ab5b23a22158d4e9903d63092a7d71e249432f1234a71a16ccba4b15a474508","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"Python"}],"create":"2019-04-06","update":"2019-04-06","author":{"username":"yhw-miracle"},"reader":0,"is_comment":true,"comments":[]},{"title":"learning_python_str_1","hash":"1412db9ffe17e323e564c6a597452d6470a93d39980867076b86c99d3fbdffff","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"Python"}],"create":"2019-04-05","update":"2019-04-05","author":{"username":"yhw-miracle"},"reader":0,"is_comment":true,"comments":[]},{"title":"learning_python_dict","hash":"f0071940b8c96e6cec1c5e80c59258665232f5547aeff87b3c42762ff4ede27a","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"Python"}],"create":"2019-04-04","update":"2019-04-04","author":{"username":"yhw-miracle"},"reader":0,"is_comment":true,"comments":[]},{"title":"learning_python_tuple&set","hash":"385f944f2bf7d66c6ff4d097b278c2096907ed6fe42f32d6b0030d854ac9b720","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"Python"}],"create":"2019-04-03","update":"2019-04-03","author":{"username":"yhw-miracle"},"reader":0,"is_comment":true,"comments":[]},{"title":"learning_python_list","hash":"75e35d380259c0cd18fd5f6aeb7263db6f94fd17a1164ab91a7c6089edd0f77f","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"Python"}],"create":"2019-04-02","update":"2019-04-02","author":{"username":"yhw-miracle"},"reader":0,"is_comment":true,"comments":[]},{"title":"learning_python_start","hash":"3326857c04461b86d2a010ed06e6fa394461b975fd2547c4b21cbb621596a0d2","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"Python"}],"create":"2019-04-01","update":"2019-04-01","author":{"username":"yhw-miracle"},"reader":0,"is_comment":true,"comments":[]}],"count":119},"9":{"articles":[{"title":"详解基础爬虫架构","hash":"d9d416d42350a37a71b63d5d2325bd06f418ecd4b832590d25d6473739eaa4ee","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"Python"},{"name":"爬虫框架"}],"create":"2019-01-15","update":"2019-01-15","author":{"username":"yhw-miracle"},"reader":0,"is_comment":true,"comments":[]},{"title":"Python 实现邮件发送","hash":"372dee48bcd85cb8c3d87dca01b84070d61bc8b44379fe46e642d8b42092149f","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"Python"},{"name":"邮件发送"}],"create":"2019-01-15","update":"2019-01-15","author":{"username":"yhw-miracle"},"reader":0,"is_comment":true,"comments":[]},{"title":"提取多媒体文件","hash":"327fde745e53205a8604543d1e4dd40ebaddfc13cde5c949b2eb81d0a8b20411","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"多媒体文件"}],"create":"2019-01-14","update":"2019-01-14","author":{"username":"yhw-miracle"},"reader":0,"is_comment":true,"comments":[]},{"title":"数据存储为 json 和 csv","hash":"3dd4f58ce2c3444c9e65d892fb86d74c6de1b1036edf6e0f1523ba9784fd1950","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"json"},{"name":"csv"}],"create":"2019-01-14","update":"2019-01-14","author":{"username":"yhw-miracle"},"reader":0,"is_comment":true,"comments":[]},{"title":"总结 BeautifulSoup","hash":"666c800c2aa18127d0e5200f709e5c69fc2c49a9ad47f2d705ea752a355645ec","sub_title":null,"category":{"name":"生活感悟"},"tags":[{"name":"Python"},{"name":"BeautifulSoup"}],"create":"2019-01-13","update":"2019-01-13","author":{"username":"yhw-miracle"},"reader":0,"is_comment":true,"comments":[]},{"title":"备份是一个好工具","hash":"ad445a2c57c1c0897dbc57c31a2a07b9b1e92aaebe7ba0fc08568ef44a8a8bde","sub_title":null,"category":{"name":"生活感悟"},"tags":[{"name":"备份"}],"create":"2019-01-11","update":"2019-01-11","author":{"username":"yhw-miracle"},"reader":0,"is_comment":true,"comments":[]},{"title":"2018总结","hash":"eb593752326319802b5d4339a02ab87e1dcb43cf24ff3e55791e73249ecf3da2","sub_title":null,"category":{"name":"生活感悟"},"tags":[{"name":"总结"}],"create":"2019-01-01","update":"2019-01-01","author":{"username":"yhw-miracle"},"reader":0,"is_comment":true,"comments":[]},{"title":"考研政治选择题命题人思路","hash":"644ac7cbfb5c2a78311a11456607536eb97c60b4e5f185d35ab677c58890ece5","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"考研政治"}],"create":"2018-11-09","update":"2018-11-09","author":{"username":"yhw-miracle"},"reader":0,"is_comment":true,"comments":[]},{"title":"内务整理有感","hash":"4ae0d16297ae629030a3e430ce90d3962910ca9a910e560a3f37a5c739c3b814","sub_title":null,"category":{"name":"生活感悟"},"tags":[],"create":"2018-09-30","update":"2018-09-30","author":{"username":"yhw-miracle"},"reader":0,"is_comment":true,"comments":[]},{"title":"中秋快乐","hash":"dad2c2db7579cbaa310794bdc7b5b8aa73b726c77b16048266fec9cf96c31532","sub_title":null,"category":{"name":"生活感悟"},"tags":[],"create":"2018-09-24","update":"2018-09-24","author":{"username":"yhw-miracle"},"reader":0,"is_comment":true,"comments":[]}],"count":119},"10":{"articles":[{"title":"初识 BeautifulSoup","hash":"f8dcea177511cfdd678b49853a9eed4eee0ade081beb56781bd54de6fc2b18d6","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"Python"},{"name":"BeautifulSoup"}],"create":"2018-08-09","update":"2018-08-09","author":{"username":"yhw-miracle"},"reader":0,"is_comment":true,"comments":[]},{"title":"Python 实现正则","hash":"0fbcc0c5b1e2d3859a7e490db2418d03a45e6a172ff18d18b8c7a5d3861bba82","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"Python"},{"name":"正则"}],"create":"2018-08-08","update":"2018-08-08","author":{"username":"yhw-miracle"},"reader":0,"is_comment":true,"comments":[]},{"title":"正则表达式","hash":"6480e3043c6ee88069a16e9e0f98dbf58835f47d8bb34ded5808f12b8a6ef67c","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"正则"}],"create":"2018-08-07","update":"2018-08-07","author":{"username":"yhw-miracle"},"reader":0,"is_comment":true,"comments":[]},{"title":"Python 实现 HTTP 请求","hash":"f13530d0feb23c9470656fd14367156ac309c9aaaca689ba0da11654d11d60c4","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"HTTP"}],"create":"2018-08-06","update":"2018-08-06","author":{"username":"yhw-miracle"},"reader":0,"is_comment":true,"comments":[]},{"title":"学一点 XPath","hash":"bfded87b556188c85172378eb4518f047f6b69fb88452c33d3c2ee8d1188d906","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"XPath"}],"create":"2018-08-05","update":"2018-08-05","author":{"username":"yhw-miracle"},"reader":0,"is_comment":true,"comments":[]},{"title":"网络编程","hash":"33b458c1145416dc092dda4ea9ca96a3a6d5975ae01a7e15e136c1086ffa703d","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"Python"},{"name":"网络编程"},{"name":"TCP"},{"name":"UDP"}],"create":"2018-08-04","update":"2018-08-04","author":{"username":"yhw-miracle"},"reader":0,"is_comment":true,"comments":[]},{"title":"分布式进程","hash":"c2c695c6631e75c990ce897e3c73aee9df55accb4b3e703004447680e8e9a516","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"Python"},{"name":"分布式进程"}],"create":"2018-08-03","update":"2018-08-03","author":{"username":"yhw-miracle"},"reader":0,"is_comment":true,"comments":[]},{"title":"协程","hash":"ed97ff22a993cc52d108fbe26d97c2a0a6353315ae69f4d27d407273a28b762c","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"Python"},{"name":"协程"}],"create":"2018-08-02","update":"2018-08-02","author":{"username":"yhw-miracle"},"reader":0,"is_comment":true,"comments":[]},{"title":"Python 之多线程","hash":"5866bb2a66ecf886bb0cd9d085a0b773c690d148ad6e36ffb5ffc31c3396a931","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"Python"},{"name":"多线程"}],"create":"2018-08-01","update":"2018-08-01","author":{"username":"yhw-miracle"},"reader":0,"is_comment":true,"comments":[]},{"title":"Python 之进程","hash":"d5481e803c02a7aca6a7e5786a1fbc1ccd06a6846ebc3b408e005c0dc9a04a8c","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"Python"},{"name":"进程"}],"create":"2018-07-31","update":"2018-07-31","author":{"username":"yhw-miracle"},"reader":0,"is_comment":true,"comments":[]}],"count":119},"11":{"articles":[{"title":"Python 之 IO 编程","hash":"19b5f41b0e8b98b6f2fe3db2131c38d73bbc64a9344159cfeb55ffe1bd9fd940","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"Python"},{"name":"IO编程"}],"create":"2018-07-30","update":"2018-07-30","author":{"username":"yhw-miracle"},"reader":0,"is_comment":true,"comments":[]},{"title":"Ubuntu16.04 系统安装 PyCharm","hash":"a20001dd0b5a81ca59431426fe6b2a5cddf41cc001d8f6a59825b48f49fa16e5","sub_title":null,"category":{"name":"问题解决"},"tags":[{"name":"ubuntu"},{"name":"PyCharm"}],"create":"2018-07-22","update":"2018-07-22","author":{"username":"yhw-miracle"},"reader":0,"is_comment":true,"comments":[]},{"title":"JAVA 基础之变量","hash":"16665bcb0323c5e9cfbce331c45f41a7d498db7082f9a8465c3a43bfefc81d88","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"JAVA"},{"name":"变量"}],"create":"2018-06-30","update":"2018-06-30","author":{"username":"yhw-miracle"},"reader":0,"is_comment":true,"comments":[]},{"title":"JAVA 基础之注释、关键字、标识符、数据类型和常量","hash":"02782fa3c8fabf7fc0090b80df8beb16c58eadc7de4a8ebd2ca8472f8b289e76","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"JAVA"},{"name":"注释"},{"name":"关键字"},{"name":"标识符"},{"name":"数据类型"},{"name":"常量"}],"create":"2018-06-26","update":"2018-06-26","author":{"username":"yhw-miracle"},"reader":0,"is_comment":true,"comments":[]},{"title":"JAVA 开发环境安装","hash":"43aa03863e4d1a39661fc6944b698c128eeeae604412e661076ebc0646ec36ce","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"JAVA"},{"name":"JDK"}],"create":"2018-06-25","update":"2018-06-25","author":{"username":"yhw-miracle"},"reader":0,"is_comment":true,"comments":[]},{"title":"决不碌碌无为","hash":"a0de301e2d15abe7b82f858ea1f708040d963e67351c360c6bd58479ec7b69dd","sub_title":null,"category":{"name":"生活感悟"},"tags":[{"name":"鸡汤"}],"create":"2018-03-24","update":"2018-03-24","author":{"username":"yhw-miracle"},"reader":0,"is_comment":true,"comments":[]},{"title":"论文排版总结","hash":"1981b1044cb10eecb3efc3fa2a1848ab549394b6cf6c97ecf9d70cf667362a20","sub_title":null,"category":{"name":"问题解决"},"tags":[{"name":"论文排版"}],"create":"2018-03-13","update":"2018-03-13","author":{"username":"yhw-miracle"},"reader":0,"is_comment":true,"comments":[]},{"title":"2017 总结","hash":"584ef201c104528b488eae8773b85054d56c86ffbc2e9217f5d596f0fef2fc0e","sub_title":null,"category":{"name":"生活感悟"},"tags":[{"name":"总结"}],"create":"2017-12-30","update":"2017-12-30","author":{"username":"yhw-miracle"},"reader":0,"is_comment":true,"comments":[]},{"title":"Android 动态自动匹配输入框","hash":"4eec2eaca39c49a25b273f287d6c9b78208c6aa6431400d95d671781f9731b07","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"Android"},{"name":"自动匹配"}],"create":"2017-09-16","update":"2017-09-16","author":{"username":"yhw-miracle"},"reader":0,"is_comment":true,"comments":[]},{"title":"Intent 实现页面之间跳转","hash":"ce542e82194be19458e1a88c6bc1ff8d97a232776d58f74fb19dada4baac14ec","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"Android"},{"name":"Intent"}],"create":"2017-09-14","update":"2017-09-14","author":{"username":"yhw-miracle"},"reader":0,"is_comment":true,"comments":[]}],"count":119},"12":{"articles":[{"title":"Android 布局","hash":"23295cecd21cfd64f57e6732f574d910f9359a2aeb72c5654730bb4b29c44b2f","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"Android"},{"name":"界面布局"}],"create":"2017-09-14","update":"2017-09-14","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"Android 跑马灯效果","hash":"d18fd06de5bb19f3c0919717ceb1bf54d5e436a9f8b905bc7b65d53bdc133cb9","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"Android"},{"name":"跑马灯"}],"create":"2017-09-13","update":"2017-09-13","author":{"username":"yhw-miracle"},"reader":2,"is_comment":true,"comments":[]},{"title":"Android 按钮点击事件实现","hash":"b92653c33b69aa4b03d6f8789243fc7e62a431bb46a582059739a608adeacd7e","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"Android"},{"name":"按钮事件"}],"create":"2017-09-13","update":"2017-09-13","author":{"username":"yhw-miracle"},"reader":0,"is_comment":true,"comments":[]},{"title":"数据结构与算法（翻译）","hash":"af2e093886cbd69d1d36c2d191d0f7d30ca9a9b5753ad01aed387e586e005007","sub_title":null,"category":{"name":"技术翻译"},"tags":[{"name":"数据结构"},{"name":"算法"}],"create":"2017-07-20","update":"2017-07-20","author":{"username":"yhw-miracle"},"reader":0,"is_comment":true,"comments":[]},{"title":"windows 系统下 MySQL 安装","hash":"9969ffbdb6ab010b16adaf48c13b99d6420dee48cb94103bbd8f1c5fb3aa4031","sub_title":null,"category":{"name":"问题解决"},"tags":[{"name":"MySQL"}],"create":"2017-05-27","update":"2017-05-27","author":{"username":"yhw-miracle"},"reader":0,"is_comment":true,"comments":[]},{"title":"读书使人勤奋","hash":"be65c94d33d8252a6bdd79c9da3cf72345df74df9e5b974e6199b31f6bb3407a","sub_title":null,"category":{"name":"问题解决"},"tags":[{"name":"读书"}],"create":"2017-03-30","update":"2017-03-30","author":{"username":"yhw-miracle"},"reader":0,"is_comment":true,"comments":[]},{"title":"鸡汤","hash":"142b5ba4628ce8a16b6df7548d2bf5b3799f3e4f223bc84d041235a27ffbac58","sub_title":null,"category":{"name":"生活感悟"},"tags":[{"name":"鸡汤"}],"create":"2017-03-03","update":"2017-03-03","author":{"username":"yhw-miracle"},"reader":0,"is_comment":true,"comments":[]},{"title":"人生感悟","hash":"61307657ccd2c968e76bd5161f022f4bb9dd23517dce7af79c3c4316ff97b1b3","sub_title":null,"category":{"name":"生活感悟"},"tags":[{"name":"知识垄断"}],"create":"2017-01-07","update":"2017-01-07","author":{"username":"yhw-miracle"},"reader":0,"is_comment":true,"comments":[]},{"title":"eclipse启动失败","hash":"dc84dff033ed9373e3ebdee6a5f48496b2402c77dec9c1d49d8b6f8ca42d635a","sub_title":null,"category":{"name":"问题解决"},"tags":[{"name":"eclipse"}],"create":"2016-12-25","update":"2016-12-25","author":{"username":"yhw-miracle"},"reader":0,"is_comment":true,"comments":[]}],"count":119}}'),R={name:"BlogHome",data(){return{currentPage:1,pageSize:10,pageCount:1,previousImg:"/images/system/previous.svg",nextImg:"/images/system/next.svg",noPageImg:"/images/system/no_page.svg",articles:[],count:0,isShowTop:!1}},mounted(){this.articles=G[this.currentPage].articles,this.count=G[this.currentPage].count,this.pageCount=Math.ceil(this.count/this.pageSize),this.setPreviousAndNextImg(),window.addEventListener("scroll",this.scrollToTop)},unmounted(){window.removeEventListener("scroll",this.scrollToTop)},methods:{handleCurrentChange(e,t){console.log("handleCurrentChange ===> ",e,t),"previous"==t?e-=1:"next"==t&&(e+=1),this.currentPage=e,this.articles=G[this.currentPage].articles,this.pageCount=Math.ceil(this.count/this.pageSize),this.setPreviousAndNextImg()},setPreviousAndNextImg(){1==this.currentPage?this.previousImg="/images/system/no_page.svg":this.previousImg="/images/system/previous.svg",this.currentPage==this.pageCount?this.nextImg="/images/system/no_page.svg":this.nextImg="/images/system/next.svg"},backTop(){const e=this;let t=setInterval((()=>{let n=Math.floor(-e.scrollTop/5);document.documentElement.scrollTop=document.body.scrollTop=e.scrollTop+n,0===e.scrollTop&&clearInterval(t)}))},scrollToTop(){const e=this;let t=window.pageYOffset||document.documentElement.scrollTop||document.body.scrollTop;e.scrollTop=t,e.scrollTop>0?e.isShowTop=!0:e.isShowTop=!1}}},F=n(89);const q=(0,F.Z)(R,[["render",V]]);var H=q;const z=e=>((0,i.dD)("data-v-2161ec05"),e=e(),(0,i.Cn)(),e),U={class:"articles_by_years"},j={class:"year_label"},J=z((()=>(0,i._)("img",{src:"/images/system/arrow_right1.svg"},null,-1))),K=z((()=>(0,i._)("span",null,"---",-1))),Y=z((()=>(0,i._)("hr",null,null,-1)));function X(e,t,n,r,a,o){const s=(0,i.up)("router-link");return(0,i.wg)(),(0,i.iD)("div",U,[((0,i.wg)(!0),(0,i.iD)(i.HY,null,(0,i.Ko)(a.articles_by_years,((e,t)=>((0,i.wg)(),(0,i.iD)("div",{class:"year_articles",key:t},[(0,i._)("div",j,(0,h.zw)(e.year),1),((0,i.wg)(!0),(0,i.iD)(i.HY,null,(0,i.Ko)(e.articles,((e,t)=>((0,i.wg)(),(0,i.iD)("div",{class:"articles",key:t},[J,(0,i._)("span",null,(0,h.zw)(e.update),1),K,(0,i.Wm)(s,{to:{path:"/detail",query:{id:e.hash}}},{default:(0,i.w5)((()=>[(0,i.Uk)((0,h.zw)(e.title),1)])),_:2},1032,["to"])])))),128)),Y])))),128)),a.isShowTop?((0,i.wg)(),(0,i.iD)("img",{key:0,src:"/images/system/to_top.svg",class:"go_top",onClick:t[0]||(t[0]=(...e)=>o.backTop&&o.backTop(...e))})):(0,i.kq)("",!0)])}var Z=JSON.parse('[{"year":2022,"articles":[{"title":"报错 “System limit for number of file watchers reached”","hash":"973fe62230808e3541bbf2d1d92c9714cd2183e145e9fc88fc889d7b1657f214","sub_title":null,"category":{"name":"问题解决"},"tags":[{"name":"linux"}],"create":"2022-02-21","update":"2022-02-21","author":{"username":"yhw-miracle"},"reader":4,"is_comment":true,"comments":[]},{"title":"磁盘扩容","hash":"e4a685980f20b9199ae6289fa1bb74aea0a61eb963729eb9c653e31cb7afebf7","sub_title":null,"category":{"name":"问题解决"},"tags":[{"name":"linux"}],"create":"2022-02-19","update":"2022-02-19","author":{"username":"yhw-miracle"},"reader":2,"is_comment":true,"comments":[]},{"title":"QHostInfo QNetworkInterface","hash":"13d20a508bb7489bb2c6952f6f4d7801577c33c564c0897a4471360426a049c3","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2022-02-14","update":"2022-02-14","author":{"username":"yhw-miracle"},"reader":2,"is_comment":true,"comments":[]},{"title":"多线程 互斥量","hash":"dc73af7547e0b16223b32a02446ace647bed7b2115d8802db1c9b097763632f3","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2022-02-13","update":"2022-02-13","author":{"username":"yhw-miracle"},"reader":2,"is_comment":true,"comments":[]},{"title":"基于 QWaitCondition 的线程同步","hash":"f801ddade1495b72de5d3752c74e796b1e682c62fa215f30457d9aa5e00a8811","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2022-02-13","update":"2022-02-13","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"基于信号量的线程同步","hash":"6574fb60475b751d80b567fb99c1887e01faf656e3633207e61c18a3690cb303","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2022-02-13","update":"2022-02-13","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"自定义 Widget 组件","hash":"79cbc463848e4fab99f453ff94b5d5cb114140a8d100380791d83fdf4daa67e7","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2022-02-12","update":"2022-02-12","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"QSqlTableModel","hash":"8bfe36af0186a42c04140d3b452cb38663b838cfb9caed663b5b92a4e58fea29","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2022-02-11","update":"2022-02-11","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"QChart 绘图详细功能","hash":"a308226b7af8bfdc37bb01a7a0d34c57efd0efa4e277c247ee53dce469cf57e3","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2022-02-10","update":"2022-02-10","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"QChart 简单绘图","hash":"160fa4df466ebd0fbcabe512ce770655d8716c2cded1275b6c3d3841c8e0e7f9","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2022-02-09","update":"2022-02-09","author":{"username":"yhw-miracle"},"reader":2,"is_comment":true,"comments":[]},{"title":"Graphics View 绘图","hash":"8706099c293f75e24cb2d3908adf7a2ca5eb121b0632c52da2117df168de8e72","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2022-02-08","update":"2022-02-08","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"view scene item 基本关系和坐标变换","hash":"5853fec45ce789cb10e5c9c2eb3e4f93e17c94c0aece88ac80bd598dd46fc645","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2022-02-07","update":"2022-02-07","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"坐标变换","hash":"02fe3d385d7dabbddcfc77c999c1c15e24a472acbb732d7298d682cd42d95e25","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2022-02-06","update":"2022-02-06","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"QPainter 绘图","hash":"2d51cb21fedd6cb4741ddd8af396a54c432df80d30388640de17969da61eae5b","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2022-02-05","update":"2022-02-05","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"目录和文件操作","hash":"c69ca6cfe5ef7406f989f813aff6ecfe6aa8235a0cdd77f0e94e1ce05abaf0ae","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2022-02-03","update":"2022-02-03","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"QDataStream 读写文件","hash":"f30123eba9621ea24ccf71909dd3eb6dd06ff0cbfa5f360bd76af9a030263111","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2022-02-02","update":"2022-02-02","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"文本文件读写","hash":"6275d91b22c6c250e9817d6be805ecc63de65b36a9b85e1c55cfc7d14624284f","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2022-01-17","update":"2022-01-17","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"QT Splash 窗口","hash":"d2c78c2a1b338822d72d948b4113ad8598be906ee481c4b5f481e91856e5dae0","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2022-01-16","update":"2022-01-16","author":{"username":"yhw-miracle"},"reader":2,"is_comment":true,"comments":[]},{"title":"QT MDI 应用程序","hash":"8991356abc17ce79b5091537ad1d9f069e54e4661490b2250e9b07fc95025e05","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2022-01-15","update":"2022-01-15","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"QT 多窗口应用程序","hash":"6e99b7fc114b5666f5b65cda619c8dbb9d96650722971aecae1069f303743392","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2022-01-14","update":"2022-01-14","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"QT 自定义对话框","hash":"59ea31a1cc4fa39882f50bf8f28bfb7deb9e3baee93f8cb4058ba0b83e857e5f","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2022-01-13","update":"2022-01-13","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"QT 对话框","hash":"2fd1196d3dbf8bac688fb53fd63c7692b29e7948cdee4263a6ce9e6a68811fd7","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2022-01-12","update":"2022-01-12","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"QStandardItmeModel","hash":"51f66c981a1d3c58ea8241382ae5c66ec4c5d6124d153a3de6bfa15410f03679","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2022-01-11","update":"2022-01-11","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"QStringListModel","hash":"1e1ecb1869e43399905dafa495f07c4b3b5ac7a6bdb5320472267237f93022b8","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2022-01-10","update":"2022-01-10","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"文件系统 Model 和 View","hash":"7723af9ef08750e22fe429efa017257d2e3b8305ae25767236dee1dc78cb8894","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2022-01-09","update":"2022-01-09","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"QTableWidget","hash":"222137b183bf4820900bce92c86bef9726754fa42ec9e8ca8b6e51bf0c990b90","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2022-01-08","update":"2022-01-08","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"QTreeWidget 和 QDockWidget","hash":"0f2819e64af807ce5f59b7e050f0628a8d1367f03262fe4c3d6f305c15d7258f","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2022-01-07","update":"2022-01-07","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"QListWidget","hash":"6e44336e6d3176bafe097c03c8b4fa1b4720238d35450c44b72f7e3177370a57","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2022-01-06","update":"2022-01-06","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]}]},{"year":2021,"articles":[{"title":"QComboBox 与 QPlainTextEdit","hash":"9ffb95c55f457c59b13eb3830359a9ffb88bc697f86dfba172b1c403a2fca547","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2021-12-11","update":"2021-12-11","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"定时器","hash":"433f4907bfc0355f5d83ffa8fb35c5c1f9f5071760204594286ed2850f98ae07","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2021-12-10","update":"2021-12-10","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"日历","hash":"5a044901d20d03b5ca5c87123f084c8403b08064b937f1b8a0ee0bdb4287fe5a","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2021-12-09","update":"2021-12-09","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"日期时间","hash":"c7b7c6856d0c994e79e83db768d39c88f8e09f56c04f1595777dd16fb71d996f","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2021-12-08","update":"2021-12-08","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"QDial 与 QLCDNumber 使用","hash":"36f0a938aa1bfa69dfe45d6f1b31085c8ec61a3b824026d1f5e2ff915be923fd","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2021-12-07","update":"2021-12-07","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"QProgressBar","hash":"5a8408f9489b97ae187a42b7209ac8f0da05e700c73c67836dfa870ea82541e7","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2021-12-06","update":"2021-12-06","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"QScrollBar","hash":"1d1a9cbd6ef9504257026be403a93f3529f94d45594243953b0f6ad1ed1f85b9","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2021-12-05","update":"2021-12-05","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"QSlider","hash":"ca65ce3eacc94969c87cdbaca44ffc36ff1cd29e4231c94774ac124187b96fc8","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2021-12-04","update":"2021-12-04","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"QSpinBox 与 QDoubleSpinBox 的使用","hash":"e1e488f407b70335b91dca4af03479960c29d68eba9bc8890b3227ea498786a8","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2021-12-03","update":"2021-12-03","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"QString 的常用功能","hash":"c7977fcb1e92d746a1e3e4e785b4c032f2e8fa558d6ba3844e741196f6118377","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2021-12-02","update":"2021-12-02","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"字符串与数值之间的转换","hash":"82c9fd9a979cf75a24b79a98aa3f81d5edf826ea0db5b42fcfebc4987fc70582","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2021-12-01","update":"2021-12-01","author":{"username":"yhw-miracle"},"reader":3,"is_comment":true,"comments":[]},{"title":"QT 窗体类","hash":"10048f18a4b00cda21d5adee26e40c14f444983afffb4810bc46c52eb4f7e4b7","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"QT"}],"create":"2021-11-30","update":"2021-11-30","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"QT 事件","hash":"4767070de7562964926437cea497ad5a2ee1b4088008e7c0ec5b8bf5eb7b6614","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"QT"}],"create":"2021-11-30","update":"2021-11-30","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"Model View","hash":"6d1d64e7ecf3169283a65272c165714d818d1359098e620290c7d34467b75db3","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"QT"}],"create":"2021-11-29","update":"2021-11-29","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"QPlainTextEdit","hash":"cbd4226fad52065942bc6888839bb0527ce92157c47881a99834579f881eec60","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"QT"}],"create":"2021-11-28","update":"2021-11-28","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"QComboBox","hash":"1d610e0ab20e5fbf32591b9fd07cd149c80c61010a9e5bbffdefe06778f4224d","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"QT"}],"create":"2021-11-28","update":"2021-11-28","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"QDateEdit QTimeEdit","hash":"d7e012b39a551b475a823dacc814ba8440744138f06dc905e753a7ed598a50aa","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"QT"}],"create":"2021-11-28","update":"2021-11-28","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"QSpinBox 与 QDOubleSpinBox 的属性","hash":"04863573382c6e610f2b7871cfb65292d613fbb1ba29334574b9b2bf718cdb3c","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"QT"}],"create":"2021-11-27","update":"2021-11-27","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"QSlider QScrollBar Qdial","hash":"02f80b76e979409a82770dfc0ed605725c2b61c5335d7490121f56ea77915736","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"QT"}],"create":"2021-11-27","update":"2021-11-27","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"QString","hash":"44c42138d0984a831e0c1b84eba5a4339871c6bc2170560ded4306e884c5c712","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"QT"}],"create":"2021-11-27","update":"2021-11-27","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"QT 模块","hash":"d3b10c6a1d4ecca24b29e93b714a83e57ad4c2db1000891376d0683b9a65564b","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"QT"}],"create":"2021-11-26","update":"2021-11-26","author":{"username":"yhw-miracle"},"reader":2,"is_comment":true,"comments":[]},{"title":"QT 容器类的迭代","hash":"8fe94e1580fea922a255e2d7bf5226c57b92fb56a8125dd75e6f23331612e0d6","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"QT"}],"create":"2021-11-26","update":"2021-11-26","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"QT 容器类","hash":"600a08d87247d1d0ac32f8052d43b5457c64fb622a352ac23329b994acca86c8","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"QT"}],"create":"2021-11-26","update":"2021-11-26","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"QT 数据类型","hash":"02e6c33c9dd5c850a8af5cacedee6cb343f8e3bfdad0fddd57be21313183295f","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"QT"}],"create":"2021-11-26","update":"2021-11-26","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"列表去重并保留原先顺序","hash":"ccf8d0c551a805fb5c9de4c3eddf1baa7c13cd33b3f337c7043f8da6c99c90c6","sub_title":null,"category":{"name":"问题解决"},"tags":[{"name":"Python"}],"create":"2021-11-24","update":"2021-11-24","author":{"username":"yhw-miracle"},"reader":2,"is_comment":true,"comments":[]},{"title":"CentOS7 切换不同更新源","hash":"6ea9ec5b049dbc93a537898e72fdd28a33f7716205bc3222574193ebcdc1100b","sub_title":null,"category":{"name":"问题解决"},"tags":[{"name":"CentOS7"}],"create":"2021-11-18","update":"2021-11-18","author":{"username":"yhw-miracle"},"reader":2,"is_comment":true,"comments":[]},{"title":"showdoc 安装与迁移","hash":"5296fb7855d8ce7db9ed2deffcba61e064f0b498b38452e435455843cf28feff","sub_title":null,"category":{"name":"问题解决"},"tags":[{"name":"showdoc"}],"create":"2021-11-18","update":"2021-11-18","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"MySQL 相关设置","hash":"d64b3c10b20f779b1f9a34fa56495e172ea71b37e9c260fb3f039fb0a2b0b333","sub_title":null,"category":{"name":"问题解决"},"tags":[{"name":"MySQL"}],"create":"2021-11-18","update":"2021-11-18","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]}]},{"year":2020,"articles":[{"title":"《如何阅读一本书》读书笔记","hash":"f747274243178693efee3e32240e3cbd8e6a9725b757218d72c1156660706881","sub_title":null,"category":{"name":"读书笔记"},"tags":[],"create":"2020-07-19","update":"2020-07-19","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"《故事力》读书笔记","hash":"2bcba820cb957f905b0fca0d1e25a4c566f0f0eb340ee18df66d03d28fb02f71","sub_title":null,"category":{"name":"读书笔记"},"tags":[],"create":"2020-07-05","update":"2020-07-05","author":{"username":"yhw-miracle"},"reader":3,"is_comment":true,"comments":[]},{"title":"真的被治愈了","hash":"05ecdea6b8be509ec8e635fb50f7c79fb52ddf3ec6e61016efb1687a9712c8ab","sub_title":null,"category":{"name":"生活感悟"},"tags":[],"create":"2020-07-02","update":"2020-07-02","author":{"username":"yhw-miracle"},"reader":2,"is_comment":true,"comments":[]},{"title":"ubuntu 设置自定义分辨率","hash":"251c51eb95ac570dd24eeb6f238169de6073674302e9da55ad68b955a65740d0","sub_title":null,"category":{"name":"问题解决"},"tags":[{"name":"ubuntu"}],"create":"2020-07-02","update":"2020-07-02","author":{"username":"yhw-miracle"},"reader":2,"is_comment":true,"comments":[]},{"title":"《园丁与木匠》读书笔记","hash":"6d753d7b79505c348c67ed4667920c22d8bd4bdf347a49b206504b087d18c51b","sub_title":null,"category":{"name":"读书笔记"},"tags":[],"create":"2020-06-21","update":"2020-06-21","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"《格局》读书笔记","hash":"c7382f3816d2150e7cba7300092f46a53a1e1c63e4193cca6d64a5bcd2bf5736","sub_title":null,"category":{"name":"读书笔记"},"tags":[],"create":"2020-06-07","update":"2020-06-07","author":{"username":"yhw-miracle"},"reader":2,"is_comment":true,"comments":[]},{"title":"《你当像鸟飞往你的山》读书笔记","hash":"5534967fda7a8320eef3b021ff620ca717ea43195e54dd74b2fa3dad0c79ecf4","sub_title":null,"category":{"name":"读书笔记"},"tags":[],"create":"2020-05-24","update":"2020-05-24","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"《剧变：人类社会与国家危机的转折点》读书笔记","hash":"2581c164beba7ab738e7d00e603ab7341ba6557805e7182e4cb431f38369f7b5","sub_title":null,"category":{"name":"读书笔记"},"tags":[],"create":"2020-05-10","update":"2020-05-10","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]}]},{"year":2019,"articles":[{"title":"利用 gitbook 记录知识","hash":"e1abce7c247261f411cf7800af146c5c9b75c9fa472632f0d87280e11c47cc4e","sub_title":null,"category":{"name":"问题解决"},"tags":[{"name":"gitbook"}],"create":"2019-08-01","update":"2019-08-01","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"ubuntu16.04 本地部署 YApi 平台","hash":"d64df1145d90ae1bca3dfe98432e187d3575c6fef79bb6d397e07c49074b5e13","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"yapi"}],"create":"2019-07-24","update":"2019-07-24","author":{"username":"yhw-miracle"},"reader":2,"is_comment":true,"comments":[]},{"title":"linux 系统下安装 Python3 及配置 Python 虚拟环境","hash":"b13fa4a084a48ee3db0498326add6c03c41aea06a0471d8947001ed42b27b9f0","sub_title":null,"category":{"name":"问题解决"},"tags":[{"name":"Python"},{"name":"virtualenv"}],"create":"2019-07-07","update":"2019-07-07","author":{"username":"yhw-miracle"},"reader":2,"is_comment":true,"comments":[]},{"title":"搭建一台可以永久使用的编程机器","hash":"ea153ab03304c254cc019a2f9d330401e8510b1fbab18a3cde57808955f5069b","sub_title":null,"category":{"name":"问题解决"},"tags":[{"name":"ubuntu"}],"create":"2019-07-03","update":"2019-07-03","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"搭建本地 git 服务器","hash":"84b79cac3ff4ef7e95d1c3e577d85c4216b98903a60fe86898f8792a557b2535","sub_title":null,"category":{"name":"问题解决"},"tags":[{"name":"git"}],"create":"2019-05-01","update":"2019-05-01","author":{"username":"yhw-miracle"},"reader":2,"is_comment":true,"comments":[]},{"title":"learning_python_模块和包","hash":"142c92770f592ab19a182ef18e8ffb14020e37349cb768b83f0e85b24482add1","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"Python"}],"create":"2019-04-12","update":"2019-04-12","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"learning_python_异常","hash":"ee416d39dba8e3a3df9fd7539962fb4572e8712c0d4320595bdd88c033cdb0ff","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"Python"}],"create":"2019-04-11","update":"2019-04-11","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"learning_python_引用","hash":"a61296fcb8bf9dbba163417c8ba74f12493e260b6926e34d512886d7f57bef03","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"Python"}],"create":"2019-04-09","update":"2019-04-09","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"learning_python_面向对象","hash":"974add8b18ea3d81cdd24b8f1362f73cb8c1916075afcc4dcb7089c5abeb339e","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"Python"}],"create":"2019-04-08","update":"2019-04-08","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"learning_python_function","hash":"167fa77db6534dbbdc2691c0dd038699518b895aebc9d059df58ebb04012e6b6","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"Python"}],"create":"2019-04-07","update":"2019-04-07","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"learning_python_str_2","hash":"7ab5b23a22158d4e9903d63092a7d71e249432f1234a71a16ccba4b15a474508","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"Python"}],"create":"2019-04-06","update":"2019-04-06","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"learning_python_str_1","hash":"1412db9ffe17e323e564c6a597452d6470a93d39980867076b86c99d3fbdffff","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"Python"}],"create":"2019-04-05","update":"2019-04-05","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"learning_python_dict","hash":"f0071940b8c96e6cec1c5e80c59258665232f5547aeff87b3c42762ff4ede27a","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"Python"}],"create":"2019-04-04","update":"2019-04-04","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"learning_python_tuple&set","hash":"385f944f2bf7d66c6ff4d097b278c2096907ed6fe42f32d6b0030d854ac9b720","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"Python"}],"create":"2019-04-03","update":"2019-04-03","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"learning_python_list","hash":"75e35d380259c0cd18fd5f6aeb7263db6f94fd17a1164ab91a7c6089edd0f77f","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"Python"}],"create":"2019-04-02","update":"2019-04-02","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"learning_python_start","hash":"3326857c04461b86d2a010ed06e6fa394461b975fd2547c4b21cbb621596a0d2","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"Python"}],"create":"2019-04-01","update":"2019-04-01","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"详解基础爬虫架构","hash":"d9d416d42350a37a71b63d5d2325bd06f418ecd4b832590d25d6473739eaa4ee","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"Python"},{"name":"爬虫框架"}],"create":"2019-01-15","update":"2019-01-15","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"Python 实现邮件发送","hash":"372dee48bcd85cb8c3d87dca01b84070d61bc8b44379fe46e642d8b42092149f","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"Python"},{"name":"邮件发送"}],"create":"2019-01-15","update":"2019-01-15","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"提取多媒体文件","hash":"327fde745e53205a8604543d1e4dd40ebaddfc13cde5c949b2eb81d0a8b20411","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"多媒体文件"}],"create":"2019-01-14","update":"2019-01-14","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"数据存储为 json 和 csv","hash":"3dd4f58ce2c3444c9e65d892fb86d74c6de1b1036edf6e0f1523ba9784fd1950","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"json"},{"name":"csv"}],"create":"2019-01-14","update":"2019-01-14","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"总结 BeautifulSoup","hash":"666c800c2aa18127d0e5200f709e5c69fc2c49a9ad47f2d705ea752a355645ec","sub_title":null,"category":{"name":"生活感悟"},"tags":[{"name":"Python"},{"name":"BeautifulSoup"}],"create":"2019-01-13","update":"2019-01-13","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"备份是一个好工具","hash":"ad445a2c57c1c0897dbc57c31a2a07b9b1e92aaebe7ba0fc08568ef44a8a8bde","sub_title":null,"category":{"name":"生活感悟"},"tags":[{"name":"备份"}],"create":"2019-01-11","update":"2019-01-11","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"2018总结","hash":"eb593752326319802b5d4339a02ab87e1dcb43cf24ff3e55791e73249ecf3da2","sub_title":null,"category":{"name":"生活感悟"},"tags":[{"name":"总结"}],"create":"2019-01-01","update":"2019-01-01","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]}]},{"year":2018,"articles":[{"title":"考研政治选择题命题人思路","hash":"644ac7cbfb5c2a78311a11456607536eb97c60b4e5f185d35ab677c58890ece5","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"考研政治"}],"create":"2018-11-09","update":"2018-11-09","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"内务整理有感","hash":"4ae0d16297ae629030a3e430ce90d3962910ca9a910e560a3f37a5c739c3b814","sub_title":null,"category":{"name":"生活感悟"},"tags":[],"create":"2018-09-30","update":"2018-09-30","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"中秋快乐","hash":"dad2c2db7579cbaa310794bdc7b5b8aa73b726c77b16048266fec9cf96c31532","sub_title":null,"category":{"name":"生活感悟"},"tags":[],"create":"2018-09-24","update":"2018-09-24","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"初识 BeautifulSoup","hash":"f8dcea177511cfdd678b49853a9eed4eee0ade081beb56781bd54de6fc2b18d6","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"Python"},{"name":"BeautifulSoup"}],"create":"2018-08-09","update":"2018-08-09","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"Python 实现正则","hash":"0fbcc0c5b1e2d3859a7e490db2418d03a45e6a172ff18d18b8c7a5d3861bba82","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"Python"},{"name":"正则"}],"create":"2018-08-08","update":"2018-08-08","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"正则表达式","hash":"6480e3043c6ee88069a16e9e0f98dbf58835f47d8bb34ded5808f12b8a6ef67c","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"正则"}],"create":"2018-08-07","update":"2018-08-07","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"Python 实现 HTTP 请求","hash":"f13530d0feb23c9470656fd14367156ac309c9aaaca689ba0da11654d11d60c4","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"HTTP"}],"create":"2018-08-06","update":"2018-08-06","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"学一点 XPath","hash":"bfded87b556188c85172378eb4518f047f6b69fb88452c33d3c2ee8d1188d906","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"XPath"}],"create":"2018-08-05","update":"2018-08-05","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"网络编程","hash":"33b458c1145416dc092dda4ea9ca96a3a6d5975ae01a7e15e136c1086ffa703d","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"Python"},{"name":"网络编程"},{"name":"TCP"},{"name":"UDP"}],"create":"2018-08-04","update":"2018-08-04","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"分布式进程","hash":"c2c695c6631e75c990ce897e3c73aee9df55accb4b3e703004447680e8e9a516","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"Python"},{"name":"分布式进程"}],"create":"2018-08-03","update":"2018-08-03","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"协程","hash":"ed97ff22a993cc52d108fbe26d97c2a0a6353315ae69f4d27d407273a28b762c","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"Python"},{"name":"协程"}],"create":"2018-08-02","update":"2018-08-02","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"Python 之多线程","hash":"5866bb2a66ecf886bb0cd9d085a0b773c690d148ad6e36ffb5ffc31c3396a931","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"Python"},{"name":"多线程"}],"create":"2018-08-01","update":"2018-08-01","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"Python 之进程","hash":"d5481e803c02a7aca6a7e5786a1fbc1ccd06a6846ebc3b408e005c0dc9a04a8c","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"Python"},{"name":"进程"}],"create":"2018-07-31","update":"2018-07-31","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"Python 之 IO 编程","hash":"19b5f41b0e8b98b6f2fe3db2131c38d73bbc64a9344159cfeb55ffe1bd9fd940","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"Python"},{"name":"IO编程"}],"create":"2018-07-30","update":"2018-07-30","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"Ubuntu16.04 系统安装 PyCharm","hash":"a20001dd0b5a81ca59431426fe6b2a5cddf41cc001d8f6a59825b48f49fa16e5","sub_title":null,"category":{"name":"问题解决"},"tags":[{"name":"ubuntu"},{"name":"PyCharm"}],"create":"2018-07-22","update":"2018-07-22","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"JAVA 基础之变量","hash":"16665bcb0323c5e9cfbce331c45f41a7d498db7082f9a8465c3a43bfefc81d88","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"JAVA"},{"name":"变量"}],"create":"2018-06-30","update":"2018-06-30","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"JAVA 基础之注释、关键字、标识符、数据类型和常量","hash":"02782fa3c8fabf7fc0090b80df8beb16c58eadc7de4a8ebd2ca8472f8b289e76","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"JAVA"},{"name":"注释"},{"name":"关键字"},{"name":"标识符"},{"name":"数据类型"},{"name":"常量"}],"create":"2018-06-26","update":"2018-06-26","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"JAVA 开发环境安装","hash":"43aa03863e4d1a39661fc6944b698c128eeeae604412e661076ebc0646ec36ce","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"JAVA"},{"name":"JDK"}],"create":"2018-06-25","update":"2018-06-25","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"决不碌碌无为","hash":"a0de301e2d15abe7b82f858ea1f708040d963e67351c360c6bd58479ec7b69dd","sub_title":null,"category":{"name":"生活感悟"},"tags":[{"name":"鸡汤"}],"create":"2018-03-24","update":"2018-03-24","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"论文排版总结","hash":"1981b1044cb10eecb3efc3fa2a1848ab549394b6cf6c97ecf9d70cf667362a20","sub_title":null,"category":{"name":"问题解决"},"tags":[{"name":"论文排版"}],"create":"2018-03-13","update":"2018-03-13","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]}]},{"year":2017,"articles":[{"title":"2017 总结","hash":"584ef201c104528b488eae8773b85054d56c86ffbc2e9217f5d596f0fef2fc0e","sub_title":null,"category":{"name":"生活感悟"},"tags":[{"name":"总结"}],"create":"2017-12-30","update":"2017-12-30","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"Android 动态自动匹配输入框","hash":"4eec2eaca39c49a25b273f287d6c9b78208c6aa6431400d95d671781f9731b07","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"Android"},{"name":"自动匹配"}],"create":"2017-09-16","update":"2017-09-16","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"Intent 实现页面之间跳转","hash":"ce542e82194be19458e1a88c6bc1ff8d97a232776d58f74fb19dada4baac14ec","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"Android"},{"name":"Intent"}],"create":"2017-09-14","update":"2017-09-14","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"Android 布局","hash":"23295cecd21cfd64f57e6732f574d910f9359a2aeb72c5654730bb4b29c44b2f","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"Android"},{"name":"界面布局"}],"create":"2017-09-14","update":"2017-09-14","author":{"username":"yhw-miracle"},"reader":2,"is_comment":true,"comments":[]},{"title":"Android 跑马灯效果","hash":"d18fd06de5bb19f3c0919717ceb1bf54d5e436a9f8b905bc7b65d53bdc133cb9","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"Android"},{"name":"跑马灯"}],"create":"2017-09-13","update":"2017-09-13","author":{"username":"yhw-miracle"},"reader":3,"is_comment":true,"comments":[]},{"title":"Android 按钮点击事件实现","hash":"b92653c33b69aa4b03d6f8789243fc7e62a431bb46a582059739a608adeacd7e","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"Android"},{"name":"按钮事件"}],"create":"2017-09-13","update":"2017-09-13","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"数据结构与算法（翻译）","hash":"af2e093886cbd69d1d36c2d191d0f7d30ca9a9b5753ad01aed387e586e005007","sub_title":null,"category":{"name":"技术翻译"},"tags":[{"name":"数据结构"},{"name":"算法"}],"create":"2017-07-20","update":"2017-07-20","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"windows 系统下 MySQL 安装","hash":"9969ffbdb6ab010b16adaf48c13b99d6420dee48cb94103bbd8f1c5fb3aa4031","sub_title":null,"category":{"name":"问题解决"},"tags":[{"name":"MySQL"}],"create":"2017-05-27","update":"2017-05-27","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"读书使人勤奋","hash":"be65c94d33d8252a6bdd79c9da3cf72345df74df9e5b974e6199b31f6bb3407a","sub_title":null,"category":{"name":"问题解决"},"tags":[{"name":"读书"}],"create":"2017-03-30","update":"2017-03-30","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"鸡汤","hash":"142b5ba4628ce8a16b6df7548d2bf5b3799f3e4f223bc84d041235a27ffbac58","sub_title":null,"category":{"name":"生活感悟"},"tags":[{"name":"鸡汤"}],"create":"2017-03-03","update":"2017-03-03","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},{"title":"人生感悟","hash":"61307657ccd2c968e76bd5161f022f4bb9dd23517dce7af79c3c4316ff97b1b3","sub_title":null,"category":{"name":"生活感悟"},"tags":[{"name":"知识垄断"}],"create":"2017-01-07","update":"2017-01-07","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]}]},{"year":2016,"articles":[{"title":"eclipse启动失败","hash":"dc84dff033ed9373e3ebdee6a5f48496b2402c77dec9c1d49d8b6f8ca42d635a","sub_title":null,"category":{"name":"问题解决"},"tags":[{"name":"eclipse"}],"create":"2016-12-25","update":"2016-12-25","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]}]}]'),$={name:"BlogArticles",data(){return{articles_by_years:[],isShowTop:!1}},mounted(){this.articles_by_years=Z,window.addEventListener("scroll",this.scrollToTop)},unmounted(){window.removeEventListener("scroll",this.scrollToTop)},methods:{backTop(){const e=this;let t=setInterval((()=>{let n=Math.floor(-e.scrollTop/5);document.documentElement.scrollTop=document.body.scrollTop=e.scrollTop+n,0===e.scrollTop&&clearInterval(t)}))},scrollToTop(){const e=this;let t=window.pageYOffset||document.documentElement.scrollTop||document.body.scrollTop;e.scrollTop=t,e.scrollTop>0?e.isShowTop=!0:e.isShowTop=!1}}};const ee=(0,F.Z)($,[["render",X],["__scopeId","data-v-2161ec05"]]);var te=ee;const ne=e=>((0,i.dD)("data-v-16507186"),e=e(),(0,i.Cn)(),e),re={class:"about"},ie={class:"name"},ae=ne((()=>(0,i._)("img",{src:"/images/system/arrow_right1.svg"},null,-1))),oe=ne((()=>(0,i._)("img",{src:"/images/system/arrow_right2.svg"},null,-1))),se=ne((()=>(0,i._)("hr",null,null,-1))),de={class:"outstanding_people"},ce=ne((()=>(0,i._)("div",{class:"name"},[(0,i._)("img",{src:"/images/system/arrow_right1.svg"}),(0,i._)("span",null,"一些写作者")],-1))),le=ne((()=>(0,i._)("thead",null,[(0,i._)("tr",null,[(0,i._)("th",null,"image"),(0,i._)("th",null,"nick_name"),(0,i._)("th",null,"link"),(0,i._)("th",null,"belief")])],-1))),ue=["src"],he=["href"];function me(e,t,n,r,a,o){return(0,i.wg)(),(0,i.iD)("div",re,[((0,i.wg)(!0),(0,i.iD)(i.HY,null,(0,i.Ko)(a.about_data,((e,t)=>((0,i.wg)(),(0,i.iD)("div",{class:"about_data",key:t},[(0,i._)("div",ie,[ae,(0,i._)("span",null,(0,h.zw)(e.name),1)]),((0,i.wg)(!0),(0,i.iD)(i.HY,null,(0,i.Ko)(e.content,((e,t)=>((0,i.wg)(),(0,i.iD)("div",{class:"content",key:t},[oe,(0,i._)("span",null,(0,h.zw)(e),1)])))),128)),se])))),128)),(0,i._)("div",de,[ce,(0,i._)("table",null,[le,(0,i._)("tbody",null,[((0,i.wg)(!0),(0,i.iD)(i.HY,null,(0,i.Ko)(a.outstanding_people,((e,t)=>((0,i.wg)(),(0,i.iD)("tr",{key:t},[(0,i._)("td",null,[(0,i._)("img",{src:e.image,width:"50",height:"50"},null,8,ue)]),(0,i._)("td",null,(0,h.zw)(e.nick_name),1),(0,i._)("td",null,[((0,i.wg)(!0),(0,i.iD)(i.HY,null,(0,i.Ko)(e.link,((e,t)=>((0,i.wg)(),(0,i.iD)("span",{class:"link_item",key:t},[(0,i._)("a",{href:e,target:"_blank"},(0,h.zw)(e),9,he)])))),128))]),(0,i._)("td",null,(0,h.zw)(e.belief),1)])))),128))])])])])}var be=JSON.parse('[{"name":"每日金句(每日更新)","content":["种一棵树最好的时间是十年前，其次就是现在，珍惜时光，不负时光。","越小众的产品，越愿意拥抱创新；越大众的服务，越难推广创新。","人不可能通过逃避获得平静。极致的逃避不仅没可耻，而且也没什么用。","趁年轻，好好利用这个计划，尽力去尝遍所有痛苦，爱情可不是一辈子什么时候都会遇到的。","人生没有「最好」的决定，只有在决定之后做到「最好」。"]},{"name":"个人介绍","content":["爱读书, 截止到目前累计阅读字数超过 3000 万字。","爱编程, 多语言开发者，使用过 C、C++、Python、JAVA, 写过网页、Android APP、PC 桌面应用程序。","爱写作, 截止到目前发表文字数超过 3 万字。"]},{"name":"网络足迹","content":["Github: https://github.com/yhw-miracle","公众号: 痛点就是起点"]},{"name":"技能树","content":["C++: QT/C++11 ...","Python: Django/Flask/Scrapy ...","后端: 数据库/异步任务/Celery/Docker ...","前端: Html/CSS/JavaScript/Vue/React ...","JAVA: Spring"]}]'),ge=JSON.parse('[{"image":"/images/authors/hdp.jpg","nick_name":"whark","link":["https://whark.cn"],"belief":"除了一个小秘密，我只是一个极其平凡的人。"},{"image":"/images/authors/jqq.jpg","nick_name":"qiracle","link":["https://qiracle.cn"],"belief":"no pains,no gains."},{"image":"/images/authors/zkp.jpg","nick_name":"mour","link":["https://iami.xyz"],"belief":"人生其实宽广的很"},{"image":"/images/authors/zwl.jpg","nick_name":"slycmiaoxi","link":["https://slycmiaoxi.github.io"],"belief":"I believe my dream will come true."}]'),fe={name:"BlogAbout",data(){return{about_data:be,outstanding_people:ge}}};const pe=(0,F.Z)(fe,[["render",me],["__scopeId","data-v-16507186"]]);var we=pe;const ye=e=>((0,i.dD)("data-v-63b4e4a7"),e=e(),(0,i.Cn)(),e),Qe={class:"category_page"},xe={class:"summary"},_e=["onClick"],Be=ye((()=>(0,i._)("hr",null,null,-1))),Te={class:"detail"},Se=["id"],Le=ye((()=>(0,i._)("img",{src:"/images/system/category.svg"},null,-1))),Ie=ye((()=>(0,i._)("img",{src:"/images/system/arrow_right1.svg"},null,-1))),We=ye((()=>(0,i._)("span",null,"---",-1))),ke=ye((()=>(0,i._)("hr",null,null,-1)));function ve(e,t,n,r,a,o){const s=(0,i.up)("router-link");return(0,i.wg)(),(0,i.iD)("div",Qe,[(0,i._)("div",xe,[((0,i.wg)(!0),(0,i.iD)(i.HY,null,(0,i.Ko)(a.articles_by_category,((e,t)=>((0,i.wg)(),(0,i.iD)("div",{class:"summary_item",key:t},[(0,i._)("a",{onClick:t=>o.go_anchor("#"+e.name),target:"_self"},(0,h.zw)(e.name)+"("+(0,h.zw)(e.articles.length)+")",9,_e)])))),128))]),Be,(0,i._)("div",Te,[((0,i.wg)(!0),(0,i.iD)(i.HY,null,(0,i.Ko)(a.articles_by_category,((e,t)=>((0,i.wg)(),(0,i.iD)("div",{class:"category_info",key:t},[(0,i._)("div",{class:"info",id:e.name},[Le,(0,i._)("span",null,(0,h.zw)(e.name)+"("+(0,h.zw)(e.articles.length)+")",1)],8,Se),((0,i.wg)(!0),(0,i.iD)(i.HY,null,(0,i.Ko)(e.articles,((e,t)=>((0,i.wg)(),(0,i.iD)("div",{class:"category_articles",key:t},[Ie,(0,i._)("span",null,(0,h.zw)(e.update),1),We,(0,i.Wm)(s,{to:{path:"/detail",query:{id:e.hash}}},{default:(0,i.w5)((()=>[(0,i.Uk)((0,h.zw)(e.title),1)])),_:2},1032,["to"])])))),128)),ke])))),128))]),a.isShowTop?((0,i.wg)(),(0,i.iD)("img",{key:0,src:"/images/system/to_top.svg",class:"go_top",onClick:t[0]||(t[0]=(...e)=>o.backTop&&o.backTop(...e))})):(0,i.kq)("",!0)])}var Me=JSON.parse('[{"name":"问题解决","hash":"aa1f2d574ddb77261b643da59d46920709117702a481bbcdfb3aeb5563c73155","articles":[{"title":"eclipse启动失败","hash":"dc84dff033ed9373e3ebdee6a5f48496b2402c77dec9c1d49d8b6f8ca42d635a","sub_title":null,"create":"2016-12-25","update":"2016-12-25","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"读书使人勤奋","hash":"be65c94d33d8252a6bdd79c9da3cf72345df74df9e5b974e6199b31f6bb3407a","sub_title":null,"create":"2017-03-30","update":"2017-03-30","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"windows 系统下 MySQL 安装","hash":"9969ffbdb6ab010b16adaf48c13b99d6420dee48cb94103bbd8f1c5fb3aa4031","sub_title":null,"create":"2017-05-27","update":"2017-05-27","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"论文排版总结","hash":"1981b1044cb10eecb3efc3fa2a1848ab549394b6cf6c97ecf9d70cf667362a20","sub_title":null,"create":"2018-03-13","update":"2018-03-13","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"Ubuntu16.04 系统安装 PyCharm","hash":"a20001dd0b5a81ca59431426fe6b2a5cddf41cc001d8f6a59825b48f49fa16e5","sub_title":null,"create":"2018-07-22","update":"2018-07-22","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"搭建本地 git 服务器","hash":"84b79cac3ff4ef7e95d1c3e577d85c4216b98903a60fe86898f8792a557b2535","sub_title":null,"create":"2019-05-01","update":"2019-05-01","author":{"username":"yhw-miracle"},"reader":2,"is_comment":true},{"title":"搭建一台可以永久使用的编程机器","hash":"ea153ab03304c254cc019a2f9d330401e8510b1fbab18a3cde57808955f5069b","sub_title":null,"create":"2019-07-03","update":"2019-07-03","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"linux 系统下安装 Python3 及配置 Python 虚拟环境","hash":"b13fa4a084a48ee3db0498326add6c03c41aea06a0471d8947001ed42b27b9f0","sub_title":null,"create":"2019-07-07","update":"2019-07-07","author":{"username":"yhw-miracle"},"reader":2,"is_comment":true},{"title":"利用 gitbook 记录知识","hash":"e1abce7c247261f411cf7800af146c5c9b75c9fa472632f0d87280e11c47cc4e","sub_title":null,"create":"2019-08-01","update":"2019-08-01","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"ubuntu 设置自定义分辨率","hash":"251c51eb95ac570dd24eeb6f238169de6073674302e9da55ad68b955a65740d0","sub_title":null,"create":"2020-07-02","update":"2020-07-02","author":{"username":"yhw-miracle"},"reader":2,"is_comment":true},{"title":"CentOS7 切换不同更新源","hash":"6ea9ec5b049dbc93a537898e72fdd28a33f7716205bc3222574193ebcdc1100b","sub_title":null,"create":"2021-11-18","update":"2021-11-18","author":{"username":"yhw-miracle"},"reader":2,"is_comment":true},{"title":"showdoc 安装与迁移","hash":"5296fb7855d8ce7db9ed2deffcba61e064f0b498b38452e435455843cf28feff","sub_title":null,"create":"2021-11-18","update":"2021-11-18","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"MySQL 相关设置","hash":"d64b3c10b20f779b1f9a34fa56495e172ea71b37e9c260fb3f039fb0a2b0b333","sub_title":null,"create":"2021-11-18","update":"2021-11-18","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"列表去重并保留原先顺序","hash":"ccf8d0c551a805fb5c9de4c3eddf1baa7c13cd33b3f337c7043f8da6c99c90c6","sub_title":null,"create":"2021-11-24","update":"2021-11-24","author":{"username":"yhw-miracle"},"reader":2,"is_comment":true},{"title":"磁盘扩容","hash":"e4a685980f20b9199ae6289fa1bb74aea0a61eb963729eb9c653e31cb7afebf7","sub_title":null,"create":"2022-02-19","update":"2022-02-19","author":{"username":"yhw-miracle"},"reader":2,"is_comment":true},{"title":"报错 “System limit for number of file watchers reached”","hash":"973fe62230808e3541bbf2d1d92c9714cd2183e145e9fc88fc889d7b1657f214","sub_title":null,"create":"2022-02-21","update":"2022-02-21","author":{"username":"yhw-miracle"},"reader":4,"is_comment":true}]},{"name":"生活感悟","hash":"7d28d32416424a48acf6ea875689026c8470f69db913c6c91a9fdf3fbd400909","articles":[{"title":"人生感悟","hash":"61307657ccd2c968e76bd5161f022f4bb9dd23517dce7af79c3c4316ff97b1b3","sub_title":null,"create":"2017-01-07","update":"2017-01-07","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"鸡汤","hash":"142b5ba4628ce8a16b6df7548d2bf5b3799f3e4f223bc84d041235a27ffbac58","sub_title":null,"create":"2017-03-03","update":"2017-03-03","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"2017 总结","hash":"584ef201c104528b488eae8773b85054d56c86ffbc2e9217f5d596f0fef2fc0e","sub_title":null,"create":"2017-12-30","update":"2017-12-30","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"决不碌碌无为","hash":"a0de301e2d15abe7b82f858ea1f708040d963e67351c360c6bd58479ec7b69dd","sub_title":null,"create":"2018-03-24","update":"2018-03-24","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"中秋快乐","hash":"dad2c2db7579cbaa310794bdc7b5b8aa73b726c77b16048266fec9cf96c31532","sub_title":null,"create":"2018-09-24","update":"2018-09-24","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"内务整理有感","hash":"4ae0d16297ae629030a3e430ce90d3962910ca9a910e560a3f37a5c739c3b814","sub_title":null,"create":"2018-09-30","update":"2018-09-30","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"2018总结","hash":"eb593752326319802b5d4339a02ab87e1dcb43cf24ff3e55791e73249ecf3da2","sub_title":null,"create":"2019-01-01","update":"2019-01-01","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"备份是一个好工具","hash":"ad445a2c57c1c0897dbc57c31a2a07b9b1e92aaebe7ba0fc08568ef44a8a8bde","sub_title":null,"create":"2019-01-11","update":"2019-01-11","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"总结 BeautifulSoup","hash":"666c800c2aa18127d0e5200f709e5c69fc2c49a9ad47f2d705ea752a355645ec","sub_title":null,"create":"2019-01-13","update":"2019-01-13","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"真的被治愈了","hash":"05ecdea6b8be509ec8e635fb50f7c79fb52ddf3ec6e61016efb1687a9712c8ab","sub_title":null,"create":"2020-07-02","update":"2020-07-02","author":{"username":"yhw-miracle"},"reader":2,"is_comment":true}]},{"name":"知识总结","hash":"65149e2223721d58f9ff5853f726a8c394ef5576339a5b6b65aad648ca0dc2ce","articles":[{"title":"Android 按钮点击事件实现","hash":"b92653c33b69aa4b03d6f8789243fc7e62a431bb46a582059739a608adeacd7e","sub_title":null,"create":"2017-09-13","update":"2017-09-13","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"Android 布局","hash":"23295cecd21cfd64f57e6732f574d910f9359a2aeb72c5654730bb4b29c44b2f","sub_title":null,"create":"2017-09-14","update":"2017-09-14","author":{"username":"yhw-miracle"},"reader":2,"is_comment":true},{"title":"Intent 实现页面之间跳转","hash":"ce542e82194be19458e1a88c6bc1ff8d97a232776d58f74fb19dada4baac14ec","sub_title":null,"create":"2017-09-14","update":"2017-09-14","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"JAVA 开发环境安装","hash":"43aa03863e4d1a39661fc6944b698c128eeeae604412e661076ebc0646ec36ce","sub_title":null,"create":"2018-06-25","update":"2018-06-25","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"JAVA 基础之注释、关键字、标识符、数据类型和常量","hash":"02782fa3c8fabf7fc0090b80df8beb16c58eadc7de4a8ebd2ca8472f8b289e76","sub_title":null,"create":"2018-06-26","update":"2018-06-26","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"JAVA 基础之变量","hash":"16665bcb0323c5e9cfbce331c45f41a7d498db7082f9a8465c3a43bfefc81d88","sub_title":null,"create":"2018-06-30","update":"2018-06-30","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"Python 之 IO 编程","hash":"19b5f41b0e8b98b6f2fe3db2131c38d73bbc64a9344159cfeb55ffe1bd9fd940","sub_title":null,"create":"2018-07-30","update":"2018-07-30","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"Python 之进程","hash":"d5481e803c02a7aca6a7e5786a1fbc1ccd06a6846ebc3b408e005c0dc9a04a8c","sub_title":null,"create":"2018-07-31","update":"2018-07-31","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"Python 之多线程","hash":"5866bb2a66ecf886bb0cd9d085a0b773c690d148ad6e36ffb5ffc31c3396a931","sub_title":null,"create":"2018-08-01","update":"2018-08-01","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"协程","hash":"ed97ff22a993cc52d108fbe26d97c2a0a6353315ae69f4d27d407273a28b762c","sub_title":null,"create":"2018-08-02","update":"2018-08-02","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"分布式进程","hash":"c2c695c6631e75c990ce897e3c73aee9df55accb4b3e703004447680e8e9a516","sub_title":null,"create":"2018-08-03","update":"2018-08-03","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"网络编程","hash":"33b458c1145416dc092dda4ea9ca96a3a6d5975ae01a7e15e136c1086ffa703d","sub_title":null,"create":"2018-08-04","update":"2018-08-04","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"学一点 XPath","hash":"bfded87b556188c85172378eb4518f047f6b69fb88452c33d3c2ee8d1188d906","sub_title":null,"create":"2018-08-05","update":"2018-08-05","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"Python 实现 HTTP 请求","hash":"f13530d0feb23c9470656fd14367156ac309c9aaaca689ba0da11654d11d60c4","sub_title":null,"create":"2018-08-06","update":"2018-08-06","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"正则表达式","hash":"6480e3043c6ee88069a16e9e0f98dbf58835f47d8bb34ded5808f12b8a6ef67c","sub_title":null,"create":"2018-08-07","update":"2018-08-07","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"Python 实现正则","hash":"0fbcc0c5b1e2d3859a7e490db2418d03a45e6a172ff18d18b8c7a5d3861bba82","sub_title":null,"create":"2018-08-08","update":"2018-08-08","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"初识 BeautifulSoup","hash":"f8dcea177511cfdd678b49853a9eed4eee0ade081beb56781bd54de6fc2b18d6","sub_title":null,"create":"2018-08-09","update":"2018-08-09","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"考研政治选择题命题人思路","hash":"644ac7cbfb5c2a78311a11456607536eb97c60b4e5f185d35ab677c58890ece5","sub_title":null,"create":"2018-11-09","update":"2018-11-09","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"数据存储为 json 和 csv","hash":"3dd4f58ce2c3444c9e65d892fb86d74c6de1b1036edf6e0f1523ba9784fd1950","sub_title":null,"create":"2019-01-14","update":"2019-01-14","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"提取多媒体文件","hash":"327fde745e53205a8604543d1e4dd40ebaddfc13cde5c949b2eb81d0a8b20411","sub_title":null,"create":"2019-01-14","update":"2019-01-14","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"详解基础爬虫架构","hash":"d9d416d42350a37a71b63d5d2325bd06f418ecd4b832590d25d6473739eaa4ee","sub_title":null,"create":"2019-01-15","update":"2019-01-15","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"Python 实现邮件发送","hash":"372dee48bcd85cb8c3d87dca01b84070d61bc8b44379fe46e642d8b42092149f","sub_title":null,"create":"2019-01-15","update":"2019-01-15","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"learning_python_start","hash":"3326857c04461b86d2a010ed06e6fa394461b975fd2547c4b21cbb621596a0d2","sub_title":null,"create":"2019-04-01","update":"2019-04-01","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"learning_python_list","hash":"75e35d380259c0cd18fd5f6aeb7263db6f94fd17a1164ab91a7c6089edd0f77f","sub_title":null,"create":"2019-04-02","update":"2019-04-02","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"learning_python_tuple&set","hash":"385f944f2bf7d66c6ff4d097b278c2096907ed6fe42f32d6b0030d854ac9b720","sub_title":null,"create":"2019-04-03","update":"2019-04-03","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"learning_python_dict","hash":"f0071940b8c96e6cec1c5e80c59258665232f5547aeff87b3c42762ff4ede27a","sub_title":null,"create":"2019-04-04","update":"2019-04-04","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"learning_python_str_1","hash":"1412db9ffe17e323e564c6a597452d6470a93d39980867076b86c99d3fbdffff","sub_title":null,"create":"2019-04-05","update":"2019-04-05","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"learning_python_str_2","hash":"7ab5b23a22158d4e9903d63092a7d71e249432f1234a71a16ccba4b15a474508","sub_title":null,"create":"2019-04-06","update":"2019-04-06","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"learning_python_function","hash":"167fa77db6534dbbdc2691c0dd038699518b895aebc9d059df58ebb04012e6b6","sub_title":null,"create":"2019-04-07","update":"2019-04-07","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"learning_python_面向对象","hash":"974add8b18ea3d81cdd24b8f1362f73cb8c1916075afcc4dcb7089c5abeb339e","sub_title":null,"create":"2019-04-08","update":"2019-04-08","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"learning_python_引用","hash":"a61296fcb8bf9dbba163417c8ba74f12493e260b6926e34d512886d7f57bef03","sub_title":null,"create":"2019-04-09","update":"2019-04-09","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"learning_python_异常","hash":"ee416d39dba8e3a3df9fd7539962fb4572e8712c0d4320595bdd88c033cdb0ff","sub_title":null,"create":"2019-04-11","update":"2019-04-11","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"learning_python_模块和包","hash":"142c92770f592ab19a182ef18e8ffb14020e37349cb768b83f0e85b24482add1","sub_title":null,"create":"2019-04-12","update":"2019-04-12","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"ubuntu16.04 本地部署 YApi 平台","hash":"d64df1145d90ae1bca3dfe98432e187d3575c6fef79bb6d397e07c49074b5e13","sub_title":null,"create":"2019-07-24","update":"2019-07-24","author":{"username":"yhw-miracle"},"reader":2,"is_comment":true},{"title":"QT 数据类型","hash":"02e6c33c9dd5c850a8af5cacedee6cb343f8e3bfdad0fddd57be21313183295f","sub_title":null,"create":"2021-11-26","update":"2021-11-26","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"QT 容器类","hash":"600a08d87247d1d0ac32f8052d43b5457c64fb622a352ac23329b994acca86c8","sub_title":null,"create":"2021-11-26","update":"2021-11-26","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"QT 容器类的迭代","hash":"8fe94e1580fea922a255e2d7bf5226c57b92fb56a8125dd75e6f23331612e0d6","sub_title":null,"create":"2021-11-26","update":"2021-11-26","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"QT 模块","hash":"d3b10c6a1d4ecca24b29e93b714a83e57ad4c2db1000891376d0683b9a65564b","sub_title":null,"create":"2021-11-26","update":"2021-11-26","author":{"username":"yhw-miracle"},"reader":2,"is_comment":true},{"title":"QString","hash":"44c42138d0984a831e0c1b84eba5a4339871c6bc2170560ded4306e884c5c712","sub_title":null,"create":"2021-11-27","update":"2021-11-27","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"QSpinBox 与 QDOubleSpinBox 的属性","hash":"04863573382c6e610f2b7871cfb65292d613fbb1ba29334574b9b2bf718cdb3c","sub_title":null,"create":"2021-11-27","update":"2021-11-27","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"QSlider QScrollBar Qdial","hash":"02f80b76e979409a82770dfc0ed605725c2b61c5335d7490121f56ea77915736","sub_title":null,"create":"2021-11-27","update":"2021-11-27","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"QDateEdit QTimeEdit","hash":"d7e012b39a551b475a823dacc814ba8440744138f06dc905e753a7ed598a50aa","sub_title":null,"create":"2021-11-28","update":"2021-11-28","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"QComboBox","hash":"1d610e0ab20e5fbf32591b9fd07cd149c80c61010a9e5bbffdefe06778f4224d","sub_title":null,"create":"2021-11-28","update":"2021-11-28","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"QPlainTextEdit","hash":"cbd4226fad52065942bc6888839bb0527ce92157c47881a99834579f881eec60","sub_title":null,"create":"2021-11-28","update":"2021-11-28","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"Model View","hash":"6d1d64e7ecf3169283a65272c165714d818d1359098e620290c7d34467b75db3","sub_title":null,"create":"2021-11-29","update":"2021-11-29","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"QT 事件","hash":"4767070de7562964926437cea497ad5a2ee1b4088008e7c0ec5b8bf5eb7b6614","sub_title":null,"create":"2021-11-30","update":"2021-11-30","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"QT 窗体类","hash":"10048f18a4b00cda21d5adee26e40c14f444983afffb4810bc46c52eb4f7e4b7","sub_title":null,"create":"2021-11-30","update":"2021-11-30","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true}]},{"name":"技术案例","hash":"ae27c6eab905bc8d287ad82270da823028d4bdbba0deeb8cc7942cdbd55702ba","articles":[{"title":"Android 跑马灯效果","hash":"d18fd06de5bb19f3c0919717ceb1bf54d5e436a9f8b905bc7b65d53bdc133cb9","sub_title":null,"create":"2017-09-13","update":"2017-09-13","author":{"username":"yhw-miracle"},"reader":3,"is_comment":true},{"title":"Android 动态自动匹配输入框","hash":"4eec2eaca39c49a25b273f287d6c9b78208c6aa6431400d95d671781f9731b07","sub_title":null,"create":"2017-09-16","update":"2017-09-16","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"字符串与数值之间的转换","hash":"82c9fd9a979cf75a24b79a98aa3f81d5edf826ea0db5b42fcfebc4987fc70582","sub_title":null,"create":"2021-12-01","update":"2021-12-01","author":{"username":"yhw-miracle"},"reader":3,"is_comment":true},{"title":"QString 的常用功能","hash":"c7977fcb1e92d746a1e3e4e785b4c032f2e8fa558d6ba3844e741196f6118377","sub_title":null,"create":"2021-12-02","update":"2021-12-02","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"QSpinBox 与 QDoubleSpinBox 的使用","hash":"e1e488f407b70335b91dca4af03479960c29d68eba9bc8890b3227ea498786a8","sub_title":null,"create":"2021-12-03","update":"2021-12-03","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"QSlider","hash":"ca65ce3eacc94969c87cdbaca44ffc36ff1cd29e4231c94774ac124187b96fc8","sub_title":null,"create":"2021-12-04","update":"2021-12-04","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"QScrollBar","hash":"1d1a9cbd6ef9504257026be403a93f3529f94d45594243953b0f6ad1ed1f85b9","sub_title":null,"create":"2021-12-05","update":"2021-12-05","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"QProgressBar","hash":"5a8408f9489b97ae187a42b7209ac8f0da05e700c73c67836dfa870ea82541e7","sub_title":null,"create":"2021-12-06","update":"2021-12-06","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"QDial 与 QLCDNumber 使用","hash":"36f0a938aa1bfa69dfe45d6f1b31085c8ec61a3b824026d1f5e2ff915be923fd","sub_title":null,"create":"2021-12-07","update":"2021-12-07","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"日期时间","hash":"c7b7c6856d0c994e79e83db768d39c88f8e09f56c04f1595777dd16fb71d996f","sub_title":null,"create":"2021-12-08","update":"2021-12-08","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"日历","hash":"5a044901d20d03b5ca5c87123f084c8403b08064b937f1b8a0ee0bdb4287fe5a","sub_title":null,"create":"2021-12-09","update":"2021-12-09","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"定时器","hash":"433f4907bfc0355f5d83ffa8fb35c5c1f9f5071760204594286ed2850f98ae07","sub_title":null,"create":"2021-12-10","update":"2021-12-10","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"QComboBox 与 QPlainTextEdit","hash":"9ffb95c55f457c59b13eb3830359a9ffb88bc697f86dfba172b1c403a2fca547","sub_title":null,"create":"2021-12-11","update":"2021-12-11","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"QListWidget","hash":"6e44336e6d3176bafe097c03c8b4fa1b4720238d35450c44b72f7e3177370a57","sub_title":null,"create":"2022-01-06","update":"2022-01-06","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"QTreeWidget 和 QDockWidget","hash":"0f2819e64af807ce5f59b7e050f0628a8d1367f03262fe4c3d6f305c15d7258f","sub_title":null,"create":"2022-01-07","update":"2022-01-07","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"QTableWidget","hash":"222137b183bf4820900bce92c86bef9726754fa42ec9e8ca8b6e51bf0c990b90","sub_title":null,"create":"2022-01-08","update":"2022-01-08","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"文件系统 Model 和 View","hash":"7723af9ef08750e22fe429efa017257d2e3b8305ae25767236dee1dc78cb8894","sub_title":null,"create":"2022-01-09","update":"2022-01-09","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"QStringListModel","hash":"1e1ecb1869e43399905dafa495f07c4b3b5ac7a6bdb5320472267237f93022b8","sub_title":null,"create":"2022-01-10","update":"2022-01-10","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"QStandardItmeModel","hash":"51f66c981a1d3c58ea8241382ae5c66ec4c5d6124d153a3de6bfa15410f03679","sub_title":null,"create":"2022-01-11","update":"2022-01-11","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"QT 对话框","hash":"2fd1196d3dbf8bac688fb53fd63c7692b29e7948cdee4263a6ce9e6a68811fd7","sub_title":null,"create":"2022-01-12","update":"2022-01-12","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"QT 自定义对话框","hash":"59ea31a1cc4fa39882f50bf8f28bfb7deb9e3baee93f8cb4058ba0b83e857e5f","sub_title":null,"create":"2022-01-13","update":"2022-01-13","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"QT 多窗口应用程序","hash":"6e99b7fc114b5666f5b65cda619c8dbb9d96650722971aecae1069f303743392","sub_title":null,"create":"2022-01-14","update":"2022-01-14","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"QT MDI 应用程序","hash":"8991356abc17ce79b5091537ad1d9f069e54e4661490b2250e9b07fc95025e05","sub_title":null,"create":"2022-01-15","update":"2022-01-15","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"QT Splash 窗口","hash":"d2c78c2a1b338822d72d948b4113ad8598be906ee481c4b5f481e91856e5dae0","sub_title":null,"create":"2022-01-16","update":"2022-01-16","author":{"username":"yhw-miracle"},"reader":2,"is_comment":true},{"title":"文本文件读写","hash":"6275d91b22c6c250e9817d6be805ecc63de65b36a9b85e1c55cfc7d14624284f","sub_title":null,"create":"2022-01-17","update":"2022-01-17","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"QDataStream 读写文件","hash":"f30123eba9621ea24ccf71909dd3eb6dd06ff0cbfa5f360bd76af9a030263111","sub_title":null,"create":"2022-02-02","update":"2022-02-02","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"目录和文件操作","hash":"c69ca6cfe5ef7406f989f813aff6ecfe6aa8235a0cdd77f0e94e1ce05abaf0ae","sub_title":null,"create":"2022-02-03","update":"2022-02-03","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"QPainter 绘图","hash":"2d51cb21fedd6cb4741ddd8af396a54c432df80d30388640de17969da61eae5b","sub_title":null,"create":"2022-02-05","update":"2022-02-05","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"坐标变换","hash":"02fe3d385d7dabbddcfc77c999c1c15e24a472acbb732d7298d682cd42d95e25","sub_title":null,"create":"2022-02-06","update":"2022-02-06","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"view scene item 基本关系和坐标变换","hash":"5853fec45ce789cb10e5c9c2eb3e4f93e17c94c0aece88ac80bd598dd46fc645","sub_title":null,"create":"2022-02-07","update":"2022-02-07","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"Graphics View 绘图","hash":"8706099c293f75e24cb2d3908adf7a2ca5eb121b0632c52da2117df168de8e72","sub_title":null,"create":"2022-02-08","update":"2022-02-08","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"QChart 简单绘图","hash":"160fa4df466ebd0fbcabe512ce770655d8716c2cded1275b6c3d3841c8e0e7f9","sub_title":null,"create":"2022-02-09","update":"2022-02-09","author":{"username":"yhw-miracle"},"reader":2,"is_comment":true},{"title":"QChart 绘图详细功能","hash":"a308226b7af8bfdc37bb01a7a0d34c57efd0efa4e277c247ee53dce469cf57e3","sub_title":null,"create":"2022-02-10","update":"2022-02-10","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"QSqlTableModel","hash":"8bfe36af0186a42c04140d3b452cb38663b838cfb9caed663b5b92a4e58fea29","sub_title":null,"create":"2022-02-11","update":"2022-02-11","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"自定义 Widget 组件","hash":"79cbc463848e4fab99f453ff94b5d5cb114140a8d100380791d83fdf4daa67e7","sub_title":null,"create":"2022-02-12","update":"2022-02-12","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"多线程 互斥量","hash":"dc73af7547e0b16223b32a02446ace647bed7b2115d8802db1c9b097763632f3","sub_title":null,"create":"2022-02-13","update":"2022-02-13","author":{"username":"yhw-miracle"},"reader":2,"is_comment":true},{"title":"基于 QWaitCondition 的线程同步","hash":"f801ddade1495b72de5d3752c74e796b1e682c62fa215f30457d9aa5e00a8811","sub_title":null,"create":"2022-02-13","update":"2022-02-13","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"基于信号量的线程同步","hash":"6574fb60475b751d80b567fb99c1887e01faf656e3633207e61c18a3690cb303","sub_title":null,"create":"2022-02-13","update":"2022-02-13","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"QHostInfo QNetworkInterface","hash":"13d20a508bb7489bb2c6952f6f4d7801577c33c564c0897a4471360426a049c3","sub_title":null,"create":"2022-02-14","update":"2022-02-14","author":{"username":"yhw-miracle"},"reader":2,"is_comment":true}]},{"name":"技术翻译","hash":"bf150e366be5e70a7cfa84f6109a5d5f58b365800a0105d4246af4102b08239c","articles":[{"title":"数据结构与算法（翻译）","hash":"af2e093886cbd69d1d36c2d191d0f7d30ca9a9b5753ad01aed387e586e005007","sub_title":null,"create":"2017-07-20","update":"2017-07-20","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true}]},{"name":"读书笔记","hash":"5803606484426b93aa2695f0961b35465e25a8cbc3538b09b3f9cfcef854d599","articles":[{"title":"《剧变：人类社会与国家危机的转折点》读书笔记","hash":"2581c164beba7ab738e7d00e603ab7341ba6557805e7182e4cb431f38369f7b5","sub_title":null,"create":"2020-05-10","update":"2020-05-10","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"《你当像鸟飞往你的山》读书笔记","hash":"5534967fda7a8320eef3b021ff620ca717ea43195e54dd74b2fa3dad0c79ecf4","sub_title":null,"create":"2020-05-24","update":"2020-05-24","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"《格局》读书笔记","hash":"c7382f3816d2150e7cba7300092f46a53a1e1c63e4193cca6d64a5bcd2bf5736","sub_title":null,"create":"2020-06-07","update":"2020-06-07","author":{"username":"yhw-miracle"},"reader":2,"is_comment":true},{"title":"《园丁与木匠》读书笔记","hash":"6d753d7b79505c348c67ed4667920c22d8bd4bdf347a49b206504b087d18c51b","sub_title":null,"create":"2020-06-21","update":"2020-06-21","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"《故事力》读书笔记","hash":"2bcba820cb957f905b0fca0d1e25a4c566f0f0eb340ee18df66d03d28fb02f71","sub_title":null,"create":"2020-07-05","update":"2020-07-05","author":{"username":"yhw-miracle"},"reader":3,"is_comment":true},{"title":"《如何阅读一本书》读书笔记","hash":"f747274243178693efee3e32240e3cbd8e6a9725b757218d72c1156660706881","sub_title":null,"create":"2020-07-19","update":"2020-07-19","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true}]}]'),Pe={name:"BlogCategory",data(){return{articles_by_category:[],isShowTop:!1}},methods:{go_anchor(e){let t=0;const n=document.documentElement.scrollTop||window.pageYOffset||document.body.scrollTop;if("number"==typeof e)t=e-n;else{const r=document.querySelector(e)||{offsetTop:0};t=r.offsetTop-n}window.scrollBy({top:t,behavior:"smooth"})},backTop(){const e=this;let t=setInterval((()=>{let n=Math.floor(-e.scrollTop/5);document.documentElement.scrollTop=document.body.scrollTop=e.scrollTop+n,0===e.scrollTop&&clearInterval(t)}))},scrollToTop(){const e=this;let t=window.pageYOffset||document.documentElement.scrollTop||document.body.scrollTop;e.scrollTop=t,e.scrollTop>0?e.isShowTop=!0:e.isShowTop=!1}},mounted(){this.articles_by_category=Me,window.addEventListener("scroll",this.scrollToTop)},unmounted(){window.removeEventListener("scroll",this.scrollToTop)}};const Ae=(0,F.Z)(Pe,[["render",ve],["__scopeId","data-v-63b4e4a7"]]);var Ce=Ae;const De=e=>((0,i.dD)("data-v-6500297c"),e=e(),(0,i.Cn)(),e),Ne={class:"tags_page"},Ee={class:"summary"},Oe=["onClick"],Ve=De((()=>(0,i._)("hr",null,null,-1))),Ge={class:"detail"},Re=["id"],Fe=De((()=>(0,i._)("img",{src:"/images/system/category.svg"},null,-1))),qe=De((()=>(0,i._)("img",{src:"/images/system/arrow_right1.svg"},null,-1))),He=De((()=>(0,i._)("span",null,"---",-1))),ze=De((()=>(0,i._)("hr",null,null,-1)));function Ue(e,t,n,r,a,o){const s=(0,i.up)("router-link");return(0,i.wg)(),(0,i.iD)("div",Ne,[(0,i._)("div",Ee,[((0,i.wg)(!0),(0,i.iD)(i.HY,null,(0,i.Ko)(a.articles_by_tag,((e,t)=>((0,i.wg)(),(0,i.iD)("div",{class:"summary_item",key:t},[(0,i._)("a",{onClick:t=>o.go_anchor("#"+e.name),target:"_self"},(0,h.zw)(e.name)+"("+(0,h.zw)(e.articles.length)+")",9,Oe)])))),128))]),Ve,(0,i._)("div",Ge,[((0,i.wg)(!0),(0,i.iD)(i.HY,null,(0,i.Ko)(a.articles_by_tag,((e,t)=>((0,i.wg)(),(0,i.iD)("div",{class:"tag_info",key:t},[(0,i._)("div",{class:"info",id:e.name},[Fe,(0,i._)("span",null,(0,h.zw)(e.name)+"("+(0,h.zw)(e.articles.length)+")",1)],8,Re),((0,i.wg)(!0),(0,i.iD)(i.HY,null,(0,i.Ko)(e.articles,((e,t)=>((0,i.wg)(),(0,i.iD)("div",{class:"tags_articles",key:t},[qe,(0,i._)("span",null,(0,h.zw)(e.update),1),He,(0,i.Wm)(s,{to:{path:"/detail",query:{id:e.hash}}},{default:(0,i.w5)((()=>[(0,i.Uk)((0,h.zw)(e.title),1)])),_:2},1032,["to"])])))),128)),ze])))),128))]),a.isShowTop?((0,i.wg)(),(0,i.iD)("img",{key:0,src:"/images/system/to_top.svg",class:"go_top",onClick:t[0]||(t[0]=(...e)=>o.backTop&&o.backTop(...e))})):(0,i.kq)("",!0)])}var je=JSON.parse('[{"name":"eclipse","hash":"d496f7fd00a11cbcdbe7281c4bcd00cf5bd1385e96ab76b1ef3aaa2160ad1db9","articles":[{"title":"eclipse启动失败","hash":"dc84dff033ed9373e3ebdee6a5f48496b2402c77dec9c1d49d8b6f8ca42d635a","sub_title":null,"create":"2016-12-25","update":"2016-12-25","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true}]},{"name":"知识垄断","hash":"d96a31563f146215d7833f7764b9630956141fcfbd3c6fe3bbe234db276a68e3","articles":[{"title":"人生感悟","hash":"61307657ccd2c968e76bd5161f022f4bb9dd23517dce7af79c3c4316ff97b1b3","sub_title":null,"create":"2017-01-07","update":"2017-01-07","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true}]},{"name":"鸡汤","hash":"142b5ba4628ce8a16b6df7548d2bf5b3799f3e4f223bc84d041235a27ffbac58","articles":[{"title":"鸡汤","hash":"142b5ba4628ce8a16b6df7548d2bf5b3799f3e4f223bc84d041235a27ffbac58","sub_title":null,"create":"2017-03-03","update":"2017-03-03","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"决不碌碌无为","hash":"a0de301e2d15abe7b82f858ea1f708040d963e67351c360c6bd58479ec7b69dd","sub_title":null,"create":"2018-03-24","update":"2018-03-24","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true}]},{"name":"读书","hash":"e01100ac3669d0d51bb374d05c5617526d7a476ccda1f896f053677a875a3f14","articles":[{"title":"读书使人勤奋","hash":"be65c94d33d8252a6bdd79c9da3cf72345df74df9e5b974e6199b31f6bb3407a","sub_title":null,"create":"2017-03-30","update":"2017-03-30","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true}]},{"name":"MySQL","hash":"421e50f81d03829c794b4382a7ca25bdbc705967f5562cdca3df2e7a7958adda","articles":[{"title":"windows 系统下 MySQL 安装","hash":"9969ffbdb6ab010b16adaf48c13b99d6420dee48cb94103bbd8f1c5fb3aa4031","sub_title":null,"create":"2017-05-27","update":"2017-05-27","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"MySQL 相关设置","hash":"d64b3c10b20f779b1f9a34fa56495e172ea71b37e9c260fb3f039fb0a2b0b333","sub_title":null,"create":"2021-11-18","update":"2021-11-18","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true}]},{"name":"数据结构","hash":"2d7698d03301bdbf9a18171f5d83041bf7d56729da9f8fe0748ea633196fbe80","articles":[{"title":"数据结构与算法（翻译）","hash":"af2e093886cbd69d1d36c2d191d0f7d30ca9a9b5753ad01aed387e586e005007","sub_title":null,"create":"2017-07-20","update":"2017-07-20","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true}]},{"name":"算法","hash":"80e6169e8cd853ff7f6e6c4436e474182440120a24ac5e2d8cc2abf04759860a","articles":[{"title":"数据结构与算法（翻译）","hash":"af2e093886cbd69d1d36c2d191d0f7d30ca9a9b5753ad01aed387e586e005007","sub_title":null,"create":"2017-07-20","update":"2017-07-20","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true}]},{"name":"Android","hash":"a961106e5af1d1f8f0a5f9327f6f96b45e3531ec69bf5bf224bf7f1e30078e44","articles":[{"title":"Android 按钮点击事件实现","hash":"b92653c33b69aa4b03d6f8789243fc7e62a431bb46a582059739a608adeacd7e","sub_title":null,"create":"2017-09-13","update":"2017-09-13","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"Android 跑马灯效果","hash":"d18fd06de5bb19f3c0919717ceb1bf54d5e436a9f8b905bc7b65d53bdc133cb9","sub_title":null,"create":"2017-09-13","update":"2017-09-13","author":{"username":"yhw-miracle"},"reader":3,"is_comment":true},{"title":"Android 布局","hash":"23295cecd21cfd64f57e6732f574d910f9359a2aeb72c5654730bb4b29c44b2f","sub_title":null,"create":"2017-09-14","update":"2017-09-14","author":{"username":"yhw-miracle"},"reader":2,"is_comment":true},{"title":"Intent 实现页面之间跳转","hash":"ce542e82194be19458e1a88c6bc1ff8d97a232776d58f74fb19dada4baac14ec","sub_title":null,"create":"2017-09-14","update":"2017-09-14","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"Android 动态自动匹配输入框","hash":"4eec2eaca39c49a25b273f287d6c9b78208c6aa6431400d95d671781f9731b07","sub_title":null,"create":"2017-09-16","update":"2017-09-16","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true}]},{"name":"按钮事件","hash":"4bcb7fe9a674b0cfd51828131f8c96406de78c15537c46617db15f022cf60b03","articles":[{"title":"Android 按钮点击事件实现","hash":"b92653c33b69aa4b03d6f8789243fc7e62a431bb46a582059739a608adeacd7e","sub_title":null,"create":"2017-09-13","update":"2017-09-13","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true}]},{"name":"跑马灯","hash":"e33b8a0c2129d01194c2280d76fad9ce551ae292d98ba24659fa8a02210d29f9","articles":[{"title":"Android 跑马灯效果","hash":"d18fd06de5bb19f3c0919717ceb1bf54d5e436a9f8b905bc7b65d53bdc133cb9","sub_title":null,"create":"2017-09-13","update":"2017-09-13","author":{"username":"yhw-miracle"},"reader":3,"is_comment":true}]},{"name":"界面布局","hash":"25cb2bf95c76de5a0b62beae7292e69b0e413fcf65175378cc9519e62f61e1a3","articles":[{"title":"Android 布局","hash":"23295cecd21cfd64f57e6732f574d910f9359a2aeb72c5654730bb4b29c44b2f","sub_title":null,"create":"2017-09-14","update":"2017-09-14","author":{"username":"yhw-miracle"},"reader":2,"is_comment":true}]},{"name":"Intent","hash":"f7aef29936a109de11cc5d2279c0a2acb616847378ce28409608f74262e14fa7","articles":[{"title":"Intent 实现页面之间跳转","hash":"ce542e82194be19458e1a88c6bc1ff8d97a232776d58f74fb19dada4baac14ec","sub_title":null,"create":"2017-09-14","update":"2017-09-14","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true}]},{"name":"自动匹配","hash":"fb0d9bdf1a0bb979cd33adf4e21526f8534cadbfd095fc59f00d20d04bc67c82","articles":[{"title":"Android 动态自动匹配输入框","hash":"4eec2eaca39c49a25b273f287d6c9b78208c6aa6431400d95d671781f9731b07","sub_title":null,"create":"2017-09-16","update":"2017-09-16","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true}]},{"name":"总结","hash":"f9f8816bfa27627fafc477c711f599361246dc18e5c660e2b3c9a5265cd03bdb","articles":[{"title":"2017 总结","hash":"584ef201c104528b488eae8773b85054d56c86ffbc2e9217f5d596f0fef2fc0e","sub_title":null,"create":"2017-12-30","update":"2017-12-30","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"2018总结","hash":"eb593752326319802b5d4339a02ab87e1dcb43cf24ff3e55791e73249ecf3da2","sub_title":null,"create":"2019-01-01","update":"2019-01-01","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true}]},{"name":"论文排版","hash":"4dfe6fd4b1caf310186dc884efd1798e8a5a155e9dc4f7abd10a52ff5f8ac7c5","articles":[{"title":"论文排版总结","hash":"1981b1044cb10eecb3efc3fa2a1848ab549394b6cf6c97ecf9d70cf667362a20","sub_title":null,"create":"2018-03-13","update":"2018-03-13","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true}]},{"name":"JAVA","hash":"a3d59202f89044804df84105cb34adf959ea4f4dfb4f427e4b3e5cd42849e10b","articles":[{"title":"JAVA 开发环境安装","hash":"43aa03863e4d1a39661fc6944b698c128eeeae604412e661076ebc0646ec36ce","sub_title":null,"create":"2018-06-25","update":"2018-06-25","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"JAVA 基础之注释、关键字、标识符、数据类型和常量","hash":"02782fa3c8fabf7fc0090b80df8beb16c58eadc7de4a8ebd2ca8472f8b289e76","sub_title":null,"create":"2018-06-26","update":"2018-06-26","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"JAVA 基础之变量","hash":"16665bcb0323c5e9cfbce331c45f41a7d498db7082f9a8465c3a43bfefc81d88","sub_title":null,"create":"2018-06-30","update":"2018-06-30","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true}]},{"name":"JDK","hash":"c9d396fa87d80cd51c8d026e01c75c9fa0a0323e969bbb29dd261ea8e2a1c9dc","articles":[{"title":"JAVA 开发环境安装","hash":"43aa03863e4d1a39661fc6944b698c128eeeae604412e661076ebc0646ec36ce","sub_title":null,"create":"2018-06-25","update":"2018-06-25","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true}]},{"name":"注释","hash":"af8fc908fb35f33bca3f3459c3c5a068d880a20a45d249812d61ac33e6791aba","articles":[{"title":"JAVA 基础之注释、关键字、标识符、数据类型和常量","hash":"02782fa3c8fabf7fc0090b80df8beb16c58eadc7de4a8ebd2ca8472f8b289e76","sub_title":null,"create":"2018-06-26","update":"2018-06-26","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true}]},{"name":"关键字","hash":"3554f68f35c64905ae357b40e401d1a5282b73b8b1973cabf23c33b21bb30c53","articles":[{"title":"JAVA 基础之注释、关键字、标识符、数据类型和常量","hash":"02782fa3c8fabf7fc0090b80df8beb16c58eadc7de4a8ebd2ca8472f8b289e76","sub_title":null,"create":"2018-06-26","update":"2018-06-26","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true}]},{"name":"标识符","hash":"3e57f11b1ab03a67c652c3154576ea027bd45aa8180c8f444e85a1f5bdb3fb20","articles":[{"title":"JAVA 基础之注释、关键字、标识符、数据类型和常量","hash":"02782fa3c8fabf7fc0090b80df8beb16c58eadc7de4a8ebd2ca8472f8b289e76","sub_title":null,"create":"2018-06-26","update":"2018-06-26","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true}]},{"name":"数据类型","hash":"4f57e8fb549066f1b0010c350ef0fde8fb008f6823231bd5195f4a8128fd6d3b","articles":[{"title":"JAVA 基础之注释、关键字、标识符、数据类型和常量","hash":"02782fa3c8fabf7fc0090b80df8beb16c58eadc7de4a8ebd2ca8472f8b289e76","sub_title":null,"create":"2018-06-26","update":"2018-06-26","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true}]},{"name":"常量","hash":"548154b5b9812f7f2649f57493b6b2087d8bb02d35f9deb18d9f42f5c66593bb","articles":[{"title":"JAVA 基础之注释、关键字、标识符、数据类型和常量","hash":"02782fa3c8fabf7fc0090b80df8beb16c58eadc7de4a8ebd2ca8472f8b289e76","sub_title":null,"create":"2018-06-26","update":"2018-06-26","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true}]},{"name":"变量","hash":"28fcdb5099785d0a386e795906bd2c83cb18c1753f2ec569e3935621dc7753b0","articles":[{"title":"JAVA 基础之变量","hash":"16665bcb0323c5e9cfbce331c45f41a7d498db7082f9a8465c3a43bfefc81d88","sub_title":null,"create":"2018-06-30","update":"2018-06-30","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true}]},{"name":"ubuntu","hash":"75914216897b1dfb5e418731d0dce7b2038d8868a8adf70182d4c3ea4889ca48","articles":[{"title":"Ubuntu16.04 系统安装 PyCharm","hash":"a20001dd0b5a81ca59431426fe6b2a5cddf41cc001d8f6a59825b48f49fa16e5","sub_title":null,"create":"2018-07-22","update":"2018-07-22","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"搭建一台可以永久使用的编程机器","hash":"ea153ab03304c254cc019a2f9d330401e8510b1fbab18a3cde57808955f5069b","sub_title":null,"create":"2019-07-03","update":"2019-07-03","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"ubuntu 设置自定义分辨率","hash":"251c51eb95ac570dd24eeb6f238169de6073674302e9da55ad68b955a65740d0","sub_title":null,"create":"2020-07-02","update":"2020-07-02","author":{"username":"yhw-miracle"},"reader":2,"is_comment":true}]},{"name":"PyCharm","hash":"1907ac13e96eadff4fa73ba471d3b63b69ebe7f23db8ff6ee389600e7d4a1bdf","articles":[{"title":"Ubuntu16.04 系统安装 PyCharm","hash":"a20001dd0b5a81ca59431426fe6b2a5cddf41cc001d8f6a59825b48f49fa16e5","sub_title":null,"create":"2018-07-22","update":"2018-07-22","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true}]},{"name":"Python","hash":"1d11bdfb3ad3c6e417fc45653236ffdc25f9d1faf8c28c0fd14a08f1876865b7","articles":[{"title":"Python 之 IO 编程","hash":"19b5f41b0e8b98b6f2fe3db2131c38d73bbc64a9344159cfeb55ffe1bd9fd940","sub_title":null,"create":"2018-07-30","update":"2018-07-30","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"Python 之进程","hash":"d5481e803c02a7aca6a7e5786a1fbc1ccd06a6846ebc3b408e005c0dc9a04a8c","sub_title":null,"create":"2018-07-31","update":"2018-07-31","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"Python 之多线程","hash":"5866bb2a66ecf886bb0cd9d085a0b773c690d148ad6e36ffb5ffc31c3396a931","sub_title":null,"create":"2018-08-01","update":"2018-08-01","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"协程","hash":"ed97ff22a993cc52d108fbe26d97c2a0a6353315ae69f4d27d407273a28b762c","sub_title":null,"create":"2018-08-02","update":"2018-08-02","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"分布式进程","hash":"c2c695c6631e75c990ce897e3c73aee9df55accb4b3e703004447680e8e9a516","sub_title":null,"create":"2018-08-03","update":"2018-08-03","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"网络编程","hash":"33b458c1145416dc092dda4ea9ca96a3a6d5975ae01a7e15e136c1086ffa703d","sub_title":null,"create":"2018-08-04","update":"2018-08-04","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"Python 实现正则","hash":"0fbcc0c5b1e2d3859a7e490db2418d03a45e6a172ff18d18b8c7a5d3861bba82","sub_title":null,"create":"2018-08-08","update":"2018-08-08","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"初识 BeautifulSoup","hash":"f8dcea177511cfdd678b49853a9eed4eee0ade081beb56781bd54de6fc2b18d6","sub_title":null,"create":"2018-08-09","update":"2018-08-09","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"总结 BeautifulSoup","hash":"666c800c2aa18127d0e5200f709e5c69fc2c49a9ad47f2d705ea752a355645ec","sub_title":null,"create":"2019-01-13","update":"2019-01-13","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"详解基础爬虫架构","hash":"d9d416d42350a37a71b63d5d2325bd06f418ecd4b832590d25d6473739eaa4ee","sub_title":null,"create":"2019-01-15","update":"2019-01-15","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"Python 实现邮件发送","hash":"372dee48bcd85cb8c3d87dca01b84070d61bc8b44379fe46e642d8b42092149f","sub_title":null,"create":"2019-01-15","update":"2019-01-15","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"learning_python_start","hash":"3326857c04461b86d2a010ed06e6fa394461b975fd2547c4b21cbb621596a0d2","sub_title":null,"create":"2019-04-01","update":"2019-04-01","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"learning_python_list","hash":"75e35d380259c0cd18fd5f6aeb7263db6f94fd17a1164ab91a7c6089edd0f77f","sub_title":null,"create":"2019-04-02","update":"2019-04-02","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"learning_python_tuple&set","hash":"385f944f2bf7d66c6ff4d097b278c2096907ed6fe42f32d6b0030d854ac9b720","sub_title":null,"create":"2019-04-03","update":"2019-04-03","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"learning_python_dict","hash":"f0071940b8c96e6cec1c5e80c59258665232f5547aeff87b3c42762ff4ede27a","sub_title":null,"create":"2019-04-04","update":"2019-04-04","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"learning_python_str_1","hash":"1412db9ffe17e323e564c6a597452d6470a93d39980867076b86c99d3fbdffff","sub_title":null,"create":"2019-04-05","update":"2019-04-05","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"learning_python_str_2","hash":"7ab5b23a22158d4e9903d63092a7d71e249432f1234a71a16ccba4b15a474508","sub_title":null,"create":"2019-04-06","update":"2019-04-06","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"learning_python_function","hash":"167fa77db6534dbbdc2691c0dd038699518b895aebc9d059df58ebb04012e6b6","sub_title":null,"create":"2019-04-07","update":"2019-04-07","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"learning_python_面向对象","hash":"974add8b18ea3d81cdd24b8f1362f73cb8c1916075afcc4dcb7089c5abeb339e","sub_title":null,"create":"2019-04-08","update":"2019-04-08","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"learning_python_引用","hash":"a61296fcb8bf9dbba163417c8ba74f12493e260b6926e34d512886d7f57bef03","sub_title":null,"create":"2019-04-09","update":"2019-04-09","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"learning_python_异常","hash":"ee416d39dba8e3a3df9fd7539962fb4572e8712c0d4320595bdd88c033cdb0ff","sub_title":null,"create":"2019-04-11","update":"2019-04-11","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"learning_python_模块和包","hash":"142c92770f592ab19a182ef18e8ffb14020e37349cb768b83f0e85b24482add1","sub_title":null,"create":"2019-04-12","update":"2019-04-12","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"linux 系统下安装 Python3 及配置 Python 虚拟环境","hash":"b13fa4a084a48ee3db0498326add6c03c41aea06a0471d8947001ed42b27b9f0","sub_title":null,"create":"2019-07-07","update":"2019-07-07","author":{"username":"yhw-miracle"},"reader":2,"is_comment":true},{"title":"列表去重并保留原先顺序","hash":"ccf8d0c551a805fb5c9de4c3eddf1baa7c13cd33b3f337c7043f8da6c99c90c6","sub_title":null,"create":"2021-11-24","update":"2021-11-24","author":{"username":"yhw-miracle"},"reader":2,"is_comment":true}]},{"name":"IO编程","hash":"b2dc7017c7d929f9cca73af5c4b3f29bf89c3aed3df547086657ab15231fc9e6","articles":[{"title":"Python 之 IO 编程","hash":"19b5f41b0e8b98b6f2fe3db2131c38d73bbc64a9344159cfeb55ffe1bd9fd940","sub_title":null,"create":"2018-07-30","update":"2018-07-30","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true}]},{"name":"进程","hash":"9ed80ae25960bbdf73be51844a49c3a04b1dfae4d3152249756fa9e501a0d54d","articles":[{"title":"Python 之进程","hash":"d5481e803c02a7aca6a7e5786a1fbc1ccd06a6846ebc3b408e005c0dc9a04a8c","sub_title":null,"create":"2018-07-31","update":"2018-07-31","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true}]},{"name":"多线程","hash":"d6179569331d3af887d580780951d5ae461806d0f26d03b85e525fd711d68d53","articles":[{"title":"Python 之多线程","hash":"5866bb2a66ecf886bb0cd9d085a0b773c690d148ad6e36ffb5ffc31c3396a931","sub_title":null,"create":"2018-08-01","update":"2018-08-01","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true}]},{"name":"协程","hash":"ed97ff22a993cc52d108fbe26d97c2a0a6353315ae69f4d27d407273a28b762c","articles":[{"title":"协程","hash":"ed97ff22a993cc52d108fbe26d97c2a0a6353315ae69f4d27d407273a28b762c","sub_title":null,"create":"2018-08-02","update":"2018-08-02","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true}]},{"name":"分布式进程","hash":"c2c695c6631e75c990ce897e3c73aee9df55accb4b3e703004447680e8e9a516","articles":[{"title":"分布式进程","hash":"c2c695c6631e75c990ce897e3c73aee9df55accb4b3e703004447680e8e9a516","sub_title":null,"create":"2018-08-03","update":"2018-08-03","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true}]},{"name":"网络编程","hash":"33b458c1145416dc092dda4ea9ca96a3a6d5975ae01a7e15e136c1086ffa703d","articles":[{"title":"网络编程","hash":"33b458c1145416dc092dda4ea9ca96a3a6d5975ae01a7e15e136c1086ffa703d","sub_title":null,"create":"2018-08-04","update":"2018-08-04","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true}]},{"name":"TCP","hash":"39bc0c960f32d04b868ca4d8c01499d10f16dffbe10e116117175c057e3ebd6c","articles":[{"title":"网络编程","hash":"33b458c1145416dc092dda4ea9ca96a3a6d5975ae01a7e15e136c1086ffa703d","sub_title":null,"create":"2018-08-04","update":"2018-08-04","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true}]},{"name":"UDP","hash":"9914041ff72842e87f33bc77dc12e46721d9a4f20e45cc4e4df7d5c8ae60a31d","articles":[{"title":"网络编程","hash":"33b458c1145416dc092dda4ea9ca96a3a6d5975ae01a7e15e136c1086ffa703d","sub_title":null,"create":"2018-08-04","update":"2018-08-04","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true}]},{"name":"XPath","hash":"e1de8296829a6c0b1f5ddfdd24b12c6bc21be6af0a6f0db1fde477e588b806ec","articles":[{"title":"学一点 XPath","hash":"bfded87b556188c85172378eb4518f047f6b69fb88452c33d3c2ee8d1188d906","sub_title":null,"create":"2018-08-05","update":"2018-08-05","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true}]},{"name":"HTTP","hash":"bc228af96c5f06389b244ad10cc9ed145e2b351ba2c3aa5b8dbfbede8174f987","articles":[{"title":"Python 实现 HTTP 请求","hash":"f13530d0feb23c9470656fd14367156ac309c9aaaca689ba0da11654d11d60c4","sub_title":null,"create":"2018-08-06","update":"2018-08-06","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true}]},{"name":"正则","hash":"4bb7c1cbb2c919338cd05239795289e515ffbacee7f3651dee60746d328f42c8","articles":[{"title":"正则表达式","hash":"6480e3043c6ee88069a16e9e0f98dbf58835f47d8bb34ded5808f12b8a6ef67c","sub_title":null,"create":"2018-08-07","update":"2018-08-07","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"Python 实现正则","hash":"0fbcc0c5b1e2d3859a7e490db2418d03a45e6a172ff18d18b8c7a5d3861bba82","sub_title":null,"create":"2018-08-08","update":"2018-08-08","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true}]},{"name":"BeautifulSoup","hash":"fa968fcc461cb1d82aeb12dbdd9356c5f4ec21bbe3a4c4c65684ee402cbc0958","articles":[{"title":"初识 BeautifulSoup","hash":"f8dcea177511cfdd678b49853a9eed4eee0ade081beb56781bd54de6fc2b18d6","sub_title":null,"create":"2018-08-09","update":"2018-08-09","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"总结 BeautifulSoup","hash":"666c800c2aa18127d0e5200f709e5c69fc2c49a9ad47f2d705ea752a355645ec","sub_title":null,"create":"2019-01-13","update":"2019-01-13","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true}]},{"name":"考研政治","hash":"79f3fee1880ec96cf3f5203ac636362491b22c1f9291220c613157901c0027bf","articles":[{"title":"考研政治选择题命题人思路","hash":"644ac7cbfb5c2a78311a11456607536eb97c60b4e5f185d35ab677c58890ece5","sub_title":null,"create":"2018-11-09","update":"2018-11-09","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true}]},{"name":"备份","hash":"029cce980b2787476b4232e05e14b8384ca47cf82f71ed6e3e7dae12b3775866","articles":[{"title":"备份是一个好工具","hash":"ad445a2c57c1c0897dbc57c31a2a07b9b1e92aaebe7ba0fc08568ef44a8a8bde","sub_title":null,"create":"2019-01-11","update":"2019-01-11","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true}]},{"name":"json","hash":"56f8ada034ee0373404382c6711f352ced3ca551c3e6612d2493eb85e0368813","articles":[{"title":"数据存储为 json 和 csv","hash":"3dd4f58ce2c3444c9e65d892fb86d74c6de1b1036edf6e0f1523ba9784fd1950","sub_title":null,"create":"2019-01-14","update":"2019-01-14","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true}]},{"name":"csv","hash":"0b6100eb11956af345836868c492dfdd79d33a4f24087223c3d114907cb5aaff","articles":[{"title":"数据存储为 json 和 csv","hash":"3dd4f58ce2c3444c9e65d892fb86d74c6de1b1036edf6e0f1523ba9784fd1950","sub_title":null,"create":"2019-01-14","update":"2019-01-14","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true}]},{"name":"多媒体文件","hash":"06b388db0c32595f4dfe3daae59b093b4fc5d281a72007016e632d08449c90eb","articles":[{"title":"提取多媒体文件","hash":"327fde745e53205a8604543d1e4dd40ebaddfc13cde5c949b2eb81d0a8b20411","sub_title":null,"create":"2019-01-14","update":"2019-01-14","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true}]},{"name":"爬虫框架","hash":"28a04a66893c573a6f885a99a35348a464dc496df971d5da87af24ff4c1763e8","articles":[{"title":"详解基础爬虫架构","hash":"d9d416d42350a37a71b63d5d2325bd06f418ecd4b832590d25d6473739eaa4ee","sub_title":null,"create":"2019-01-15","update":"2019-01-15","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true}]},{"name":"邮件发送","hash":"0ea89eac110b473fab982987ab6d66a8255bc5ae229c64515d8ee051f2ef41ff","articles":[{"title":"Python 实现邮件发送","hash":"372dee48bcd85cb8c3d87dca01b84070d61bc8b44379fe46e642d8b42092149f","sub_title":null,"create":"2019-01-15","update":"2019-01-15","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true}]},{"name":"git","hash":"63a9ade0692a11432e0f5e3f51362db305488a9ee2cca60e7ec786cd1c6166f0","articles":[{"title":"搭建本地 git 服务器","hash":"84b79cac3ff4ef7e95d1c3e577d85c4216b98903a60fe86898f8792a557b2535","sub_title":null,"create":"2019-05-01","update":"2019-05-01","author":{"username":"yhw-miracle"},"reader":2,"is_comment":true}]},{"name":"virtualenv","hash":"f7527fa635b03d6c8ed1321df79623a53fafb4e491039cdb376e01d48e1489b0","articles":[{"title":"linux 系统下安装 Python3 及配置 Python 虚拟环境","hash":"b13fa4a084a48ee3db0498326add6c03c41aea06a0471d8947001ed42b27b9f0","sub_title":null,"create":"2019-07-07","update":"2019-07-07","author":{"username":"yhw-miracle"},"reader":2,"is_comment":true}]},{"name":"yapi","hash":"f6e60f9a449fca0acd516c124de217e4dcf13607deba9420d475d0a7b0f6b9ca","articles":[{"title":"ubuntu16.04 本地部署 YApi 平台","hash":"d64df1145d90ae1bca3dfe98432e187d3575c6fef79bb6d397e07c49074b5e13","sub_title":null,"create":"2019-07-24","update":"2019-07-24","author":{"username":"yhw-miracle"},"reader":2,"is_comment":true}]},{"name":"gitbook","hash":"7c5ecfc6fb642678519b5479c2cf4e1029ae7806174c0c535db4964df206d522","articles":[{"title":"利用 gitbook 记录知识","hash":"e1abce7c247261f411cf7800af146c5c9b75c9fa472632f0d87280e11c47cc4e","sub_title":null,"create":"2019-08-01","update":"2019-08-01","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true}]},{"name":"CentOS7","hash":"685bcc353741a2f2e509f61a3a1cd45fc714649d8b986e85735634d84a778980","articles":[{"title":"CentOS7 切换不同更新源","hash":"6ea9ec5b049dbc93a537898e72fdd28a33f7716205bc3222574193ebcdc1100b","sub_title":null,"create":"2021-11-18","update":"2021-11-18","author":{"username":"yhw-miracle"},"reader":2,"is_comment":true}]},{"name":"showdoc","hash":"d937ae7fd10ffafd5dad46ff70b7939a1d1d6530d18c7d7249d7384aa962650a","articles":[{"title":"showdoc 安装与迁移","hash":"5296fb7855d8ce7db9ed2deffcba61e064f0b498b38452e435455843cf28feff","sub_title":null,"create":"2021-11-18","update":"2021-11-18","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true}]},{"name":"QT","hash":"2c4ab2ae33ee469aed147622cc28f0783ee6e55b349b83f977040a56039d6d9d","articles":[{"title":"QT 数据类型","hash":"02e6c33c9dd5c850a8af5cacedee6cb343f8e3bfdad0fddd57be21313183295f","sub_title":null,"create":"2021-11-26","update":"2021-11-26","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"QT 容器类","hash":"600a08d87247d1d0ac32f8052d43b5457c64fb622a352ac23329b994acca86c8","sub_title":null,"create":"2021-11-26","update":"2021-11-26","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"QT 容器类的迭代","hash":"8fe94e1580fea922a255e2d7bf5226c57b92fb56a8125dd75e6f23331612e0d6","sub_title":null,"create":"2021-11-26","update":"2021-11-26","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"QT 模块","hash":"d3b10c6a1d4ecca24b29e93b714a83e57ad4c2db1000891376d0683b9a65564b","sub_title":null,"create":"2021-11-26","update":"2021-11-26","author":{"username":"yhw-miracle"},"reader":2,"is_comment":true},{"title":"QString","hash":"44c42138d0984a831e0c1b84eba5a4339871c6bc2170560ded4306e884c5c712","sub_title":null,"create":"2021-11-27","update":"2021-11-27","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"QSpinBox 与 QDOubleSpinBox 的属性","hash":"04863573382c6e610f2b7871cfb65292d613fbb1ba29334574b9b2bf718cdb3c","sub_title":null,"create":"2021-11-27","update":"2021-11-27","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"QSlider QScrollBar Qdial","hash":"02f80b76e979409a82770dfc0ed605725c2b61c5335d7490121f56ea77915736","sub_title":null,"create":"2021-11-27","update":"2021-11-27","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"QDateEdit QTimeEdit","hash":"d7e012b39a551b475a823dacc814ba8440744138f06dc905e753a7ed598a50aa","sub_title":null,"create":"2021-11-28","update":"2021-11-28","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"QComboBox","hash":"1d610e0ab20e5fbf32591b9fd07cd149c80c61010a9e5bbffdefe06778f4224d","sub_title":null,"create":"2021-11-28","update":"2021-11-28","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"QPlainTextEdit","hash":"cbd4226fad52065942bc6888839bb0527ce92157c47881a99834579f881eec60","sub_title":null,"create":"2021-11-28","update":"2021-11-28","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"Model View","hash":"6d1d64e7ecf3169283a65272c165714d818d1359098e620290c7d34467b75db3","sub_title":null,"create":"2021-11-29","update":"2021-11-29","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"QT 事件","hash":"4767070de7562964926437cea497ad5a2ee1b4088008e7c0ec5b8bf5eb7b6614","sub_title":null,"create":"2021-11-30","update":"2021-11-30","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"QT 窗体类","hash":"10048f18a4b00cda21d5adee26e40c14f444983afffb4810bc46c52eb4f7e4b7","sub_title":null,"create":"2021-11-30","update":"2021-11-30","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"字符串与数值之间的转换","hash":"82c9fd9a979cf75a24b79a98aa3f81d5edf826ea0db5b42fcfebc4987fc70582","sub_title":null,"create":"2021-12-01","update":"2021-12-01","author":{"username":"yhw-miracle"},"reader":3,"is_comment":true},{"title":"QString 的常用功能","hash":"c7977fcb1e92d746a1e3e4e785b4c032f2e8fa558d6ba3844e741196f6118377","sub_title":null,"create":"2021-12-02","update":"2021-12-02","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"QSpinBox 与 QDoubleSpinBox 的使用","hash":"e1e488f407b70335b91dca4af03479960c29d68eba9bc8890b3227ea498786a8","sub_title":null,"create":"2021-12-03","update":"2021-12-03","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"QSlider","hash":"ca65ce3eacc94969c87cdbaca44ffc36ff1cd29e4231c94774ac124187b96fc8","sub_title":null,"create":"2021-12-04","update":"2021-12-04","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"QScrollBar","hash":"1d1a9cbd6ef9504257026be403a93f3529f94d45594243953b0f6ad1ed1f85b9","sub_title":null,"create":"2021-12-05","update":"2021-12-05","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"QProgressBar","hash":"5a8408f9489b97ae187a42b7209ac8f0da05e700c73c67836dfa870ea82541e7","sub_title":null,"create":"2021-12-06","update":"2021-12-06","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"QDial 与 QLCDNumber 使用","hash":"36f0a938aa1bfa69dfe45d6f1b31085c8ec61a3b824026d1f5e2ff915be923fd","sub_title":null,"create":"2021-12-07","update":"2021-12-07","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"日期时间","hash":"c7b7c6856d0c994e79e83db768d39c88f8e09f56c04f1595777dd16fb71d996f","sub_title":null,"create":"2021-12-08","update":"2021-12-08","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"日历","hash":"5a044901d20d03b5ca5c87123f084c8403b08064b937f1b8a0ee0bdb4287fe5a","sub_title":null,"create":"2021-12-09","update":"2021-12-09","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"定时器","hash":"433f4907bfc0355f5d83ffa8fb35c5c1f9f5071760204594286ed2850f98ae07","sub_title":null,"create":"2021-12-10","update":"2021-12-10","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"QComboBox 与 QPlainTextEdit","hash":"9ffb95c55f457c59b13eb3830359a9ffb88bc697f86dfba172b1c403a2fca547","sub_title":null,"create":"2021-12-11","update":"2021-12-11","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"QListWidget","hash":"6e44336e6d3176bafe097c03c8b4fa1b4720238d35450c44b72f7e3177370a57","sub_title":null,"create":"2022-01-06","update":"2022-01-06","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"QTreeWidget 和 QDockWidget","hash":"0f2819e64af807ce5f59b7e050f0628a8d1367f03262fe4c3d6f305c15d7258f","sub_title":null,"create":"2022-01-07","update":"2022-01-07","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"QTableWidget","hash":"222137b183bf4820900bce92c86bef9726754fa42ec9e8ca8b6e51bf0c990b90","sub_title":null,"create":"2022-01-08","update":"2022-01-08","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"文件系统 Model 和 View","hash":"7723af9ef08750e22fe429efa017257d2e3b8305ae25767236dee1dc78cb8894","sub_title":null,"create":"2022-01-09","update":"2022-01-09","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"QStringListModel","hash":"1e1ecb1869e43399905dafa495f07c4b3b5ac7a6bdb5320472267237f93022b8","sub_title":null,"create":"2022-01-10","update":"2022-01-10","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"QStandardItmeModel","hash":"51f66c981a1d3c58ea8241382ae5c66ec4c5d6124d153a3de6bfa15410f03679","sub_title":null,"create":"2022-01-11","update":"2022-01-11","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"QT 对话框","hash":"2fd1196d3dbf8bac688fb53fd63c7692b29e7948cdee4263a6ce9e6a68811fd7","sub_title":null,"create":"2022-01-12","update":"2022-01-12","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"QT 自定义对话框","hash":"59ea31a1cc4fa39882f50bf8f28bfb7deb9e3baee93f8cb4058ba0b83e857e5f","sub_title":null,"create":"2022-01-13","update":"2022-01-13","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"QT 多窗口应用程序","hash":"6e99b7fc114b5666f5b65cda619c8dbb9d96650722971aecae1069f303743392","sub_title":null,"create":"2022-01-14","update":"2022-01-14","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"QT MDI 应用程序","hash":"8991356abc17ce79b5091537ad1d9f069e54e4661490b2250e9b07fc95025e05","sub_title":null,"create":"2022-01-15","update":"2022-01-15","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"QT Splash 窗口","hash":"d2c78c2a1b338822d72d948b4113ad8598be906ee481c4b5f481e91856e5dae0","sub_title":null,"create":"2022-01-16","update":"2022-01-16","author":{"username":"yhw-miracle"},"reader":2,"is_comment":true},{"title":"文本文件读写","hash":"6275d91b22c6c250e9817d6be805ecc63de65b36a9b85e1c55cfc7d14624284f","sub_title":null,"create":"2022-01-17","update":"2022-01-17","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"QDataStream 读写文件","hash":"f30123eba9621ea24ccf71909dd3eb6dd06ff0cbfa5f360bd76af9a030263111","sub_title":null,"create":"2022-02-02","update":"2022-02-02","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"目录和文件操作","hash":"c69ca6cfe5ef7406f989f813aff6ecfe6aa8235a0cdd77f0e94e1ce05abaf0ae","sub_title":null,"create":"2022-02-03","update":"2022-02-03","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"QPainter 绘图","hash":"2d51cb21fedd6cb4741ddd8af396a54c432df80d30388640de17969da61eae5b","sub_title":null,"create":"2022-02-05","update":"2022-02-05","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"坐标变换","hash":"02fe3d385d7dabbddcfc77c999c1c15e24a472acbb732d7298d682cd42d95e25","sub_title":null,"create":"2022-02-06","update":"2022-02-06","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"view scene item 基本关系和坐标变换","hash":"5853fec45ce789cb10e5c9c2eb3e4f93e17c94c0aece88ac80bd598dd46fc645","sub_title":null,"create":"2022-02-07","update":"2022-02-07","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"Graphics View 绘图","hash":"8706099c293f75e24cb2d3908adf7a2ca5eb121b0632c52da2117df168de8e72","sub_title":null,"create":"2022-02-08","update":"2022-02-08","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"QChart 简单绘图","hash":"160fa4df466ebd0fbcabe512ce770655d8716c2cded1275b6c3d3841c8e0e7f9","sub_title":null,"create":"2022-02-09","update":"2022-02-09","author":{"username":"yhw-miracle"},"reader":2,"is_comment":true},{"title":"QChart 绘图详细功能","hash":"a308226b7af8bfdc37bb01a7a0d34c57efd0efa4e277c247ee53dce469cf57e3","sub_title":null,"create":"2022-02-10","update":"2022-02-10","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"QSqlTableModel","hash":"8bfe36af0186a42c04140d3b452cb38663b838cfb9caed663b5b92a4e58fea29","sub_title":null,"create":"2022-02-11","update":"2022-02-11","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"自定义 Widget 组件","hash":"79cbc463848e4fab99f453ff94b5d5cb114140a8d100380791d83fdf4daa67e7","sub_title":null,"create":"2022-02-12","update":"2022-02-12","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"多线程 互斥量","hash":"dc73af7547e0b16223b32a02446ace647bed7b2115d8802db1c9b097763632f3","sub_title":null,"create":"2022-02-13","update":"2022-02-13","author":{"username":"yhw-miracle"},"reader":2,"is_comment":true},{"title":"基于 QWaitCondition 的线程同步","hash":"f801ddade1495b72de5d3752c74e796b1e682c62fa215f30457d9aa5e00a8811","sub_title":null,"create":"2022-02-13","update":"2022-02-13","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"基于信号量的线程同步","hash":"6574fb60475b751d80b567fb99c1887e01faf656e3633207e61c18a3690cb303","sub_title":null,"create":"2022-02-13","update":"2022-02-13","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"QHostInfo QNetworkInterface","hash":"13d20a508bb7489bb2c6952f6f4d7801577c33c564c0897a4471360426a049c3","sub_title":null,"create":"2022-02-14","update":"2022-02-14","author":{"username":"yhw-miracle"},"reader":2,"is_comment":true}]},{"name":"linux","hash":"d73cbc4fdf0d63a536d02fd50e4880d1a9b76cf457aa4bf042ea89375148c2fa","articles":[{"title":"磁盘扩容","hash":"e4a685980f20b9199ae6289fa1bb74aea0a61eb963729eb9c653e31cb7afebf7","sub_title":null,"create":"2022-02-19","update":"2022-02-19","author":{"username":"yhw-miracle"},"reader":2,"is_comment":true},{"title":"报错 “System limit for number of file watchers reached”","hash":"973fe62230808e3541bbf2d1d92c9714cd2183e145e9fc88fc889d7b1657f214","sub_title":null,"create":"2022-02-21","update":"2022-02-21","author":{"username":"yhw-miracle"},"reader":4,"is_comment":true}]}]'),Je={name:"BlogContentTag",data(){return{articles_by_tag:[],isShowTop:!1}},methods:{go_anchor(e){let t=0;const n=document.documentElement.scrollTop||window.pageYOffset||document.body.scrollTop;if("number"==typeof e)t=e-n;else{const r=document.querySelector(e)||{offsetTop:0};t=r.offsetTop-n}window.scrollBy({top:t,behavior:"smooth"})},backTop(){const e=this;let t=setInterval((()=>{let n=Math.floor(-e.scrollTop/5);document.documentElement.scrollTop=document.body.scrollTop=e.scrollTop+n,0===e.scrollTop&&clearInterval(t)}))},scrollToTop(){const e=this;let t=window.pageYOffset||document.documentElement.scrollTop||document.body.scrollTop;e.scrollTop=t,e.scrollTop>0?e.isShowTop=!0:e.isShowTop=!1}},mounted(){this.articles_by_tag=je,window.addEventListener("scroll",this.scrollToTop)},unmounted(){window.removeEventListener("scroll",this.scrollToTop)}};const Ke=(0,F.Z)(Je,[["render",Ue],["__scopeId","data-v-6500297c"]]);var Ye=Ke;const Xe=e=>((0,i.dD)("data-v-61a26054"),e=e(),(0,i.Cn)(),e),Ze={class:"readed"},$e=Xe((()=>(0,i._)("img",{src:"/images/system/arrow_right1.svg"},null,-1))),et=Xe((()=>(0,i._)("span",null,"---",-1)));function tt(e,t,n,r,a,o){const s=(0,i.up)("router-link");return(0,i.wg)(),(0,i.iD)("div",Ze,[((0,i.wg)(!0),(0,i.iD)(i.HY,null,(0,i.Ko)(a.readed_books,((e,t)=>((0,i.wg)(),(0,i.iD)("div",{class:"notes",key:t},[$e,(0,i._)("span",null,(0,h.zw)(e.update),1),et,(0,i.Wm)(s,{to:{path:"/detail",query:{id:e.hash}}},{default:(0,i.w5)((()=>[(0,i.Uk)((0,h.zw)(e.title),1)])),_:2},1032,["to"])])))),128))])}var nt=JSON.parse('[{"title":"《如何阅读一本书》读书笔记","hash":"f747274243178693efee3e32240e3cbd8e6a9725b757218d72c1156660706881","sub_title":null,"create":"2020-07-19","update":"2020-07-19","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"《故事力》读书笔记","hash":"2bcba820cb957f905b0fca0d1e25a4c566f0f0eb340ee18df66d03d28fb02f71","sub_title":null,"create":"2020-07-05","update":"2020-07-05","author":{"username":"yhw-miracle"},"reader":3,"is_comment":true},{"title":"《园丁与木匠》读书笔记","hash":"6d753d7b79505c348c67ed4667920c22d8bd4bdf347a49b206504b087d18c51b","sub_title":null,"create":"2020-06-21","update":"2020-06-21","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"《格局》读书笔记","hash":"c7382f3816d2150e7cba7300092f46a53a1e1c63e4193cca6d64a5bcd2bf5736","sub_title":null,"create":"2020-06-07","update":"2020-06-07","author":{"username":"yhw-miracle"},"reader":2,"is_comment":true},{"title":"《你当像鸟飞往你的山》读书笔记","hash":"5534967fda7a8320eef3b021ff620ca717ea43195e54dd74b2fa3dad0c79ecf4","sub_title":null,"create":"2020-05-24","update":"2020-05-24","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true},{"title":"《剧变：人类社会与国家危机的转折点》读书笔记","hash":"2581c164beba7ab738e7d00e603ab7341ba6557805e7182e4cb431f38369f7b5","sub_title":null,"create":"2020-05-10","update":"2020-05-10","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true}]'),rt={name:"ReadedBook",data(){return{readed_books:[]}},mounted(){this.readed_books=nt}};const it=(0,F.Z)(rt,[["render",tt],["__scopeId","data-v-61a26054"]]);var at=it;const ot=e=>((0,i.dD)("data-v-65c101dd"),e=e(),(0,i.Cn)(),e),st={class:"detail"},dt={key:0,class:"article"},ct={class:"detail_title"},lt=ot((()=>(0,i._)("img",{src:"/images/system/article.svg"},null,-1))),ut={class:"detail_author"},ht=ot((()=>(0,i._)("img",{src:"/images/system/author.svg"},null,-1))),mt=ot((()=>(0,i._)("hr",null,null,-1))),bt={class:"detail_content"},gt=ot((()=>(0,i._)("hr",null,null,-1))),ft={class:"detail_category"},pt=ot((()=>(0,i._)("img",{src:"/images/system/category.svg"},null,-1))),wt=ot((()=>(0,i._)("span",null,"分类:",-1))),yt={class:"category_item"},Qt={class:"detail_tags"},xt=ot((()=>(0,i._)("img",{src:"/images/system/tag.svg"},null,-1))),_t=ot((()=>(0,i._)("span",null,"标签:",-1))),Bt={class:"detail_create_time"},Tt=ot((()=>(0,i._)("img",{src:"/images/system/publication.svg"},null,-1))),St={class:"detail_update_time"},Lt=ot((()=>(0,i._)("img",{src:"/images/system/publication.svg"},null,-1))),It=ot((()=>(0,i._)("div",{class:"comment"},null,-1)));function Wt(e,t,n,r,a,o){const s=(0,i.up)("BlogEditorView");return(0,i.wg)(),(0,i.iD)("div",st,[a.article?((0,i.wg)(),(0,i.iD)("div",dt,[(0,i._)("div",ct,[lt,(0,i._)("p",null,(0,h.zw)(a.article.title),1)]),(0,i._)("div",ut,[ht,(0,i._)("span",null,"作者:"+(0,h.zw)(a.article.author.username),1)]),mt,(0,i._)("div",bt,[(0,i.Wm)(s,{editorViewValue:a.article.content},null,8,["editorViewValue"])]),gt,(0,i._)("div",ft,[pt,wt,(0,i._)("p",yt,(0,h.zw)(a.article.category.name),1)]),(0,i._)("div",Qt,[xt,_t,((0,i.wg)(!0),(0,i.iD)(i.HY,null,(0,i.Ko)(a.article.tags,((e,t)=>((0,i.wg)(),(0,i.iD)("p",{class:"tag_item",key:t},(0,h.zw)(e.name),1)))),128))]),(0,i._)("div",Bt,[Tt,(0,i._)("span",null,"首次发表:"+(0,h.zw)(a.article.create),1)]),(0,i._)("div",St,[Lt,(0,i._)("span",null,"更新时间:"+(0,h.zw)(a.article.update),1)])])):(0,i.kq)("",!0),It,a.isShowTop?((0,i.wg)(),(0,i.iD)("img",{key:1,src:"/images/system/to_top.svg",class:"go_top",onClick:t[0]||(t[0]=(...e)=>o.backTop&&o.backTop(...e))})):(0,i.kq)("",!0)])}var kt=JSON.parse('{"973fe62230808e3541bbf2d1d92c9714cd2183e145e9fc88fc889d7b1657f214":{"title":"报错 “System limit for number of file watchers reached”","hash":"973fe62230808e3541bbf2d1d92c9714cd2183e145e9fc88fc889d7b1657f214","sub_title":null,"category":{"name":"问题解决"},"tags":[{"name":"linux"}],"create":"2022-02-21","update":"2022-02-21","content":"\\r\\n* 报错描述\\r\\n```text\\r\\nENOSPC: System limit for number of file watchers reached, watch \'/data/react_workspace/demo01/public/index.html\'\\r\\n```\\r\\n\\r\\n报错内容是：文件监视程序的系统产生了限制，达到了默认的上限，需要增加限额。\\r\\n\\r\\n* 解决\\r\\n\\r\\n```bash\\r\\ncat /proc/sys/fs/inotify/max_user_watch\\r\\nsysctl fs.inotify.max_user_watches = 50000\\r\\nsysctl -p\\r\\necho fs.inotify.max_user_watches = 50000 | tee -a /etc/sysctl.conf\\r\\nsysctl -p\\r\\n```","author":{"username":"yhw-miracle"},"reader":4,"is_comment":true,"comments":[]},"e4a685980f20b9199ae6289fa1bb74aea0a61eb963729eb9c653e31cb7afebf7":{"title":"磁盘扩容","hash":"e4a685980f20b9199ae6289fa1bb74aea0a61eb963729eb9c653e31cb7afebf7","sub_title":null,"category":{"name":"问题解决"},"tags":[{"name":"linux"}],"create":"2022-02-19","update":"2022-02-19","content":"### 磁盘扩容\\r\\n\\r\\n* 磁盘自定义分区\\r\\n\\t* 先删除分区，再新建一个空间比之前大的分区。不能新建空间比之前小的分区，否则数据会损失。\\r\\n\\t* 重启\\r\\n\\t* resize2fs /dev/sda2\\r\\n\\r\\n* LVM\\r\\n\\r\\n```bash\\r\\n# 增大或减小至20G\\r\\nlvextend -L 20G /dev/mapper/ubuntu--vg-ubuntu--lv\\r\\n\\r\\n# 增加10G\\r\\nlvextend -L +10G /dev/mapper/ubuntu--vg-ubuntu--lv\\r\\n\\r\\n# 减小10G\\r\\nlvreduce -L -10G /dev/mapper/ubuntu--vg-ubuntu--lv\\r\\n\\r\\n# 按百分比扩容\\r\\nlvresize -l +100%FREE /dev/mapper/ubuntu--vg-ubuntu--lv\\r\\n\\r\\n# 执行调整\\r\\nresize2fs /dev/mapper/ubuntu--vg-ubuntu--lv\\r\\n```\\r\\n","author":{"username":"yhw-miracle"},"reader":2,"is_comment":true,"comments":[]},"13d20a508bb7489bb2c6952f6f4d7801577c33c564c0897a4471360426a049c3":{"title":"QHostInfo QNetworkInterface","hash":"13d20a508bb7489bb2c6952f6f4d7801577c33c564c0897a4471360426a049c3","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2022-02-14","update":"2022-02-14","content":"\\r\\n```c++\\r\\n#if _MSC_VER >= 1600\\r\\n#pragma execution_character_set(\\"utf-8\\")\\r\\n#endif\\r\\n\\r\\n#include \\"mainwindow37.h\\"\\r\\n\\r\\nMainWindow37::MainWindow37(QString title, QWidget *parent) : QMainWindow(parent)\\r\\n{\\r\\n    this->toolBox1 = new QToolBox();\\r\\n    QWidget *w1 = new QWidget();\\r\\n    this->toolBox1->addItem(w1, \\"QHostInfo\\");\\r\\n    QWidget *w2 = new QWidget();\\r\\n    this->toolBox1->addItem(w2, \\"QNetworkInterface\\");\\r\\n\\r\\n    this->plainTextEdit1 = new QPlainTextEdit();\\r\\n\\r\\n    QSplitter *splitter = new QSplitter();\\r\\n    splitter->addWidget(this->toolBox1);\\r\\n    splitter->addWidget(this->plainTextEdit1);\\r\\n\\r\\n    this->setCentralWidget(splitter);\\r\\n\\r\\n    QPushButton *button1 = new QPushButton();\\r\\n    button1->setText(\\"localHostName\\");\\r\\n    QPushButton *button2 = new QPushButton();\\r\\n    button2->setText(\\"localDomainName\\");\\r\\n    QPushButton *button3 = new QPushButton();\\r\\n    button3->setText(\\"addresses\\");\\r\\n    QPushButton *button4 = new QPushButton();\\r\\n    button4->setText(\\"查询IP地址\\");\\r\\n\\r\\n    this->connect(button1, SIGNAL(clicked()), this,SLOT(button1_clicked()));\\r\\n    this->connect(button2, SIGNAL(clicked()), this,SLOT(button2_clicked()));\\r\\n    this->connect(button3, SIGNAL(clicked()), this,SLOT(button3_clicked()));\\r\\n    this->connect(button4, SIGNAL(clicked()), this,SLOT(button4_clicked()));\\r\\n\\r\\n    QGridLayout *layout1 = new QGridLayout();\\r\\n    layout1->addWidget(button1, 0, 0);\\r\\n    layout1->addWidget(button2, 0, 1);\\r\\n    layout1->addWidget(button3, 1, 0);\\r\\n    layout1->addWidget(button4, 1, 1);\\r\\n    w1->setLayout(layout1);\\r\\n\\r\\n    QPushButton *button5= new QPushButton();\\r\\n    button5->setText(\\"allAddresses\\");\\r\\n    QPushButton *button6= new QPushButton();\\r\\n    button6->setText(\\"allInterfaces\\");\\r\\n\\r\\n    QGridLayout *layout2 = new QGridLayout();\\r\\n    layout2->addWidget(button5, 0, 0);\\r\\n    layout2->addWidget(button6, 0, 1);\\r\\n    w2->setLayout(layout2);\\r\\n\\r\\n    this->connect(button5, SIGNAL(clicked()), this,SLOT(button5_clicked()));\\r\\n    this->connect(button6, SIGNAL(clicked()), this,SLOT(button6_clicked()));\\r\\n}\\r\\n\\r\\nvoid MainWindow37::button1_clicked()\\r\\n{\\r\\n    this->plainTextEdit1->appendPlainText(\\"本机主机名:\\" + QHostInfo::localHostName());\\r\\n}\\r\\n\\r\\nvoid MainWindow37::button2_clicked()\\r\\n{\\r\\n    this->plainTextEdit1->appendPlainText(\\"本机DNS域名:\\" + QHostInfo::localDomainName());\\r\\n}\\r\\n\\r\\nvoid MainWindow37::button3_clicked()\\r\\n{\\r\\n    QHostInfo hostInfo = QHostInfo::fromName(QHostInfo::localHostName());\\r\\n    QList<QHostAddress> addresses = hostInfo.addresses();\\r\\n    if(!addresses.empty())\\r\\n    {\\r\\n        foreach(QHostAddress address, addresses)\\r\\n        {\\r\\n            if(address.protocol() == QAbstractSocket::IPv4Protocol)\\r\\n            {\\r\\n                this->plainTextEdit1->appendPlainText(\\"协议: IPv4Protocol\\");\\r\\n            }\\r\\n            else if(address.protocol() == QAbstractSocket::IPv6Protocol)\\r\\n            {\\r\\n                this->plainTextEdit1->appendPlainText(\\"协议: IPv6Protocol\\");\\r\\n            }\\r\\n            else if(address.protocol() == QAbstractSocket::AnyIPProtocol)\\r\\n            {\\r\\n                this->plainTextEdit1->appendPlainText(\\"协议: AnyIPProtocol\\");\\r\\n            }\\r\\n            else\\r\\n            {\\r\\n                this->plainTextEdit1->appendPlainText(\\"协议: unknown\\");\\r\\n            }\\r\\n\\r\\n            this->plainTextEdit1->appendPlainText(\\"本机IP地址:\\" + address.toString());\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nvoid MainWindow37::button4_clicked()\\r\\n{\\r\\n    this->plainTextEdit1->appendPlainText(\\"正在查询 www.aliyun.com 的 IP地址:\\");\\r\\n    QHostInfo::lookupHost(\\"www.aliyun.com\\", this, SLOT(lookupHostInfo(const QHostInfo&)));\\r\\n}\\r\\n\\r\\nvoid MainWindow37::lookupHostInfo(const QHostInfo &host)\\r\\n{\\r\\n    QList<QHostAddress> addresses = host.addresses();\\r\\n    if(!addresses.empty())\\r\\n    {\\r\\n        foreach(QHostAddress address, addresses)\\r\\n        {\\r\\n            if(address.protocol() == QAbstractSocket::IPv4Protocol)\\r\\n            {\\r\\n                this->plainTextEdit1->appendPlainText(\\"协议: IPv4Protocol\\");\\r\\n            }\\r\\n            else if(address.protocol() == QAbstractSocket::IPv6Protocol)\\r\\n            {\\r\\n                this->plainTextEdit1->appendPlainText(\\"协议: IPv6Protocol\\");\\r\\n            }\\r\\n            else if(address.protocol() == QAbstractSocket::AnyIPProtocol)\\r\\n            {\\r\\n                this->plainTextEdit1->appendPlainText(\\"协议: AnyIPProtocol\\");\\r\\n            }\\r\\n            else\\r\\n            {\\r\\n                this->plainTextEdit1->appendPlainText(\\"协议: unknown\\");\\r\\n            }\\r\\n\\r\\n            this->plainTextEdit1->appendPlainText(\\"本机IP地址:\\" + address.toString());\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nvoid MainWindow37::button5_clicked()\\r\\n{\\r\\n    QList<QHostAddress> addresses = QNetworkInterface::allAddresses();\\r\\n    if(!addresses.empty())\\r\\n    {\\r\\n        foreach(QHostAddress address, addresses)\\r\\n        {\\r\\n            if(address.protocol() == QAbstractSocket::IPv4Protocol)\\r\\n            {\\r\\n                this->plainTextEdit1->appendPlainText(\\"协议: IPv4Protocol\\");\\r\\n            }\\r\\n            else if(address.protocol() == QAbstractSocket::IPv6Protocol)\\r\\n            {\\r\\n                this->plainTextEdit1->appendPlainText(\\"协议: IPv6Protocol\\");\\r\\n            }\\r\\n            else if(address.protocol() == QAbstractSocket::AnyIPProtocol)\\r\\n            {\\r\\n                this->plainTextEdit1->appendPlainText(\\"协议: AnyIPProtocol\\");\\r\\n            }\\r\\n            else\\r\\n            {\\r\\n                this->plainTextEdit1->appendPlainText(\\"协议: unknown\\");\\r\\n            }\\r\\n\\r\\n            this->plainTextEdit1->appendPlainText(\\"本机IP地址:\\" + address.toString());\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nvoid MainWindow37::button6_clicked()\\r\\n{\\r\\n    QList<QNetworkInterface> interfaces = QNetworkInterface::allInterfaces();\\r\\n    foreach(QNetworkInterface interface, interfaces)\\r\\n    {\\r\\n        if(interface.isValid())\\r\\n        {\\r\\n            this->plainTextEdit1->appendPlainText(\\"设备名称:\\" + interface.humanReadableName());\\r\\n            this->plainTextEdit1->appendPlainText(\\"硬件地址:\\" + interface.hardwareAddress());\\r\\n\\r\\n            QList<QNetworkAddressEntry> entryList = interface.addressEntries();\\r\\n            foreach(QNetworkAddressEntry entery, entryList)\\r\\n            {\\r\\n                this->plainTextEdit1->appendPlainText(\\"IP 地址:\\" + entery.ip().toString());\\r\\n                this->plainTextEdit1->appendPlainText(\\"子网掩码:\\" + entery.netmask().toString());\\r\\n                this->plainTextEdit1->appendPlainText(\\"广播地址:\\" + entery.broadcast().toString());\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n```","author":{"username":"yhw-miracle"},"reader":2,"is_comment":true,"comments":[]},"dc73af7547e0b16223b32a02446ace647bed7b2115d8802db1c9b097763632f3":{"title":"多线程 互斥量","hash":"dc73af7547e0b16223b32a02446ace647bed7b2115d8802db1c9b097763632f3","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2022-02-13","update":"2022-02-13","content":"\\r\\n```c++\\r\\n#if _MSC_VER >= 1600\\r\\n#pragma execution_character_set(\\"utf-8\\")\\r\\n#endif\\r\\n\\r\\n#include \\"mainwindow34.h\\"\\r\\n\\r\\nMainWindow34::MainWindow34(QString title, QWidget *parent) : QMainWindow(parent)\\r\\n{\\r\\n    this->setWindowTitle(title);\\r\\n    QFont font;\\r\\n    font.setFamily(\\"Hack\\");\\r\\n    font.setPixelSize(12);\\r\\n    this->setFont(font);\\r\\n\\r\\n    this->groupBox1 = new QGroupBox();\\r\\n\\r\\n    QHBoxLayout *layout1 = new QHBoxLayout();\\r\\n    this->startThreadButton = new QPushButton();\\r\\n    this->startThreadButton->setText(\\"启动线程\\");\\r\\n    this->startDiceButton = new QPushButton();\\r\\n    this->startDiceButton->setText(\\"开始\\");\\r\\n    this->pauseDiceButton = new QPushButton();\\r\\n    this->pauseDiceButton->setText(\\"暂停\\");\\r\\n    this->endTheadButton = new QPushButton();\\r\\n    this->endTheadButton->setText(\\"结束线程\\");\\r\\n    this->clearTextButton = new QPushButton();\\r\\n    this->clearTextButton->setText(\\"清空\\");\\r\\n    layout1->addWidget(this->startThreadButton);\\r\\n    layout1->addWidget(this->startDiceButton);\\r\\n    layout1->addWidget(this->pauseDiceButton);\\r\\n    layout1->addWidget(this->endTheadButton);\\r\\n    layout1->addWidget(this->clearTextButton);\\r\\n\\r\\n    this->plainTextEdit = new QPlainTextEdit();\\r\\n    this->chartView = new QChartView();\\r\\n\\r\\n    QSplitter *splitter = new QSplitter();\\r\\n    splitter->setOrientation(Qt::Horizontal);\\r\\n    splitter->addWidget(this->plainTextEdit);\\r\\n    splitter->addWidget(this->chartView);\\r\\n\\r\\n    QWidget *w = new QWidget();\\r\\n    QVBoxLayout *layout3 = new QVBoxLayout();\\r\\n    layout3->addLayout(layout1);\\r\\n    layout3->addWidget(splitter);\\r\\n    w->setLayout(layout3);\\r\\n    this->setCentralWidget(w);\\r\\n\\r\\n    this->statusBar1 = new QStatusBar();\\r\\n    this->label = new QLabel();\\r\\n    this->statusBar1->addWidget(this->label);\\r\\n    this->setStatusBar(this->statusBar1);\\r\\n\\r\\n    this->connect(&this->diceThread1, SIGNAL(started()), this, SLOT(diceThread_started()));\\r\\n    this->connect(&this->diceThread1, SIGNAL(finished()), this, SLOT(diceThread_finished()));\\r\\n    this->connect(&this->diceThread1, SIGNAL(newValue(int, int)), this, SLOT(diceThread_newValue(int, int)));\\r\\n\\r\\n    this->connect(&this->timer1, SIGNAL(timeout()), this, SLOT(timer1_timeout()));\\r\\n\\r\\n    this->connect(this->startThreadButton, SIGNAL(clicked()), this, SLOT(startThreadButton_clicked()));\\r\\n    this->connect(this->startDiceButton, SIGNAL(clicked()), this, SLOT(startDiceButton_clicked()));\\r\\n    this->connect(this->pauseDiceButton, SIGNAL(clicked()), this, SLOT(pauseDiceButton_clicked()));\\r\\n    this->connect(this->endTheadButton, SIGNAL(clicked()), this, SLOT(endTheadButton_clicked()));\\r\\n    this->connect(this->clearTextButton, SIGNAL(clicked()), this, SLOT(clearTextButton_clicked()));\\r\\n\\r\\n    this->historyDiceValue[1] = 0;\\r\\n    this->historyDiceValue[2] = 0;\\r\\n    this->historyDiceValue[3] = 0;\\r\\n    this->historyDiceValue[4] = 0;\\r\\n    this->historyDiceValue[5] = 0;\\r\\n    this->historyDiceValue[6] = 0;\\r\\n\\r\\n}\\r\\n\\r\\nvoid MainWindow34::diceThread_started()\\r\\n{\\r\\n    this->label->setText(\\"started.\\");\\r\\n}\\r\\n\\r\\nvoid MainWindow34::diceThread_finished()\\r\\n{\\r\\n    this->label->setText(\\"finished.\\");\\r\\n}\\r\\n\\r\\nvoid MainWindow34::diceThread_newValue(int count, int diceValue)\\r\\n{\\r\\n    this->plainTextEdit->appendPlainText(QString(\\"第 %1 次掷骰子，点数为 %2.\\").arg(count).arg(diceValue));\\r\\n    this->historyDiceValue[diceValue] ++;\\r\\n}\\r\\n\\r\\nvoid MainWindow34::timer1_timeout()\\r\\n{\\r\\n    int tempCount = 0;\\r\\n    int tempDiceValue = 0;\\r\\n\\r\\n    bool result = this->diceThread1.getDiceValue(&tempCount, &tempDiceValue);\\r\\n    if(result && this->count != tempCount)\\r\\n    {\\r\\n        this->count = tempCount;\\r\\n        this->diceValue = tempDiceValue;\\r\\n        this->plainTextEdit->appendPlainText(QString(\\"第 %1 次掷骰子，点数为 %2.\\").arg(this->count).arg(this->diceValue));\\r\\n        this->historyDiceValue[tempDiceValue] ++;\\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\nvoid MainWindow34::buildPieChart()\\r\\n{\\r\\n    QChart *chart = this->chartView->chart();\\r\\n    chart->removeAllSeries();\\r\\n\\r\\n    QPieSeries *pieSeries = new QPieSeries();\\r\\n    // 饼图中间空心大小\\r\\n    pieSeries->setHoleSize(0);\\r\\n    // 添加分块数据\\r\\n    pieSeries->append(\\"1\\", this->historyDiceValue[1]);\\r\\n    pieSeries->append(\\"2\\", this->historyDiceValue[2]);\\r\\n    pieSeries->append(\\"3\\", this->historyDiceValue[3]);\\r\\n    pieSeries->append(\\"4\\", this->historyDiceValue[4]);\\r\\n    pieSeries->append(\\"5\\", this->historyDiceValue[5]);\\r\\n    pieSeries->append(\\"6\\", this->historyDiceValue[6]);\\r\\n\\r\\n    QPieSlice *slice;\\r\\n    // 饼图分块文字\\r\\n    for(int i=0; i<6; i++)\\r\\n    {\\r\\n        slice = pieSeries->slices().at(i);\\r\\n        slice->setLabel(slice->label() + QString(\\": %1 次,占 %2%\\").arg(slice->value()).arg(slice->percentage() * 100));\\r\\n        this->connect(slice, SIGNAL(hovered(bool)), this, SLOT(pieSlice_hovered(bool)));\\r\\n    }\\r\\n\\r\\n    slice->setExploded(true);\\r\\n    pieSeries->setLabelsVisible(true);\\r\\n    chart->addSeries(pieSeries);\\r\\n    chart->setTitle(\\"骰子统计结果\\");\\r\\n    chart->legend()->setVisible(false);\\r\\n//    chart->legend()->setAlignment(Qt::AlignBottom);\\r\\n}\\r\\n\\r\\nvoid MainWindow34::pieSlice_hovered(bool show)\\r\\n{\\r\\n    QPieSlice *slice = (QPieSlice*)sender();\\r\\n    slice->setExploded(show);\\r\\n}\\r\\n\\r\\nvoid MainWindow34::startThreadButton_clicked()\\r\\n{\\r\\n    this->diceThread1.start();\\r\\n    this->startThreadButton->setEnabled(false);\\r\\n    this->endTheadButton->setEnabled(true);\\r\\n    this->startDiceButton->setEnabled(true);\\r\\n    this->pauseDiceButton->setEnabled(false);\\r\\n}\\r\\n\\r\\nvoid MainWindow34::endTheadButton_clicked()\\r\\n{\\r\\n    this->diceThread1.diceStop();\\r\\n    this->diceThread1.wait();\\r\\n    this->startThreadButton->setEnabled(true);\\r\\n    this->endTheadButton->setEnabled(false);\\r\\n    this->startDiceButton->setEnabled(false);\\r\\n    this->pauseDiceButton->setEnabled(false);\\r\\n\\r\\n    this->buildPieChart();\\r\\n}\\r\\nvoid MainWindow34::startDiceButton_clicked()\\r\\n{\\r\\n    this->diceThread1.diceBegin();\\r\\n    this->timer1.start(1);\\r\\n    this->startDiceButton->setEnabled(false);\\r\\n    this->pauseDiceButton->setEnabled(true);\\r\\n}\\r\\n\\r\\nvoid MainWindow34::pauseDiceButton_clicked()\\r\\n{\\r\\n    this->diceThread1.dicePause();\\r\\n    this->timer1.stop();\\r\\n    this->startDiceButton->setEnabled(true);\\r\\n    this->pauseDiceButton->setEnabled(false);\\r\\n\\r\\n    this->buildPieChart();\\r\\n}\\r\\n\\r\\nvoid MainWindow34::clearTextButton_clicked()\\r\\n{\\r\\n    this->plainTextEdit->clear();\\r\\n}\\r\\n\\r\\nvoid MainWindow34::closeEvent(QCloseEvent *event)\\r\\n{\\r\\n    if(this->diceThread1.isRunning())\\r\\n    {\\r\\n        this->diceThread1.diceStop();\\r\\n        this->diceThread1.wait();\\r\\n    }\\r\\n    event->accept();\\r\\n}\\r\\n\\r\\nQDiceThread::QDiceThread(int count, int diceValue)\\r\\n{\\r\\n    this->count = count;\\r\\n    this->diceValue = diceValue;\\r\\n}\\r\\n\\r\\nvoid QDiceThread::diceBegin()\\r\\n{\\r\\n    this->isPaused = false;\\r\\n}\\r\\n\\r\\nvoid QDiceThread::dicePause()\\r\\n{\\r\\n    this->isPaused = true;\\r\\n}\\r\\n\\r\\nvoid QDiceThread::diceStop()\\r\\n{\\r\\n    this->isStop = true;\\r\\n}\\r\\n\\r\\nbool QDiceThread::getDiceValue(int *count, int *diceValue)\\r\\n{\\r\\n    if(this->mutex.tryLock())\\r\\n    {\\r\\n        *count = this->count;\\r\\n        *diceValue = this->diceValue;\\r\\n        this->mutex.unlock();\\r\\n        return true;\\r\\n    }\\r\\n    else\\r\\n    {\\r\\n        return false;\\r\\n    }\\r\\n}\\r\\n\\r\\nvoid QDiceThread::run()\\r\\n{\\r\\n    this->isStop = false;\\r\\n    // 随机数初始化 qsrand 是线程安全的\\r\\n    qsrand(QTime::currentTime().msec());\\r\\n\\r\\n    while (!this->isStop) {\\r\\n        if(!this->isPaused)\\r\\n        {\\r\\n            // 信号量和定时器的实现方式\\r\\n            this->mutex.lock();\\r\\n            // QMutexLocker mutexLocker(&this->mutex);\\r\\n            // 获得随机数\\r\\n            this->diceValue = qrand();\\r\\n            this->diceValue = (this->diceValue % 6) + 1;\\r\\n            this->count ++;\\r\\n            this->mutex.unlock();\\r\\n\\r\\n            // 信号和槽的实现方式\\r\\n//             emit this->newValue(this->count, this->diceValue);\\r\\n        }\\r\\n        msleep(1);\\r\\n    }\\r\\n    quit();\\r\\n}\\r\\n\\r\\n```","author":{"username":"yhw-miracle"},"reader":2,"is_comment":true,"comments":[]},"f801ddade1495b72de5d3752c74e796b1e682c62fa215f30457d9aa5e00a8811":{"title":"基于 QWaitCondition 的线程同步","hash":"f801ddade1495b72de5d3752c74e796b1e682c62fa215f30457d9aa5e00a8811","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2022-02-13","update":"2022-02-13","content":"\\r\\n```c++\\r\\n#if _MSC_VER >= 1600\\r\\n#pragma execution_character_set(\\"utf-8\\")\\r\\n#endif\\r\\n\\r\\n#include \\"mainwindow35.h\\"\\r\\n#include <QDebug>\\r\\n\\r\\nQMutex mutex;\\r\\nQWaitCondition newDataAvailable;\\r\\n\\r\\nint count = 0;\\r\\nint diceValue = 0;\\r\\n\\r\\nQProducerThread::QProducerThread()\\r\\n{\\r\\n\\r\\n}\\r\\n\\r\\nvoid QProducerThread::run()\\r\\n{\\r\\n    this->isStop = false;\\r\\n    // 随机数初始化 qsrand 是线程安全的\\r\\n    qsrand(QTime::currentTime().msec());\\r\\n\\r\\n    while (!this->isStop) {\\r\\n        // 信号量和定时器的实现方式\\r\\n        mutex.lock();\\r\\n        // QMutexLocker mutexLocker(&this->mutex);\\r\\n        // 获得随机数\\r\\n        diceValue = qrand();\\r\\n        diceValue = (diceValue % 6) + 1;\\r\\n        count ++;\\r\\n        mutex.unlock();\\r\\n        newDataAvailable.wakeAll();\\r\\n\\r\\n        msleep(1);\\r\\n    }\\r\\n    quit();\\r\\n}\\r\\n\\r\\nvoid QProducerThread::stopThread()\\r\\n{\\r\\n    this->isStop = true;\\r\\n}\\r\\n\\r\\nQConsumerThread::QConsumerThread()\\r\\n{\\r\\n\\r\\n}\\r\\n\\r\\nvoid QConsumerThread::run()\\r\\n{\\r\\n    this->isStop = false;\\r\\n    while(!this->isStop)\\r\\n    {\\r\\n        mutex.lock();\\r\\n        newDataAvailable.wait(&mutex);\\r\\n        emit this->newValue(count, diceValue);\\r\\n        mutex.unlock();\\r\\n    }\\r\\n}\\r\\n\\r\\nvoid QConsumerThread::stopThread()\\r\\n{\\r\\n    this->isStop = true;\\r\\n}\\r\\n\\r\\nMainWindow35::MainWindow35(QString title, QWidget *parent) : QMainWindow(parent)\\r\\n{\\r\\n    this->setWindowTitle(title);\\r\\n    QFont font;\\r\\n    font.setFamily(\\"Hack\\");\\r\\n    font.setPixelSize(12);\\r\\n    this->setFont(font);\\r\\n\\r\\n    this->groupBox1 = new QGroupBox();\\r\\n    QHBoxLayout *layout1 = new QHBoxLayout();\\r\\n    this->startThreadButton = new QPushButton();\\r\\n    this->startThreadButton->setText(\\"启动线程\\");\\r\\n    this->endTheadButton = new QPushButton();\\r\\n    this->endTheadButton->setText(\\"结束线程\\");\\r\\n    this->clearTextButton = new QPushButton();\\r\\n    this->clearTextButton->setText(\\"清空\\");\\r\\n    layout1->addWidget(this->startThreadButton);\\r\\n    layout1->addWidget(this->endTheadButton);\\r\\n    layout1->addWidget(this->clearTextButton);\\r\\n\\r\\n    this->plainTextEdit = new QPlainTextEdit();\\r\\n    this->chartView = new QChartView();\\r\\n\\r\\n    QSplitter *splitter = new QSplitter();\\r\\n    splitter->setOrientation(Qt::Horizontal);\\r\\n    splitter->addWidget(this->plainTextEdit);\\r\\n    splitter->addWidget(this->chartView);\\r\\n\\r\\n    QWidget *w = new QWidget();\\r\\n    QVBoxLayout *layout3 = new QVBoxLayout();\\r\\n    layout3->addLayout(layout1);\\r\\n    layout3->addWidget(splitter);\\r\\n    w->setLayout(layout3);\\r\\n    this->setCentralWidget(w);\\r\\n\\r\\n    this->statusBar1 = new QStatusBar();\\r\\n    this->label1 = new QLabel();\\r\\n    this->label2 = new QLabel();\\r\\n    this->statusBar1->addWidget(this->label1);\\r\\n    this->statusBar1->addWidget(this->label2);\\r\\n    this->setStatusBar(this->statusBar1);\\r\\n\\r\\n    this->connect(&this->producerThread, SIGNAL(started()), this, SLOT(producerThread_started()));\\r\\n    this->connect(&this->producerThread, SIGNAL(finished()), this, SLOT(producerThread_finished()));\\r\\n    this->connect(&this->consumerThread, SIGNAL(started()), this, SLOT(consumerThread_started()));\\r\\n    this->connect(&this->consumerThread, SIGNAL(finished()), this, SLOT(consumerThread_finished()));\\r\\n    this->connect(&this->consumerThread, SIGNAL(newValue(int, int)), this, SLOT(consumerThread_newValue(int, int)));\\r\\n\\r\\n    this->connect(this->startThreadButton, SIGNAL(clicked()), this, SLOT(startThreadButton_clicked()));\\r\\n    this->connect(this->endTheadButton, SIGNAL(clicked()), this, SLOT(endTheadButton_clicked()));\\r\\n    this->connect(this->clearTextButton, SIGNAL(clicked()), this, SLOT(clearTextButton_clicked()));\\r\\n\\r\\n    this->historyDiceValue[1] = 0;\\r\\n    this->historyDiceValue[2] = 0;\\r\\n    this->historyDiceValue[3] = 0;\\r\\n    this->historyDiceValue[4] = 0;\\r\\n    this->historyDiceValue[5] = 0;\\r\\n    this->historyDiceValue[6] = 0;\\r\\n}\\r\\n\\r\\nvoid MainWindow35::producerThread_started()\\r\\n{\\r\\n    this->label1->setText(\\"producer thread start.\\");\\r\\n}\\r\\n\\r\\nvoid MainWindow35::producerThread_finished()\\r\\n{\\r\\n    this->label1->setText(\\"producer thread finished.\\");\\r\\n}\\r\\n\\r\\nvoid MainWindow35::consumerThread_started()\\r\\n{\\r\\n    this->label2->setText(\\"consumer thread start.\\");\\r\\n}\\r\\n\\r\\nvoid MainWindow35::consumerThread_finished()\\r\\n{\\r\\n    this->label2->setText(\\"consumer thread finished.\\");\\r\\n}\\r\\n\\r\\nvoid MainWindow35::consumerThread_newValue(int count, int diceValue)\\r\\n{\\r\\n    this->plainTextEdit->appendPlainText(QString(\\"第 %1 次掷骰子，点数为 %2.\\").arg(count).arg(diceValue));\\r\\n    this->historyDiceValue[diceValue] ++;\\r\\n}\\r\\n\\r\\nvoid MainWindow35::buildPieChart()\\r\\n{\\r\\n    QChart *chart = this->chartView->chart();\\r\\n    chart->removeAllSeries();\\r\\n\\r\\n    QPieSeries *pieSeries = new QPieSeries();\\r\\n    // 饼图中间空心大小\\r\\n    pieSeries->setHoleSize(0);\\r\\n    // 添加分块数据\\r\\n    pieSeries->append(\\"1\\", this->historyDiceValue[1]);\\r\\n    pieSeries->append(\\"2\\", this->historyDiceValue[2]);\\r\\n    pieSeries->append(\\"3\\", this->historyDiceValue[3]);\\r\\n    pieSeries->append(\\"4\\", this->historyDiceValue[4]);\\r\\n    pieSeries->append(\\"5\\", this->historyDiceValue[5]);\\r\\n    pieSeries->append(\\"6\\", this->historyDiceValue[6]);\\r\\n\\r\\n    QPieSlice *slice;\\r\\n    // 饼图分块文字\\r\\n    for(int i=0; i<6; i++)\\r\\n    {\\r\\n        slice = pieSeries->slices().at(i);\\r\\n        slice->setLabel(slice->label() + QString(\\": %1 次,占 %2%\\").arg(slice->value()).arg(slice->percentage() * 100));\\r\\n        this->connect(slice, SIGNAL(hovered(bool)), this, SLOT(pieSlice_hovered(bool)));\\r\\n    }\\r\\n\\r\\n    slice->setExploded(true);\\r\\n    pieSeries->setLabelsVisible(true);\\r\\n    chart->addSeries(pieSeries);\\r\\n    chart->setTitle(\\"骰子统计结果\\");\\r\\n    chart->legend()->setVisible(false);\\r\\n//    chart->legend()->setAlignment(Qt::AlignBottom);\\r\\n}\\r\\n\\r\\nvoid MainWindow35::pieSlice_hovered(bool show)\\r\\n{\\r\\n    QPieSlice *slice = (QPieSlice*)sender();\\r\\n    slice->setExploded(show);\\r\\n}\\r\\n\\r\\nvoid MainWindow35::startThreadButton_clicked()\\r\\n{\\r\\n    // 注意: 这里先启动生产者线程后启动消费者线程，数据不会丢失\\r\\n    // 先启动消费者线程后启动生产者线程，会丢失第一次数据\\r\\n    this->producerThread.start();\\r\\n    this->consumerThread.start();\\r\\n    this->startThreadButton->setEnabled(false);\\r\\n    this->endTheadButton->setEnabled(true);\\r\\n}\\r\\n\\r\\nvoid MainWindow35::endTheadButton_clicked()\\r\\n{\\r\\n    this->producerThread.stopThread();\\r\\n    this->producerThread.wait();\\r\\n    this->consumerThread.stopThread();\\r\\n    this->consumerThread.terminate();\\r\\n    this->startThreadButton->setEnabled(true);\\r\\n    this->endTheadButton->setEnabled(false);\\r\\n\\r\\n    this->buildPieChart();\\r\\n}\\r\\n\\r\\nvoid MainWindow35::clearTextButton_clicked()\\r\\n{\\r\\n    this->plainTextEdit->clear();\\r\\n}\\r\\n\\r\\nvoid MainWindow35::closeEvent(QCloseEvent *event)\\r\\n{\\r\\n    if(this->producerThread.isRunning())\\r\\n    {\\r\\n        this->producerThread.stopThread();\\r\\n        this->producerThread.wait();\\r\\n    }\\r\\n    if(this->consumerThread.isRunning())\\r\\n    {\\r\\n        this->consumerThread.stopThread();\\r\\n        this->consumerThread.terminate();\\r\\n    }\\r\\n    event->accept();\\r\\n}\\r\\n\\r\\n```","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},"6574fb60475b751d80b567fb99c1887e01faf656e3633207e61c18a3690cb303":{"title":"基于信号量的线程同步","hash":"6574fb60475b751d80b567fb99c1887e01faf656e3633207e61c18a3690cb303","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2022-02-13","update":"2022-02-13","content":"\\r\\n```c++\\r\\n#if _MSC_VER >= 1600\\r\\n#pragma execution_character_set(\\"utf-8\\")\\r\\n#endif\\r\\n\\r\\n#include \\"mainwindow36.h\\"\\r\\n\\r\\nconst int bufferSize = 10;\\r\\nint buffer1[bufferSize], buffer2[bufferSize];\\r\\n\\r\\n// 当前缓冲区 buffer1/buffer2\\r\\nint currentBufferNumber = 1;\\r\\n// 缓冲区序号\\r\\nint bufferNo = 0;\\r\\n\\r\\n// 空缓冲区个数\\r\\nQSemaphore emptyBuffer(2);\\r\\n// 满缓冲区个数\\r\\nQSemaphore fullBuffer;\\r\\n\\r\\nQGetDataThread::QGetDataThread()\\r\\n{\\r\\n\\r\\n}\\r\\n\\r\\nvoid QGetDataThread::stopThread()\\r\\n{\\r\\n    this->isStop = true;\\r\\n}\\r\\n\\r\\nvoid QGetDataThread::run()\\r\\n{\\r\\n    this->isStop = false;\\r\\n\\r\\n    bufferNo = 0;\\r\\n    qsrand(QTime::currentTime().msec());\\r\\n\\r\\n    int availableBufferCount = emptyBuffer.available();\\r\\n    if(availableBufferCount < 2)\\r\\n    {\\r\\n        // 空缓冲区个数的信号量初始设为 2\\r\\n        emptyBuffer.release(2 - availableBufferCount);\\r\\n    }\\r\\n\\r\\n    while (!this->isStop) {\\r\\n        emptyBuffer.acquire();\\r\\n        for(int i=0; i<bufferSize; i++)\\r\\n        {\\r\\n            if(currentBufferNumber == 1)\\r\\n            {\\r\\n                buffer1[i] = qrand();\\r\\n            }\\r\\n            else\\r\\n            {\\r\\n                buffer2[i] = qrand();\\r\\n            }\\r\\n            msleep(10);\\r\\n        }\\r\\n        bufferNo ++;\\r\\n        // 切换缓冲区\\r\\n        if(currentBufferNumber == 1)\\r\\n        {\\r\\n            currentBufferNumber = 2;\\r\\n        }\\r\\n        else\\r\\n        {\\r\\n            currentBufferNumber = 1;\\r\\n        }\\r\\n        fullBuffer.release();\\r\\n    }\\r\\n}\\r\\n\\r\\nQShowDataThread::QShowDataThread()\\r\\n{\\r\\n\\r\\n}\\r\\n\\r\\nvoid QShowDataThread::stopThread()\\r\\n{\\r\\n    this->isStop = true;\\r\\n}\\r\\n\\r\\nvoid QShowDataThread::run()\\r\\n{\\r\\n    this->isStop = false;\\r\\n\\r\\n    int avaliableFullBufferCount = fullBuffer.available();\\r\\n    if(avaliableFullBufferCount > 0)\\r\\n    {\\r\\n        // 满缓冲区个数的信号量初始设为 0\\r\\n        fullBuffer.acquire(avaliableFullBufferCount);\\r\\n    }\\r\\n\\r\\n    while (!this->isStop) {\\r\\n        fullBuffer.acquire();\\r\\n\\r\\n        int bufferData[bufferSize];\\r\\n        if(currentBufferNumber == 1)\\r\\n        {\\r\\n            for(int i=0; i<bufferSize; i++)\\r\\n            {\\r\\n                bufferData[i] = buffer1[i];\\r\\n            }\\r\\n        }\\r\\n        else\\r\\n        {\\r\\n            for(int i=0; i<bufferSize; i++)\\r\\n            {\\r\\n                bufferData[i] = buffer2[i];\\r\\n            }\\r\\n        }\\r\\n        emptyBuffer.release();\\r\\n        emit this->newValue(bufferData, bufferSize, bufferNo);\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\nMainWindow36::MainWindow36(QString title, QWidget *parent) : QMainWindow(parent)\\r\\n{\\r\\n    this->setWindowTitle(title);\\r\\n    this->setWindowTitle(title);\\r\\n    QFont font;\\r\\n    font.setFamily(\\"Hack\\");\\r\\n    font.setPixelSize(12);\\r\\n    this->setFont(font);\\r\\n\\r\\n    QHBoxLayout *layout1 = new QHBoxLayout();\\r\\n    this->startThreadButton = new QPushButton();\\r\\n    this->startThreadButton->setText(\\"启动线程\\");\\r\\n    this->endTheadButton = new QPushButton();\\r\\n    this->endTheadButton->setText(\\"结束线程\\");\\r\\n    this->clearTextButton = new QPushButton();\\r\\n    this->clearTextButton->setText(\\"清空\\");\\r\\n    layout1->addWidget(this->startThreadButton);\\r\\n    layout1->addWidget(this->endTheadButton);\\r\\n    layout1->addWidget(this->clearTextButton);\\r\\n\\r\\n    this->plainTextEdit = new QPlainTextEdit();\\r\\n\\r\\n    QVBoxLayout *layout2 = new QVBoxLayout();\\r\\n    layout2->addLayout(layout1);\\r\\n    layout2->addWidget(this->plainTextEdit);\\r\\n\\r\\n    QWidget *w = new QWidget();;\\r\\n    w->setLayout(layout2);\\r\\n    this->setCentralWidget(w);\\r\\n\\r\\n    this->statusBar1 = new QStatusBar();\\r\\n    this->label1 = new QLabel();\\r\\n    this->label2 = new QLabel();\\r\\n    this->statusBar1->addWidget(this->label1);\\r\\n    this->statusBar1->addWidget(this->label2);\\r\\n    this->setStatusBar(this->statusBar1);\\r\\n\\r\\n    this->connect(&this->getDataThread, SIGNAL(started()), this, SLOT(getDataThread_started()));\\r\\n    this->connect(&this->getDataThread, SIGNAL(finished()), this, SLOT(getDataThread_finished()));\\r\\n    this->connect(&this->showDataThread, SIGNAL(started()), this, SLOT(showDataThread_started()));\\r\\n    this->connect(&this->showDataThread, SIGNAL(finished()), this, SLOT(showDataThread_finished()));\\r\\n    this->connect(&this->showDataThread, SIGNAL(newValue(int*, int, int)), this, SLOT(showDataThread_newValue(int*, int, int)));\\r\\n\\r\\n    this->connect(this->startThreadButton, SIGNAL(clicked()), this, SLOT(startThreadButton_clicked()));\\r\\n    this->connect(this->endTheadButton, SIGNAL(clicked()), this, SLOT(endTheadButton_clicked()));\\r\\n    this->connect(this->clearTextButton, SIGNAL(clicked()), this, SLOT(clearTextButton_clicked()));\\r\\n}\\r\\n\\r\\nvoid MainWindow36::getDataThread_started()\\r\\n{\\r\\n    this->label1->setText(\\"getDataThread start.\\");\\r\\n}\\r\\n\\r\\nvoid MainWindow36::getDataThread_finished()\\r\\n{\\r\\n    this->label1->setText(\\"getDataThread finished.\\");\\r\\n}\\r\\n\\r\\nvoid MainWindow36::showDataThread_started()\\r\\n{\\r\\n    this->label2->setText(\\"showDataThread start.\\");\\r\\n}\\r\\n\\r\\nvoid MainWindow36::showDataThread_finished()\\r\\n{\\r\\n    this->label2->setText(\\"showDataThread finished.\\");\\r\\n}\\r\\n\\r\\nvoid MainWindow36::showDataThread_newValue(int *data, int size, int number)\\r\\n{\\r\\n    QString str = QString(\\"第 %1 个缓冲区:\\").arg(number);\\r\\n    for(int i=0; i<size; i++)\\r\\n    {\\r\\n        str += QString(\\"%1,\\").arg(*data);\\r\\n        data ++;\\r\\n    }\\r\\n    str += \\"\\\\n\\";\\r\\n    this->plainTextEdit->appendPlainText(str);\\r\\n}\\r\\n\\r\\nvoid MainWindow36::startThreadButton_clicked()\\r\\n{\\r\\n    this->getDataThread.start();\\r\\n    this->showDataThread.start();\\r\\n    this->startThreadButton->setEnabled(false);\\r\\n    this->endTheadButton->setEnabled(true);\\r\\n}\\r\\n\\r\\nvoid MainWindow36::endTheadButton_clicked()\\r\\n{\\r\\n    this->getDataThread.terminate();\\r\\n    this->getDataThread.wait();\\r\\n    this->showDataThread.terminate();\\r\\n    this->showDataThread.wait();\\r\\n    this->startThreadButton->setEnabled(true);\\r\\n    this->endTheadButton->setEnabled(false);\\r\\n}\\r\\n\\r\\nvoid MainWindow36::clearTextButton_clicked()\\r\\n{\\r\\n    this->plainTextEdit->clear();\\r\\n}\\r\\n\\r\\nvoid MainWindow36::closeEvent(QCloseEvent *event)\\r\\n{\\r\\n    if(this->getDataThread.isRunning())\\r\\n    {\\r\\n        this->getDataThread.terminate();\\r\\n        this->getDataThread.wait();\\r\\n    }\\r\\n    if(this->showDataThread.isRunning())\\r\\n    {\\r\\n        this->showDataThread.terminate();\\r\\n        this->showDataThread.wait();\\r\\n    }\\r\\n    event->accept();\\r\\n}\\r\\n\\r\\n```","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},"79cbc463848e4fab99f453ff94b5d5cb114140a8d100380791d83fdf4daa67e7":{"title":"自定义 Widget 组件","hash":"79cbc463848e4fab99f453ff94b5d5cb114140a8d100380791d83fdf4daa67e7","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2022-02-12","update":"2022-02-12","content":"\\r\\n```c++\\r\\n#if _MSC_VER >= 1600\\r\\n#pragma execution_character_set(\\"utf-8\\")\\r\\n#endif\\r\\n\\r\\n#include \\"widget33.h\\"\\r\\n\\r\\nQBattery::QBattery(QWidget *parent) : QWidget(parent)\\r\\n{\\r\\n\\r\\n}\\r\\n\\r\\nvoid QBattery::paintEvent(QPaintEvent *event)\\r\\n{\\r\\n    Q_UNUSED(event);\\r\\n    QPainter painter(this);\\r\\n    QRect rect(0, 0, this->width(), this->height());\\r\\n    painter.setViewport(rect);\\r\\n    painter.setRenderHint(QPainter::Antialiasing);\\r\\n    painter.setRenderHint(QPainter::TextAntialiasing);\\r\\n\\r\\n    QPen pen;\\r\\n    pen.setWidth(3);\\r\\n    pen.setColor(this->boldColor);\\r\\n    pen.setStyle(Qt::SolidLine);\\r\\n    pen.setCapStyle(Qt::FlatCap);\\r\\n    pen.setJoinStyle(Qt::BevelJoin);\\r\\n    painter.setPen(pen);\\r\\n\\r\\n    QBrush brush;\\r\\n    brush.setColor(this->backgrooudColor);\\r\\n    brush.setStyle(Qt::SolidPattern);\\r\\n    painter.setBrush(brush);\\r\\n\\r\\n    // 电池边框\\r\\n    rect.setRect(1, 1, 109, 48);\\r\\n    painter.drawRect(rect);\\r\\n\\r\\n    // 电池正极头\\r\\n    brush.setColor(this->boldColor);\\r\\n    painter.setBrush(brush);\\r\\n    rect.setRect(110, 15, 10 ,20);\\r\\n    painter.drawRect(rect);\\r\\n\\r\\n    // 电池柱\\r\\n    if(this->getPowerLevel() > this->getWarnLevel())\\r\\n    {\\r\\n        brush.setColor(this->powerColor);\\r\\n        pen.setColor(this->powerColor);\\r\\n    }\\r\\n    else\\r\\n    {\\r\\n        brush.setColor(this->warningColor);\\r\\n        pen.setColor(this->warningColor);\\r\\n    }\\r\\n    painter.setBrush(brush);\\r\\n    painter.setPen(pen);\\r\\n    if(this->getPowerLevel() > 0)\\r\\n    {\\r\\n        rect.setRect(5, 5, this->getPowerLevel(), 40);\\r\\n        painter.drawRect(rect);\\r\\n    }\\r\\n\\r\\n    // 电量百分比文字\\r\\n    QFontMetrics textSize(this->font());\\r\\n    QString powerStr = QString(\\"%1 %\\").arg(this->getPowerLevel());\\r\\n    QRect textRect = textSize.boundingRect(powerStr);\\r\\n    painter.setFont(this->font());\\r\\n    pen.setColor(this->boldColor);\\r\\n    painter.setPen(pen);\\r\\n    painter.drawText(55 - textRect.width() / 2, 23 + textRect.height() / 2, powerStr);\\r\\n}\\r\\n\\r\\nvoid QBattery::setPowerLevel(int newPowerLevel)\\r\\n{\\r\\n    this->powerLevel = newPowerLevel;\\r\\n    emit this->powerLevelChanged(newPowerLevel);\\r\\n    repaint();\\r\\n}\\r\\n\\r\\nint QBattery::getPowerLevel() const\\r\\n{\\r\\n    return this->powerLevel;\\r\\n}\\r\\n\\r\\nint QBattery::getWarnLevel() const\\r\\n{\\r\\n    return this->warnLevel;\\r\\n}\\r\\n\\r\\nvoid QBattery::setWarnLevel(int newWarnLevel)\\r\\n{\\r\\n    this->warnLevel = newWarnLevel;\\r\\n    repaint();\\r\\n}\\r\\n\\r\\nQSize QBattery::sizeHint()\\r\\n{\\r\\n    QSize size(this->height() * 12 / 5, this->height());\\r\\n    return size;\\r\\n}\\r\\n\\r\\nWidget33::Widget33(QString title, QWidget *parent) : QWidget(parent)\\r\\n{\\r\\n    this->setWindowTitle(title);\\r\\n\\r\\n    this->battery = new QBattery(this);\\r\\n    this->slider = new QSlider(this);\\r\\n    this->slider->setOrientation(Qt::Horizontal);\\r\\n    this->slider->setMinimum(0);\\r\\n    this->slider->setMaximum(100);\\r\\n    this->slider->setValue(100);\\r\\n\\r\\n    QVBoxLayout *layout = new QVBoxLayout(this);\\r\\n    layout->addWidget(this->battery);\\r\\n    layout->addWidget(this->slider);\\r\\n    this->setLayout(layout);\\r\\n\\r\\n    this->connect(this->slider, SIGNAL(valueChanged(int)), this, SLOT(slider_valueChanged(int)));\\r\\n\\r\\n}\\r\\n\\r\\nvoid Widget33::slider_valueChanged(int value)\\r\\n{\\r\\n    this->battery->setPowerLevel(value);\\r\\n}\\r\\n\\r\\n```","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},"8bfe36af0186a42c04140d3b452cb38663b838cfb9caed663b5b92a4e58fea29":{"title":"QSqlTableModel","hash":"8bfe36af0186a42c04140d3b452cb38663b838cfb9caed663b5b92a4e58fea29","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2022-02-11","update":"2022-02-11","content":"\\r\\n```c++\\r\\n#if _MSC_VER >= 1600\\r\\n#pragma execution_character_set(\\"utf-8\\")\\r\\n#endif\\r\\n\\r\\n#include \\"mainwindow32.h\\"\\r\\n#include <QDebug>\\r\\n\\r\\nMainWindow32::MainWindow32(QString title, QWidget *parent) : QMainWindow(parent)\\r\\n{\\r\\n    this->setWindowTitle(title);\\r\\n\\r\\n    this->tableView1 = new QTableView();\\r\\n    this->tableView1->setSelectionBehavior(QAbstractItemView::SelectRows);\\r\\n    this->tableView1->setSelectionMode(QAbstractItemView::SingleSelection);\\r\\n    this->tableView1->setEditTriggers(QAbstractItemView::NoEditTriggers);\\r\\n    this->tableView1->setContextMenuPolicy(Qt::CustomContextMenu);\\r\\n    this->tableView1->setAlternatingRowColors(true);\\r\\n    this->setCentralWidget(this->tableView1);\\r\\n\\r\\n    this->db = QSqlDatabase::addDatabase(\\"QMYSQL\\", \\"MainWindow32\\");\\r\\n    this->db.setHostName(\\"127.0.0.1\\");\\r\\n    this->db.setPort(3306);\\r\\n    this->db.setUserName(\\"root\\");\\r\\n    this->db.setPassword(\\"root\\");\\r\\n    this->db.setDatabaseName(\\"test01\\");\\r\\n    if(this->db.open())\\r\\n    {\\r\\n        this->openTable();\\r\\n    }\\r\\n}\\r\\n\\r\\nvoid MainWindow32::openTable()\\r\\n{\\r\\n    this->tableModel = new QSqlTableModel(this, this->db);\\r\\n    this->tableModel->setTable(\\"station_monitor\\");\\r\\n    this->tableModel->setSort(this->tableModel->fieldIndex(\\"id\\"), Qt::AscendingOrder);\\r\\n    this->tableModel->setEditStrategy(QSqlTableModel::OnManualSubmit);\\r\\n    this->tableModel->setFilter(\\"is_show = 1 and is_del = 0\\");\\r\\n    if(this->tableModel->select())\\r\\n    {\\r\\n        this->tableModel->setHeaderData(this->tableModel->fieldIndex(\\"id\\"), Qt::Horizontal, \\"id\\");\\r\\n        this->tableModel->setHeaderData(this->tableModel->fieldIndex(\\"area_id\\"), Qt::Horizontal, \\"area_id\\");\\r\\n        this->tableModel->setHeaderData(this->tableModel->fieldIndex(\\"area_name\\"), Qt::Horizontal, \\"area_name\\");\\r\\n        this->tableModel->setHeaderData(this->tableModel->fieldIndex(\\"station_name\\"), Qt::Horizontal, \\"station_name\\");\\r\\n        this->tableModel->setHeaderData(this->tableModel->fieldIndex(\\"company_name\\"), Qt::Horizontal, \\"company_name\\");\\r\\n        this->tableModel->setHeaderData(this->tableModel->fieldIndex(\\"address\\"), Qt::Horizontal, \\"address\\");\\r\\n        this->tableModel->setHeaderData(this->tableModel->fieldIndex(\\"state_flag\\"), Qt::Horizontal, \\"high/low\\");\\r\\n        this->tableModel->setHeaderData(this->tableModel->fieldIndex(\\"graphfile_id\\"), Qt::Horizontal, \\"graphfile_id\\");\\r\\n\\r\\n        this->itemSelectionModel = new QItemSelectionModel(this->tableModel);\\r\\n        this->tableView1->setModel(this->tableModel);\\r\\n        this->tableView1->setSelectionModel(this->itemSelectionModel);\\r\\n        this->tableView1->setColumnHidden(this->tableModel->fieldIndex(\\"id\\"), true);\\r\\n        this->tableView1->setColumnHidden(this->tableModel->fieldIndex(\\"region_id\\"), true);\\r\\n        this->tableView1->setColumnHidden(this->tableModel->fieldIndex(\\"is_show\\"), true);\\r\\n        this->tableView1->setColumnHidden(this->tableModel->fieldIndex(\\"is_del\\"), true);\\r\\n        this->tableView1->resizeRowsToContents();\\r\\n        this->tableView1->resizeColumnsToContents();\\r\\n        this->connect(this->tableView1, SIGNAL(customContextMenuRequested(const QPoint&)), this, SLOT(tableView1_customContextMenuRequested(const QPoint&)));\\r\\n\\r\\n        QStringList isHighOrLowStation;\\r\\n        isHighOrLowStation << \\"low\\" << \\"high\\";\\r\\n        int row = this->tableModel->rowCount();\\r\\n        for(int r=0; r<row; r++)\\r\\n        {\\r\\n            QModelIndex currentModelIndex = this->tableModel->index(r, this->tableModel->fieldIndex(\\"state_flag\\"));\\r\\n            int currentValue = this->tableModel->data(currentModelIndex).toInt();\\r\\n            this->tableModel->setData(currentModelIndex, isHighOrLowStation.at(currentValue), Qt::DisplayRole | Qt::EditRole);\\r\\n        }\\r\\n        this->tableView1->setModel(this->tableModel);\\r\\n        this->tableView1->setItemDelegateForColumn(this->tableModel->fieldIndex(\\"state_flag\\"), &this->isHighOrLowStationDelegate);\\r\\n        this->isHighOrLowStationDelegate.setItems(isHighOrLowStation, false);\\r\\n        this->connect(this->itemSelectionModel, SIGNAL(currentChanged(const QModelIndex&, const QModelIndex&)), this, SLOT(itemSelectionModel_currentChanged(const QModelIndex&, const QModelIndex&)));\\r\\n        this->connect(this->itemSelectionModel, SIGNAL(currentRowChanged(const QModelIndex&, const QModelIndex&)), this, SLOT(itemSelectionModel_currentRowChanged(const QModelIndex&, const QModelIndex&)));\\r\\n\\r\\n        this->dataMapper = new QDataWidgetMapper();\\r\\n        this->dataMapper->setModel(this->tableModel);\\r\\n        this->dataMapper->setSubmitPolicy(QDataWidgetMapper::AutoSubmit);\\r\\n//        this->dataMapper->addMapping()\\r\\n    }\\r\\n}\\r\\n\\r\\nvoid MainWindow32::itemSelectionModel_currentChanged(const QModelIndex &current, const QModelIndex &previous)\\r\\n{\\r\\n    qDebug() << current.row() << current.column();\\r\\n}\\r\\n\\r\\nvoid MainWindow32::itemSelectionModel_currentRowChanged(const QModelIndex &current, const QModelIndex &previous)\\r\\n{\\r\\n    qDebug() << current.row() << current.column();\\r\\n}\\r\\n\\r\\nvoid MainWindow32::tableView1_customContextMenuRequested(const QPoint &pos)\\r\\n{\\r\\n    qDebug() << \\"custom menu\\";\\r\\n    Q_UNUSED(pos);\\r\\n    QMenu *menu = new QMenu(this);\\r\\n    this->actionAdd = new QAction();\\r\\n    this->actionAdd->setText(\\"新增\\");\\r\\n    this->actionModify = new QAction();\\r\\n    this->actionModify->setText(\\"修改\\");\\r\\n    this->actionDelete = new QAction();\\r\\n    this->actionDelete->setText(\\"删除\\");\\r\\n    menu->addAction(this->actionAdd);\\r\\n    menu->addAction(this->actionModify);\\r\\n    menu->addAction(this->actionDelete);\\r\\n    this->connect(this->actionAdd, SIGNAL(triggered()), this, SLOT(actionAdd_triggered()));\\r\\n    this->connect(this->actionModify, SIGNAL(triggered()), this, SLOT(actionModify_triggered()));\\r\\n    this->connect(this->actionDelete, SIGNAL(triggered()), this, SLOT(actionDelete_triggered()));\\r\\n    menu->exec(QCursor::pos());\\r\\n    delete menu;\\r\\n}\\r\\n\\r\\nvoid MainWindow32::actionAdd_triggered()\\r\\n{\\r\\n\\r\\n}\\r\\n\\r\\nvoid MainWindow32::actionModify_triggered()\\r\\n{\\r\\n\\r\\n}\\r\\n\\r\\nvoid MainWindow32::actionDelete_triggered()\\r\\n{\\r\\n    QModelIndex isShowModelIndex= this->tableModel->index(this->itemSelectionModel->currentIndex().row(), this->tableModel->fieldIndex(\\"is_show\\"));\\r\\n    QModelIndex isDelModelIndex= this->tableModel->index(this->itemSelectionModel->currentIndex().row(), this->tableModel->fieldIndex(\\"is_del\\"));\\r\\n    this->tableModel->setData(isShowModelIndex, 0, Qt::EditRole);\\r\\n    this->tableModel->setData(isDelModelIndex, 0, Qt::EditRole);\\r\\n    this->tableModel->submitAll();\\r\\n}\\r\\n\\r\\n\\r\\n```","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},"a308226b7af8bfdc37bb01a7a0d34c57efd0efa4e277c247ee53dce469cf57e3":{"title":"QChart 绘图详细功能","hash":"a308226b7af8bfdc37bb01a7a0d34c57efd0efa4e277c247ee53dce469cf57e3","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2022-02-10","update":"2022-02-10","content":"\\r\\n```c++\\r\\n#if _MSC_VER >= 1600\\r\\n#pragma execution_character_set(\\"utf-8\\")\\r\\n#endif\\r\\n\\r\\n#include \\"mainwindow31.h\\"\\r\\n\\r\\n#include <QDebug>\\r\\n\\r\\nMainWindow31::MainWindow31(QString title, QWidget *parent) : QMainWindow(parent)\\r\\n{\\r\\n    this->setWindowTitle(title);\\r\\n\\r\\n    this->toolBar1 = new QToolBar();\\r\\n    this->action1 = new QAction();\\r\\n    this->action1->setText(\\"刷新绘图\\");\\r\\n    this->action2 = new QAction();\\r\\n    this->action2->setText(\\"放大\\");\\r\\n    this->action3 = new QAction();\\r\\n    this->action3->setText(\\"缩小\\");\\r\\n    this->action4 = new QAction();\\r\\n    this->action4->setText(\\"原始大小\\");\\r\\n    this->action5 = new QAction();\\r\\n    this->action5->setText(\\"退出\\");\\r\\n    this->toolBar1->addAction(this->action1);\\r\\n    this->toolBar1->addAction(this->action2);\\r\\n    this->toolBar1->addAction(this->action3);\\r\\n    this->toolBar1->addAction(this->action4);\\r\\n    this->toolBar1->addAction(this->action5);\\r\\n    this->connect(this->action1, SIGNAL(triggered()), this, SLOT(action1_triggered()));\\r\\n    this->connect(this->action2, SIGNAL(triggered()), this, SLOT(action2_triggered()));\\r\\n    this->connect(this->action3, SIGNAL(triggered()), this, SLOT(action3_triggered()));\\r\\n    this->connect(this->action4, SIGNAL(triggered()), this, SLOT(action4_triggered()));\\r\\n    this->connect(this->action5, SIGNAL(triggered()), this, SLOT(action5_triggered()));\\r\\n    this->addToolBar(this->toolBar1);\\r\\n\\r\\n    this->toolBox1 = new QToolBox();\\r\\n    this->groupBox1 = new QGroupBox();\\r\\n    this->groupBox2 = new QGroupBox();\\r\\n    this->groupBox3 = new QGroupBox();\\r\\n    this->toolBox1->addItem(this->groupBox1, \\"图表设置\\");\\r\\n    this->toolBox1->addItem(this->groupBox2, \\"曲线设置\\");\\r\\n    this->toolBox1->addItem(this->groupBox3, \\"坐标轴设置\\");\\r\\n    this->initGroupBox1Widgets();\\r\\n    this->initGroupBox2Widgets();\\r\\n    this->initGroupBox3Widgets();\\r\\n\\r\\n    this->splitter = new QSplitter();\\r\\n    this->chartView = new QChartView();\\r\\n    this->splitter->addWidget(this->toolBox1);\\r\\n    this->splitter->addWidget(this->chartView);\\r\\n    this->setCentralWidget(this->splitter);\\r\\n\\r\\n    this->createChart();\\r\\n    this->prepareData();\\r\\n    this->updateFromChart();\\r\\n\\r\\n    this->connect(this->button1, SIGNAL(clicked()), this, SLOT(button1_clicked()));\\r\\n    this->connect(this->button2, SIGNAL(clicked()), this, SLOT(button2_clicked()));\\r\\n    this->connect(this->button3, SIGNAL(clicked()), this, SLOT(button3_clicked()));\\r\\n    this->connect(this->button4, SIGNAL(clicked()), this, SLOT(button4_clicked()));\\r\\n    this->connect(this->button5, SIGNAL(clicked()), this, SLOT(button5_clicked()));\\r\\n    this->connect(this->button6, SIGNAL(clicked()), this, SLOT(button6_clicked()));\\r\\n    this->connect(this->button7, SIGNAL(clicked()), this, SLOT(button7_clicked()));\\r\\n    this->connect(this->button8, SIGNAL(clicked()), this, SLOT(button8_clicked()));\\r\\n    this->connect(this->button9, SIGNAL(clicked()), this, SLOT(button9_clicked()));\\r\\n    this->connect(this->button10, SIGNAL(clicked()), this, SLOT(button10_clicked()));\\r\\n    this->connect(this->button11, SIGNAL(clicked()), this, SLOT(button11_clicked()));\\r\\n}\\r\\n\\r\\nvoid MainWindow31::initGroupBox1Widgets()\\r\\n{\\r\\n    QGroupBox *groupBox11 = new QGroupBox();\\r\\n    groupBox11->setTitle(\\"标题\\");\\r\\n    QHBoxLayout *layout1 = new QHBoxLayout();\\r\\n    this->lineEdit1 = new QLineEdit();\\r\\n    this->button1 = new QPushButton();\\r\\n    this->button1->setText(\\"设置\\");\\r\\n    layout1->addWidget(this->lineEdit1);\\r\\n    layout1->addWidget(this->button1);\\r\\n    this->button2 = new QPushButton();\\r\\n    this->button2->setText(\\"设置标题字体\\");\\r\\n    QVBoxLayout *layout2 = new QVBoxLayout();\\r\\n    layout2->addLayout(layout1);\\r\\n    layout2->addWidget(this->button2);\\r\\n    groupBox11->setLayout(layout2);\\r\\n\\r\\n    QGroupBox *groupBox12 = new QGroupBox();\\r\\n    groupBox12->setTitle(\\"图例\\");\\r\\n    this->radioButton1 = new QRadioButton();\\r\\n    this->radioButton1->setText(\\"上方\\");\\r\\n    this->radioButton2 = new QRadioButton();\\r\\n    this->radioButton2->setText(\\"下方\\");\\r\\n    QHBoxLayout *layout3 = new QHBoxLayout();\\r\\n    layout3->addWidget(this->radioButton1);\\r\\n    layout3->addWidget(this->radioButton2);\\r\\n    this->radioButton3 = new QRadioButton();\\r\\n    this->radioButton3->setText(\\"左方\\");\\r\\n    this->radioButton4 = new QRadioButton();\\r\\n    this->radioButton4->setText(\\"右方\\");\\r\\n    QHBoxLayout *layout4 = new QHBoxLayout();\\r\\n    layout4->addWidget(this->radioButton3);\\r\\n    layout4->addWidget(this->radioButton4);\\r\\n    this->checkBox1 = new QCheckBox();\\r\\n    this->checkBox1->setText(\\"图例可见\\");\\r\\n    this->checkBox2 = new QCheckBox();\\r\\n    this->checkBox2->setText(\\"背景可见\\");\\r\\n    QHBoxLayout *layout5 = new QHBoxLayout();\\r\\n    layout5->addWidget(this->checkBox1);\\r\\n    layout5->addWidget(this->checkBox2);\\r\\n    this->button3 = new QPushButton();\\r\\n    this->button3->setText(\\"字体\\");\\r\\n    this->button4 = new QPushButton();\\r\\n    this->button4->setText(\\"标签颜色\\");\\r\\n    QHBoxLayout *layout6 = new QHBoxLayout();\\r\\n    layout6->addWidget(this->button3);\\r\\n    layout6->addWidget(this->button4);\\r\\n    QVBoxLayout *layout7 = new QVBoxLayout();\\r\\n    layout7->addLayout(layout3);\\r\\n    layout7->addLayout(layout4);\\r\\n    layout7->addLayout(layout5);\\r\\n    layout7->addLayout(layout6);\\r\\n    groupBox12->setLayout(layout7);\\r\\n\\r\\n    QGroupBox *groupBox13 = new QGroupBox();\\r\\n    groupBox13->setTitle(\\"边距\\");\\r\\n    this->spinBox1 = new QSpinBox();\\r\\n    this->spinBox2 = new QSpinBox();\\r\\n    this->spinBox3 = new QSpinBox();\\r\\n    this->spinBox4 = new QSpinBox();\\r\\n    QFormLayout *layout8 = new QFormLayout();\\r\\n    layout8->addRow(\\"左边距\\", this->spinBox1);\\r\\n    layout8->addRow(\\"右边距\\", this->spinBox2);\\r\\n    layout8->addRow(\\"上边距\\", this->spinBox3);\\r\\n    layout8->addRow(\\"下边距\\", this->spinBox4);\\r\\n    groupBox13->setLayout(layout8);\\r\\n\\r\\n    QGroupBox *groupBox14 = new QGroupBox();\\r\\n    groupBox14->setTitle(\\"动画效果\\");\\r\\n    this->comboBox1 = new QComboBox();\\r\\n    this->comboBox1->insertItem(QChart::NoAnimation, \\"NoAnimation\\", \\"NoAnimation\\");\\r\\n    this->comboBox1->insertItem(QChart::GridAxisAnimations, \\"GridAxisAnimations\\", \\"GridAxisAnimations\\");\\r\\n    this->comboBox1->insertItem(QChart::SeriesAnimations, \\"SeriesAnimations\\", \\"SeriesAnimations\\");\\r\\n    this->comboBox1->insertItem(QChart::AllAnimations, \\"AllAnimations\\", \\"AllAnimations\\");\\r\\n    this->comboBox2 = new QComboBox();\\r\\n    this->comboBox2->insertItem(QChart::ChartThemeLight, \\"ChartThemeLight\\", \\"ChartThemeLight\\");\\r\\n    this->comboBox2->insertItem(QChart::ChartThemeBlueCerulean, \\"ChartThemeBlueCerulean\\", \\"ChartThemeBlueCerulean\\");\\r\\n    this->comboBox2->insertItem(QChart::ChartThemeDark, \\"ChartThemeDark\\", \\"ChartThemeDark\\");\\r\\n    this->comboBox2->insertItem(QChart::ChartThemeBrownSand, \\"ChartThemeBrownSand\\", \\"ChartThemeBrownSand\\");\\r\\n    this->comboBox2->insertItem(QChart::ChartThemeBlueNcs, \\"ChartThemeBlueNcs\\", \\"ChartThemeBlueNcs\\");\\r\\n    this->comboBox2->insertItem(QChart::ChartThemeHighContrast, \\"ChartThemeHighContrast\\", \\"ChartThemeHighContrast\\");\\r\\n    this->comboBox2->insertItem(QChart::ChartThemeBlueIcy, \\"ChartThemeBlueIcy\\", \\"ChartThemeBlueIcy\\");\\r\\n    this->comboBox2->insertItem(QChart::ChartThemeQt, \\"ChartThemeQt\\", \\"ChartThemeQt\\");\\r\\n    QFormLayout *layout9 = new QFormLayout();\\r\\n    layout9->addRow(\\"动画效果\\", this->comboBox1);\\r\\n    layout9->addRow(\\"主题\\", this->comboBox2);\\r\\n    groupBox14->setLayout(layout9);\\r\\n\\r\\n    QVBoxLayout *layout10 = new QVBoxLayout();\\r\\n    layout10->addWidget(groupBox11);\\r\\n    layout10->addWidget(groupBox12);\\r\\n    layout10->addWidget(groupBox13);\\r\\n    layout10->addWidget(groupBox14);\\r\\n    this->groupBox1->setLayout(layout10);\\r\\n}\\r\\nvoid MainWindow31::initGroupBox2Widgets()\\r\\n{\\r\\n    QGroupBox *groupBox21 = new QGroupBox();\\r\\n    groupBox21->setTitle(\\"选择操作序列\\");\\r\\n    this->radioButton5 = new QRadioButton();\\r\\n    this->radioButton5->setText(\\"Sin曲线\\");\\r\\n    this->radioButton6 = new QRadioButton();\\r\\n    this->radioButton6->setText(\\"Cos曲线\\");\\r\\n    QGridLayout *layout1 = new QGridLayout();\\r\\n    layout1->addWidget(this->radioButton5, 0, 0);\\r\\n    layout1->addWidget(this->radioButton6, 0, 1);\\r\\n    groupBox21->setLayout(layout1);\\r\\n\\r\\n    QGroupBox *groupBox22 = new QGroupBox();\\r\\n    groupBox22->setTitle(\\"曲线外观\\");\\r\\n    this->lineEdit2 = new QLineEdit();\\r\\n    this->button5 = new QPushButton();\\r\\n    this->button5->setText(\\"设置序列名称\\");\\r\\n    QHBoxLayout *layout2 = new QHBoxLayout();\\r\\n    layout2->addWidget(this->lineEdit2);\\r\\n    layout2->addWidget(this->button5);\\r\\n    this->checkBox3 = new QCheckBox();\\r\\n    this->checkBox3->setText(\\"序列可见\\");\\r\\n    this->checkBox4 = new QCheckBox();\\r\\n    this-> checkBox4->setText(\\"数据点可见\\");\\r\\n    QHBoxLayout *layout3 = new QHBoxLayout();\\r\\n    layout3->addWidget(this->checkBox3);\\r\\n    layout3->addWidget(this->checkBox4);\\r\\n    this->button6 = new QPushButton();\\r\\n    this->button6->setText(\\"曲线颜色\\");\\r\\n    this->button7 = new QPushButton();\\r\\n    this->button7->setText(\\"曲线pen\\");\\r\\n    QHBoxLayout *layout4 = new QHBoxLayout();\\r\\n    layout4->addWidget(this->button6);\\r\\n    layout4->addWidget(this->button7);\\r\\n    QLabel *label1 = new QLabel();\\r\\n    label1->setText(\\"透明度\\");\\r\\n    this->slider1 = new QSlider();\\r\\n    this->slider1->setOrientation(Qt::Horizontal);\\r\\n    QHBoxLayout *layout5 = new QHBoxLayout();\\r\\n    layout5->addWidget(label1);\\r\\n    layout5->addWidget(this->slider1);\\r\\n    QVBoxLayout *layout6 = new QVBoxLayout();\\r\\n    layout6->addLayout(layout2);\\r\\n    layout6->addLayout(layout3);\\r\\n    layout6->addLayout(layout4);\\r\\n    layout6->addLayout(layout5);\\r\\n    groupBox22->setLayout(layout6);\\r\\n\\r\\n    QGroupBox *groupBox23 = new QGroupBox();\\r\\n    groupBox23->setTitle(\\"数据点标签\\");\\r\\n    this->checkBox5 = new QCheckBox();\\r\\n    this->checkBox5->setText(\\"数据点标签可见\\");\\r\\n    this->button8 = new QPushButton();\\r\\n    this->button8->setText(\\"标签颜色\\");\\r\\n    this->button9 = new QPushButton();\\r\\n    this->button9->setText(\\"标签字体\\");\\r\\n    QVBoxLayout *layout7 = new QVBoxLayout();\\r\\n    layout7->addWidget(this->checkBox5);\\r\\n    layout7->addWidget(this->button8);\\r\\n    layout7->addWidget(this->button9);\\r\\n    groupBox23->setLayout(layout7);\\r\\n\\r\\n    QGroupBox *groupBox24 = new QGroupBox();\\r\\n    groupBox24->setTitle(\\"标签格式\\");\\r\\n    this->radioButton5 = new QRadioButton();\\r\\n    this->radioButton5->setText(\\"@yPoint\\");\\r\\n    this->radioButton6 = new QRadioButton();\\r\\n    this->radioButton6->setText(\\"(@xPoint, @yPoint)\\");\\r\\n    QVBoxLayout *layout8 = new QVBoxLayout();\\r\\n    layout8->addWidget(this->radioButton5);\\r\\n    layout8->addWidget(this->radioButton6);\\r\\n    groupBox24->setLayout(layout8);\\r\\n\\r\\n    QVBoxLayout *layout = new QVBoxLayout();\\r\\n    layout->addWidget(groupBox21);\\r\\n    layout->addWidget(groupBox22);\\r\\n    layout->addWidget(groupBox23);\\r\\n    layout->addWidget(groupBox24);\\r\\n    this->groupBox2->setLayout(layout);\\r\\n}\\r\\n\\r\\nvoid MainWindow31::initGroupBox3Widgets()\\r\\n{\\r\\n    QGroupBox *groupBox31 = new QGroupBox();\\r\\n    groupBox31->setTitle(\\"设置坐标轴对象\\");\\r\\n    this->radioButton7 = new QRadioButton();\\r\\n    this->radioButton7->setText(\\"X轴\\");\\r\\n    this->radioButton8 = new QRadioButton();\\r\\n    this->radioButton8->setText(\\"Y轴\\");\\r\\n    QHBoxLayout *layout1 = new QHBoxLayout();\\r\\n    layout1->addWidget(this->radioButton7);\\r\\n    layout1->addWidget(this->radioButton8);\\r\\n    groupBox31->setLayout(layout1);\\r\\n\\r\\n    QGroupBox *groupBox32 = new QGroupBox();\\r\\n    groupBox32->setTitle(\\"坐标轴\\");\\r\\n    this->spinBox5 = new QSpinBox();\\r\\n    this->spinBox6 = new QSpinBox();\\r\\n    this->checkBox5 = new QCheckBox();\\r\\n    this->checkBox5->setText(\\"isVisible\\");\\r\\n    this->button10 = new QPushButton();\\r\\n    this->button10->setText(\\"设置坐标范围\\");\\r\\n    QFormLayout *layout2 = new QFormLayout();\\r\\n    layout2->addRow(\\"最大值\\", this->spinBox5);\\r\\n    layout2->addRow(\\"最小值\\", this->spinBox6);\\r\\n    layout2->addRow(\\"\\", this->checkBox5);\\r\\n    layout2->addRow(\\"\\", this->button10);\\r\\n    groupBox32->setLayout(layout2);\\r\\n\\r\\n    QGroupBox *groupBox33 = new QGroupBox();\\r\\n    groupBox33->setTitle(\\"坐标轴标题\\");\\r\\n    this->lineEdit3 = new QLineEdit();\\r\\n    this->button11 = new QPushButton();\\r\\n    this->button11->setText(\\"设置坐标轴标题\\");\\r\\n    QHBoxLayout *layout3 = new QHBoxLayout();\\r\\n    layout3->addWidget(this->lineEdit3);\\r\\n    layout3->addWidget(this->button11);\\r\\n    groupBox33->setLayout(layout3);\\r\\n\\r\\n    QVBoxLayout *layout = new QVBoxLayout();\\r\\n    layout->addWidget(groupBox31);\\r\\n    layout->addWidget(groupBox32);\\r\\n    layout->addWidget(groupBox33);\\r\\n    this->groupBox3->setLayout(layout);\\r\\n}\\r\\n\\r\\nvoid MainWindow31::createChart()\\r\\n{\\r\\n    QChart *chart = new QChart();\\r\\n    chart->setTitle(\\"函数曲线\\");\\r\\n    this->chartView->setChart(chart);\\r\\n    this->chartView->setRenderHint(QPainter::Antialiasing);\\r\\n\\r\\n    QLineSeries *series0 = new QLineSeries();\\r\\n    QLineSeries *series1 = new QLineSeries();\\r\\n    series0->setName(\\"Sin 曲线\\");\\r\\n    series1->setName(\\"Cos 曲线\\");\\r\\n    this->currentSeries = series0;\\r\\n\\r\\n    QPen pen;\\r\\n    pen.setStyle(Qt::DotLine);\\r\\n    pen.setWidth(1);\\r\\n    pen.setColor(Qt::green);\\r\\n    series0->setPen(pen);\\r\\n    pen.setColor(Qt::blue);\\r\\n    series1->setPen(pen);\\r\\n    chart->addSeries(series0);\\r\\n    chart->addSeries(series1);\\r\\n\\r\\n    QValueAxis *axisX = new QValueAxis();\\r\\n    axisX->setRange(0, 10);\\r\\n    axisX->setLabelFormat(\\"%.1f\\");\\r\\n    axisX->setTickCount(11);\\r\\n    axisX->setMinorTickCount(4);\\r\\n    axisX->setTitleText(\\"time(second)\\");\\r\\n\\r\\n    QValueAxis *axisY = new QValueAxis();\\r\\n    axisY->setRange(-1, 1);\\r\\n    axisY->setTickCount(5);\\r\\n    axisY->setLabelFormat(\\"%。2f\\");\\r\\n    axisY->setMinorTickCount(4);\\r\\n    axisY->setTitleText(\\"value\\");\\r\\n\\r\\n    chart->setAxisX(axisX, series0);\\r\\n    chart->setAxisX(axisX, series1);\\r\\n    chart->setAxisY(axisY, series0);\\r\\n    chart->setAxisY(axisY, series1);\\r\\n}\\r\\n\\r\\nvoid MainWindow31::prepareData()\\r\\n{\\r\\n    QLineSeries *series0 = (QLineSeries *)this->chartView->chart()->series().at(0);\\r\\n    QLineSeries *series1 = (QLineSeries *)this->chartView->chart()->series().at(1);\\r\\n\\r\\n    series0->clear();\\r\\n    series1->clear();\\r\\n    qsrand(QTime::currentTime().second());\\r\\n    qreal t=0, y1, y2, intv=0.1;\\r\\n    qreal rd;\\r\\n    int count = 100;\\r\\n    for(int i=0; i<count; i++)\\r\\n    {\\r\\n        rd = (qrand() % 10) - 5;\\r\\n        y1 = qSin(t) + rd / 50;\\r\\n        series0->append(t, y1);\\r\\n        rd = (qrand() % 10) - 5;\\r\\n        y2 = qCos(t) + rd / 50;\\r\\n        series1->append(t, y2);\\r\\n        t += intv;\\r\\n    }\\r\\n}\\r\\n\\r\\nvoid MainWindow31::updateFromChart()\\r\\n{\\r\\n    QChart *chart = this->chartView->chart();\\r\\n\\r\\n    QMargins margins = chart->margins();\\r\\n    // qDebug() << margins.left() << margins.right() << margins.top() << margins.bottom();\\r\\n\\r\\n    this->spinBox1->setValue(margins.left());\\r\\n    this->spinBox2->setValue(margins.right());\\r\\n    this->spinBox3->setValue(margins.top());\\r\\n    this->spinBox4->setValue(margins.bottom());\\r\\n}\\r\\n\\r\\nvoid MainWindow31::action1_triggered()\\r\\n{\\r\\n    // 刷新绘图\\r\\n}\\r\\n\\r\\nvoid MainWindow31::action2_triggered()\\r\\n{\\r\\n    // 放大\\r\\n}\\r\\n\\r\\nvoid MainWindow31::action3_triggered()\\r\\n{\\r\\n    // 缩小\\r\\n}\\r\\n\\r\\nvoid MainWindow31::action4_triggered()\\r\\n{\\r\\n    // 原始大小\\r\\n}\\r\\n\\r\\nvoid MainWindow31::action5_triggered()\\r\\n{\\r\\n    // 退出\\r\\n    this->close();\\r\\n}\\r\\n\\r\\nvoid MainWindow31::button1_clicked()\\r\\n{\\r\\n    // 设置图表标题\\r\\n    if(this->lineEdit1->text() != NULL)\\r\\n    {\\r\\n        this->chartView->chart()->setTitle(this->lineEdit1->text());\\r\\n    }\\r\\n}\\r\\n\\r\\nvoid MainWindow31::button2_clicked()\\r\\n{\\r\\n    // 设置图表标题字体\\r\\n    QFont font = this->chartView->chart()->legend()->font();\\r\\n    bool ok = false;\\r\\n    font = QFontDialog::getFont(&ok, font);\\r\\n    if(ok)\\r\\n    {\\r\\n        this->chartView->chart()->setTitleFont(font);\\r\\n    }\\r\\n}\\r\\n\\r\\nvoid MainWindow31::button3_clicked()\\r\\n{\\r\\n    // 设置图例字体\\r\\n    QFont font = this->chartView->chart()->legend()->font();\\r\\n    bool ok = false;\\r\\n    font = QFontDialog::getFont(&ok, font);\\r\\n    if(ok)\\r\\n    {\\r\\n        this->chartView->chart()->legend()->setFont(font);\\r\\n    }\\r\\n}\\r\\n\\r\\nvoid MainWindow31::button4_clicked()\\r\\n{\\r\\n    // 设置图例标签颜色\\r\\n    QColor color = this->chartView->chart()->legend()->color();\\r\\n    color = QColorDialog::getColor(color, this, \\"选择颜色\\");\\r\\n    if(color.isValid())\\r\\n    {\\r\\n        this->chartView->chart()->legend()->setColor(color);\\r\\n    }\\r\\n}\\r\\n\\r\\nvoid MainWindow31::button5_clicked()\\r\\n{\\r\\n    // 设置序列名称\\r\\n}\\r\\n\\r\\nvoid MainWindow31::button6_clicked()\\r\\n{\\r\\n    // 设置序列曲线颜色\\r\\n}\\r\\n\\r\\nvoid MainWindow31::button7_clicked()\\r\\n{\\r\\n    // 设置序列曲线 pen\\r\\n}\\r\\n\\r\\nvoid MainWindow31::button8_clicked()\\r\\n{\\r\\n    // 设置序列数据点标签颜色\\r\\n}\\r\\n\\r\\nvoid MainWindow31::button9_clicked()\\r\\n{\\r\\n    // 设置序列数据点标签字体\\r\\n}\\r\\n\\r\\nvoid MainWindow31::button10_clicked()\\r\\n{\\r\\n    // 设置坐标轴坐标范围\\r\\n}\\r\\n\\r\\nvoid MainWindow31::button11_clicked()\\r\\n{\\r\\n    // 设置坐标轴标题\\r\\n}\\r\\n\\r\\nQPenDialog::QPenDialog(QWidget *parent) : QDialog(parent)\\r\\n{\\r\\n    this->setWindowTitle(\\"QPen 属性对话框\\");\\r\\n\\r\\n    this->groupBox1 = new QGroupBox();\\r\\n    this->groupBox1->setTitle(\\"Pen 属性设置\\");\\r\\n    QFormLayout *layout1 = new QFormLayout();\\r\\n    this->comboBox1 = new QComboBox();\\r\\n    this->comboBox1->insertItem(Qt::NoPen, \\"NoPen\\", \\"NoPen\\");\\r\\n    this->comboBox1->insertItem(Qt::SolidLine, \\"SolidLine\\", \\"SolidLine\\");\\r\\n    this->comboBox1->insertItem(Qt::DashLine, \\"DashLine\\", \\"DashLine\\");\\r\\n    this->comboBox1->insertItem(Qt::DotLine, \\"DotLine\\", \\"DotLine\\");\\r\\n    this->comboBox1->insertItem(Qt::DashDotLine, \\"DashDotLine\\", \\"DashDotLine\\");\\r\\n    this->comboBox1->insertItem(Qt::DashDotDotLine, \\"DashDotDotLine\\", \\"DashDotDotLine\\");\\r\\n    this->comboBox1->insertItem(Qt::CustomDashLine, \\"CustomDashLine\\", \\"CustomDashLine\\");\\r\\n\\r\\n    this->spinBox1 = new QSpinBox();\\r\\n    this->colorButton = new QPushButton();\\r\\n    layout1->addRow(\\"线型\\", this->comboBox1);\\r\\n    layout1->addRow(\\"线宽\\", this->spinBox1);\\r\\n    layout1->addRow(\\"颜色\\", this->colorButton);\\r\\n\\r\\n    this->okButton = new QPushButton();\\r\\n    this->okButton->setText(\\"确定\\");\\r\\n    this->cancelButton = new QPushButton();\\r\\n    this->cancelButton->setText(\\"取消\\");\\r\\n    QHBoxLayout *layout2 = new QHBoxLayout();\\r\\n    layout2->addWidget(this->okButton);\\r\\n    layout2->addWidget(this->cancelButton);\\r\\n\\r\\n    QVBoxLayout *layout3 = new QVBoxLayout();\\r\\n    layout3->addLayout(layout1);\\r\\n    layout3->addLayout(layout2);\\r\\n    this->groupBox1->setLayout(layout3);\\r\\n\\r\\n    QVBoxLayout *layout4 = new QVBoxLayout();\\r\\n    layout4->addWidget(this->groupBox1);\\r\\n    this->setLayout(layout4);\\r\\n\\r\\n    this->connect(this->colorButton, SIGNAL(clicked()), this, SLOT(colorButton_clicked()));\\r\\n    this->connect(this->okButton, SIGNAL(clicked()), this, SLOT(okButton_clicked()));\\r\\n    this->connect(this->cancelButton, SIGNAL(clicked()), this, SLOT(reject()));\\r\\n}\\r\\n\\r\\nQPenDialog::~QPenDialog()\\r\\n{\\r\\n\\r\\n}\\r\\n\\r\\nconst QPen &QPenDialog::getPen()\\r\\n{\\r\\n    this->pen.setStyle(Qt::PenStyle(this->comboBox1->currentIndex()));\\r\\n    this->pen.setWidth(this->spinBox1->value());\\r\\n    QColor color = this->colorButton->palette().color(QPalette::Button);\\r\\n    this->pen.setColor(color);\\r\\n    return this->pen;\\r\\n}\\r\\n\\r\\nvoid QPenDialog::setPen(const QPen &newPen)\\r\\n{\\r\\n    this->pen = newPen;\\r\\n    this->spinBox1->setValue(pen.width());\\r\\n\\r\\n    this->comboBox1->setCurrentIndex(pen.style());\\r\\n\\r\\n    QColor color = this->pen.color();\\r\\n    this->colorButton->setAutoFillBackground(true);\\r\\n    this->colorButton->setStyleSheet(QString(\\"background-color:rgb(%1, %2, %3)\\")\\r\\n                                     .arg(color.red())\\r\\n                                     .arg(color.green())\\r\\n                                     .arg(color.blue()));\\r\\n}\\r\\n\\r\\nQPen QPenDialog::getPen(QPen pen, bool &ok)\\r\\n{\\r\\n    QPenDialog *dialog = new QPenDialog();\\r\\n    dialog->setPen(pen);\\r\\n    int result = dialog->exec();\\r\\n    if(result == QDialog::Accepted)\\r\\n    {\\r\\n        pen = dialog->getPen();\\r\\n        ok = true;\\r\\n    }\\r\\n    else\\r\\n    {\\r\\n        ok = false;\\r\\n    }\\r\\n    delete dialog;\\r\\n    return pen;\\r\\n}\\r\\n\\r\\nvoid QPenDialog::colorButton_clicked()\\r\\n{\\r\\n\\r\\n}\\r\\n\\r\\nvoid QPenDialog::okButton_clicked()\\r\\n{\\r\\n\\r\\n}\\r\\n\\r\\n```","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},"160fa4df466ebd0fbcabe512ce770655d8716c2cded1275b6c3d3841c8e0e7f9":{"title":"QChart 简单绘图","hash":"160fa4df466ebd0fbcabe512ce770655d8716c2cded1275b6c3d3841c8e0e7f9","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2022-02-09","update":"2022-02-09","content":"\\r\\n```c++\\r\\n#if _MSC_VER >= 1600\\r\\n#pragma execution_character_set(\\"utf-8\\")\\r\\n#endif\\r\\n\\r\\n#include \\"mainwindow30.h\\"\\r\\n\\r\\nMainWindow30::MainWindow30(QString title, QWidget *parent) : QMainWindow(parent)\\r\\n{\\r\\n    this->setWindowTitle(title);\\r\\n    this->createChart();\\r\\n}\\r\\n\\r\\nvoid MainWindow30::createChart()\\r\\n{\\r\\n    QChartView *chartView = new QChartView();\\r\\n    QChart *chart = new QChart();\\r\\n    chart->setTitle(\\"简单函数曲线\\");\\r\\n    chartView->setChart(chart);\\r\\n    chartView->setRubberBand(QChartView::NoRubberBand);\\r\\n    this->setCentralWidget(chartView);\\r\\n\\r\\n    QLineSeries *series1 = new QLineSeries();\\r\\n    QLineSeries *series2 = new QLineSeries();\\r\\n    series1->setName(\\"Sin 曲线\\");\\r\\n    series2->setName(\\"Cos 曲线\\");\\r\\n\\r\\n    qreal t=0, y1, y2, intv=0.1;\\r\\n    int count = 100;\\r\\n    for(int i=0; i<count; i++)\\r\\n    {\\r\\n        y1 = qSin(t);\\r\\n        series1->append(t, y1);\\r\\n        y2 = qCos(t + 20);\\r\\n        series2->append(t, y2);\\r\\n        t += intv;\\r\\n    }\\r\\n    chart->addSeries(series1);\\r\\n    chart->addSeries(series2);\\r\\n\\r\\n    QValueAxis *axisX = new QValueAxis();\\r\\n    axisX->setRange(0, 10);\\r\\n    axisX->setTitleText(\\"time(second)\\");\\r\\n\\r\\n    QValueAxis *axisY = new QValueAxis();\\r\\n    axisY->setRange(-1, 1);\\r\\n    axisY->setTitleText(\\"value\\");\\r\\n\\r\\n    // deprecated\\r\\n//    chart->setAxisX(axisX, series1);\\r\\n//    chart->setAxisY(axisY, series1);\\r\\n\\r\\n//    chart->setAxisX(axisX, series2);\\r\\n//    chart->setAxisY(axisY, series2);\\r\\n\\r\\n    chart->createDefaultAxes();\\r\\n    chart->axes(Qt::Horizontal).back()->setTitleText(axisX->titleText());\\r\\n    chart->axes(Qt::Vertical).back()->setTitleText(axisY->titleText());\\r\\n}\\r\\n\\r\\n```","author":{"username":"yhw-miracle"},"reader":2,"is_comment":true,"comments":[]},"8706099c293f75e24cb2d3908adf7a2ca5eb121b0632c52da2117df168de8e72":{"title":"Graphics View 绘图","hash":"8706099c293f75e24cb2d3908adf7a2ca5eb121b0632c52da2117df168de8e72","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2022-02-08","update":"2022-02-08","content":"\\r\\n```c++\\r\\n#if _MSC_VER >= 1600\\r\\n#pragma execution_character_set(\\"utf-8\\")\\r\\n#endif\\r\\n\\r\\n#include \\"mainwindow29.h\\"\\r\\n\\r\\n#include <QDebug>\\r\\n\\r\\nMainWindow29::MainWindow29(QString title, QWidget *parent) : QMainWindow(parent)\\r\\n{\\r\\n    this->setWindowTitle(title);\\r\\n\\r\\n    this->toolBar1 = new QToolBar();\\r\\n    this->action1 = new QAction();\\r\\n    this->action1->setText(\\"放大\\");\\r\\n    this->action2 = new QAction();\\r\\n    this->action2->setText(\\"缩小\\");\\r\\n    this->action3 = new QAction();\\r\\n    this->action3->setText(\\"恢复\\");\\r\\n    this->action4 = new QAction();\\r\\n    this->action4->setText(\\"左旋转\\");\\r\\n    this->action5 = new QAction();\\r\\n    this->action5->setText(\\"右旋转\\");\\r\\n    this->action6 = new QAction();\\r\\n    this->action6->setText(\\"前置\\");\\r\\n    this->action7 = new QAction();\\r\\n    this->action7->setText(\\"后置\\");\\r\\n    this->action8 = new QAction();\\r\\n    this->action8->setText(\\"组合\\");\\r\\n    this->action9 = new QAction();\\r\\n    this->action9->setText(\\"打散\\");\\r\\n    this->action10 = new QAction();\\r\\n    this->action10->setText(\\"删除\\");\\r\\n    this->action11 = new QAction();\\r\\n    this->action11->setText(\\"退出\\");\\r\\n    this->toolBar1->addAction(this->action1);\\r\\n    this->toolBar1->addAction(this->action2);\\r\\n    this->toolBar1->addAction(this->action3);\\r\\n    this->toolBar1->addAction(this->action4);\\r\\n    this->toolBar1->addAction(this->action5);\\r\\n    this->toolBar1->addAction(this->action6);\\r\\n    this->toolBar1->addAction(this->action7);\\r\\n    this->toolBar1->addAction(this->action8);\\r\\n    this->toolBar1->addAction(this->action9);\\r\\n    this->toolBar1->addAction(this->action10);\\r\\n    this->toolBar1->addAction(this->action11);\\r\\n\\r\\n    this->toolBar2 = new QToolBar();\\r\\n    this->action12 = new QAction();\\r\\n    this->action12->setText(\\"矩形\\");\\r\\n    this->action13 = new QAction();\\r\\n    this->action13->setText(\\"椭圆形\\");\\r\\n    this->action14 = new QAction();\\r\\n    this->action14->setText(\\"圆形\\");\\r\\n    this->action15 = new QAction();\\r\\n    this->action15->setText(\\"三角形\\");\\r\\n    this->action16 = new QAction();\\r\\n    this->action16->setText(\\"梯形\\");\\r\\n    this->action17 = new QAction();\\r\\n    this->action17->setText(\\"直线\\");\\r\\n    this->action18 = new QAction();\\r\\n    this->action18->setText(\\"文字\\");\\r\\n    this->toolBar2->addAction(this->action12);\\r\\n    this->toolBar2->addAction(this->action13);\\r\\n    this->toolBar2->addAction(this->action14);\\r\\n    this->toolBar2->addAction(this->action15);\\r\\n    this->toolBar2->addAction(this->action16);\\r\\n    this->toolBar2->addAction(this->action17);\\r\\n    this->toolBar2->addAction(this->action18);\\r\\n\\r\\n    this->addToolBar(Qt::TopToolBarArea, this->toolBar1);\\r\\n    this->addToolBar(Qt::LeftToolBarArea, this->toolBar2);\\r\\n\\r\\n    this->connect(this->action1, SIGNAL(triggered()), this, SLOT(action1_triggered()));\\r\\n    this->connect(this->action2, SIGNAL(triggered()), this, SLOT(action2_triggered()));\\r\\n    this->connect(this->action3, SIGNAL(triggered()), this, SLOT(action3_triggered()));\\r\\n    this->connect(this->action4, SIGNAL(triggered()), this, SLOT(action4_triggered()));\\r\\n    this->connect(this->action5, SIGNAL(triggered()), this, SLOT(action5_triggered()));\\r\\n    this->connect(this->action6, SIGNAL(triggered()), this, SLOT(action6_triggered()));\\r\\n    this->connect(this->action7, SIGNAL(triggered()), this, SLOT(action7_triggered()));\\r\\n    this->connect(this->action8, SIGNAL(triggered()), this, SLOT(action8_triggered()));\\r\\n    this->connect(this->action9, SIGNAL(triggered()), this, SLOT(action9_triggered()));\\r\\n    this->connect(this->action10, SIGNAL(triggered()), this, SLOT(action10_triggered()));\\r\\n    this->connect(this->action11, SIGNAL(triggered()), this, SLOT(action11_triggered()));\\r\\n    this->connect(this->action12, SIGNAL(triggered()), this, SLOT(action12_triggered()));\\r\\n    this->connect(this->action13, SIGNAL(triggered()), this, SLOT(action13_triggered()));\\r\\n    this->connect(this->action14, SIGNAL(triggered()), this, SLOT(action14_triggered()));\\r\\n    this->connect(this->action15, SIGNAL(triggered()), this, SLOT(action15_triggered()));\\r\\n    this->connect(this->action16, SIGNAL(triggered()), this, SLOT(action16_triggered()));\\r\\n    this->connect(this->action17, SIGNAL(triggered()), this, SLOT(action17_triggered()));\\r\\n    this->connect(this->action18, SIGNAL(triggered()), this, SLOT(action18_triggered()));\\r\\n\\r\\n    this->label1 = new QLabel();\\r\\n    this->label2 = new QLabel();\\r\\n    this->label3 = new QLabel();\\r\\n    this->label4 = new QLabel();\\r\\n    this->statusBar = new QStatusBar();\\r\\n    this->statusBar->addWidget(this->label1);\\r\\n    this->statusBar->addWidget(this->label2);\\r\\n    this->statusBar->addWidget(this->label3);\\r\\n    this->statusBar->addWidget(this->label4);\\r\\n    this->setStatusBar(this->statusBar);\\r\\n\\r\\n    this->mainWindow29GraphicsView1 = new MainWindow29GraphicsView();\\r\\n    this->graphicsScene1 = new QGraphicsScene(-300, -200, 600, 200);\\r\\n    this->mainWindow29GraphicsView1->setScene(this->graphicsScene1);\\r\\n    this->mainWindow29GraphicsView1->setCursor(Qt::CrossCursor);\\r\\n    this->mainWindow29GraphicsView1->setMouseTracking(true);\\r\\n    this->mainWindow29GraphicsView1->setDragMode(QGraphicsView::RubberBandDrag);\\r\\n    this->setCentralWidget(this->mainWindow29GraphicsView1);\\r\\n\\r\\n    this->connect(this->mainWindow29GraphicsView1, SIGNAL(mouseMovePoint(QPoint)), this, SLOT(mouseMovePoint(QPoint)));\\r\\n    this->connect(this->mainWindow29GraphicsView1, SIGNAL(mouseClicked(QPoint)), this, SLOT(mouseClicked(QPoint)));\\r\\n    this->connect(this->mainWindow29GraphicsView1, SIGNAL(mouseDoubleClicked(QPoint)), this, SLOT(mouseDoubleClicked(QPoint)));\\r\\n    this->connect(this->mainWindow29GraphicsView1, SIGNAL(keyPress(QKeyEvent*)), this, SLOT(keyPress(QKeyEvent*)));\\r\\n\\r\\n    qsrand(QTime::currentTime().second());\\r\\n}\\r\\n\\r\\nvoid MainWindow29::mouseMovePoint(QPoint point)\\r\\n{\\r\\n    this->label1->setText(QString(\\"View 坐标:%1,%2\\")\\r\\n                          .arg(point.x())\\r\\n                          .arg(point.y()));\\r\\n\\r\\n    QPointF scenePoint = this->mainWindow29GraphicsView1->mapToScene(point);\\r\\n    this->label2->setText(QString(\\"Scene 坐标:%1,%2\\")\\r\\n                          .arg(scenePoint.x())\\r\\n                          .arg(scenePoint.y()));\\r\\n}\\r\\n\\r\\nvoid MainWindow29::mouseClicked(QPoint point)\\r\\n{\\r\\n    QPointF scenePoint = this->mainWindow29GraphicsView1->mapToScene(point);\\r\\n    QGraphicsItem *item = this->graphicsScene1->itemAt(scenePoint, this->mainWindow29GraphicsView1->transform());\\r\\n    if(item != NULL)\\r\\n    {\\r\\n        QPointF itemPoint = item->mapFromScene(scenePoint);\\r\\n        this->label3->setText(QString(\\"Item 坐标:%1,%2\\")\\r\\n                              .arg(itemPoint.x())\\r\\n                              .arg(itemPoint.y()));\\r\\n        this->label4->setText(QString(\\"%1,%2\\")\\r\\n                              .arg(item->data(this->itemId).toString())\\r\\n                              .arg(item->data(this->itemDesciption).toString()));\\r\\n    }\\r\\n}\\r\\n\\r\\ntemplate<class T> void setBrushColor(T *item)\\r\\n{\\r\\n    QColor color = item->brush().color();\\r\\n    color = QColorDialog::getColor(color, nullptr, \\"选择填充颜色\\");\\r\\n    if(color.isValid())\\r\\n    {\\r\\n        item->setBrush(QBrush(color));\\r\\n    }\\r\\n}\\r\\n\\r\\nvoid MainWindow29::mouseDoubleClicked(QPoint point)\\r\\n{\\r\\n    QPointF scenePoint = this->mainWindow29GraphicsView1->mapToScene(point);\\r\\n    QGraphicsItem *item = this->graphicsScene1->itemAt(scenePoint, this->mainWindow29GraphicsView1->transform());\\r\\n    if(item != NULL)\\r\\n    {\\r\\n        if(item->type() == QGraphicsRectItem::Type)\\r\\n        {\\r\\n            QGraphicsRectItem *item1 = qgraphicsitem_cast<QGraphicsRectItem*>(item);\\r\\n            setBrushColor(item1);\\r\\n        }\\r\\n        else if(item->type() == QGraphicsEllipseItem::Type)\\r\\n        {\\r\\n            QGraphicsEllipseItem *item1 = qgraphicsitem_cast<QGraphicsEllipseItem*>(item);\\r\\n            setBrushColor(item1);\\r\\n        }\\r\\n        else if(item->type() == QGraphicsPolygonItem::Type)\\r\\n        {\\r\\n            QGraphicsPolygonItem *item1 = qgraphicsitem_cast<QGraphicsPolygonItem*>(item);\\r\\n            setBrushColor(item1);\\r\\n        }\\r\\n        else if(item->type() == QGraphicsLineItem::Type)\\r\\n        {\\r\\n            QGraphicsLineItem *item1 = qgraphicsitem_cast<QGraphicsLineItem*>(item);\\r\\n            QPen pen = item1->pen();\\r\\n            QColor color = pen.color();\\r\\n            color = QColorDialog::getColor(color, this, \\"选择线条颜色\\");\\r\\n            if(color.isValid())\\r\\n            {\\r\\n                pen.setColor(color);\\r\\n                item1->setPen(pen);\\r\\n            }\\r\\n        }\\r\\n        else if(item->type() == QGraphicsTextItem::Type)\\r\\n        {\\r\\n            QGraphicsTextItem *item1 = qgraphicsitem_cast<QGraphicsTextItem*>(item);\\r\\n            QFont font = item1->font();\\r\\n            bool ok = false;\\r\\n            font = QFontDialog::getFont(&ok, font, this, \\"设置字体\\");\\r\\n            if(ok)\\r\\n            {\\r\\n                item1->setFont(font);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nvoid MainWindow29::keyPress(QKeyEvent *event)\\r\\n{\\r\\n    if(this->graphicsScene1->selectedItems().count() == 1)\\r\\n    {\\r\\n        QGraphicsItem *item = this->graphicsScene1->selectedItems().at(0);\\r\\n        if(event->key() == Qt::Key_Delete)\\r\\n        {\\r\\n            this->graphicsScene1->removeItem(item);\\r\\n        }\\r\\n        else if(event->key() == Qt::Key_Space)\\r\\n        {\\r\\n            item->setRotation(90 + item->rotation());\\r\\n        }\\r\\n        else if(event->key() == Qt::Key_PageUp)\\r\\n        {\\r\\n            item->setScale(0.1 + item->scale());\\r\\n        }\\r\\n        else if(event->key() == Qt::Key_PageDown)\\r\\n        {\\r\\n            item->setScale(-0.1 + item->scale());\\r\\n        }\\r\\n        else if(event->key() == Qt::Key_Left)\\r\\n        {\\r\\n            item->setX(-1 + item->x());\\r\\n        }\\r\\n        else if(event->key() == Qt::Key_Right)\\r\\n        {\\r\\n            item->setX(1 + item->x());\\r\\n        }\\r\\n        else if(event->key() == Qt::Key_Up)\\r\\n        {\\r\\n            item->setY(-1 + item->y());\\r\\n        }\\r\\n        else if(event->key() == Qt::Key_Down)\\r\\n        {\\r\\n            item->setY(1 + item->y());\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nvoid MainWindow29::action1_triggered()\\r\\n{\\r\\n    // 放大\\r\\n    int count = this->graphicsScene1->selectedItems().count();\\r\\n    if(count == 1)\\r\\n    {\\r\\n        QGraphicsItem *item = this->graphicsScene1->selectedItems().at(0);\\r\\n        item->setScale(0.1 + item->scale());\\r\\n    }\\r\\n    else\\r\\n    {\\r\\n        this->mainWindow29GraphicsView1->scale(1.1, 1.1);\\r\\n    }\\r\\n}\\r\\n\\r\\nvoid MainWindow29::action2_triggered()\\r\\n{\\r\\n    // 缩小\\r\\n    int count = this->graphicsScene1->selectedItems().count();\\r\\n    if(count == 1)\\r\\n    {\\r\\n        QGraphicsItem *item = this->graphicsScene1->selectedItems().at(0);\\r\\n        item->setScale(item->scale() - 0.1);\\r\\n    }\\r\\n    else\\r\\n    {\\r\\n        this->mainWindow29GraphicsView1->scale(0.9, 0.9);\\r\\n    }\\r\\n}\\r\\n\\r\\nvoid MainWindow29::action3_triggered()\\r\\n{\\r\\n    // 恢复\\r\\n    int count = this->graphicsScene1->selectedItems().count();\\r\\n    if(count == 1)\\r\\n    {\\r\\n        QGraphicsItem *item = this->graphicsScene1->selectedItems().at(0);\\r\\n        item->resetTransform();\\r\\n    }\\r\\n    else\\r\\n    {\\r\\n        this->mainWindow29GraphicsView1->resetTransform();\\r\\n    }\\r\\n}\\r\\n\\r\\nvoid MainWindow29::action4_triggered()\\r\\n{\\r\\n    // 左旋转\\r\\n    int count = this->graphicsScene1->selectedItems().count();\\r\\n    if(count == 1)\\r\\n    {\\r\\n        QGraphicsItem *item = this->graphicsScene1->selectedItems().at(0);\\r\\n        item->setRotation(-30 + item->rotation());\\r\\n    }\\r\\n    else\\r\\n    {\\r\\n        this->mainWindow29GraphicsView1->rotate(-30);\\r\\n    }\\r\\n}\\r\\n\\r\\nvoid MainWindow29::action5_triggered()\\r\\n{\\r\\n    // 右旋转\\r\\n    int count = this->graphicsScene1->selectedItems().count();\\r\\n    if(count == 1)\\r\\n    {\\r\\n        QGraphicsItem *item = this->graphicsScene1->selectedItems().at(0);\\r\\n        item->setRotation(30 + item->rotation());\\r\\n    }\\r\\n    else\\r\\n    {\\r\\n        this->mainWindow29GraphicsView1->rotate(30);\\r\\n    }\\r\\n}\\r\\n\\r\\nvoid MainWindow29::action6_triggered()\\r\\n{\\r\\n    // 前置\\r\\n    int count = this->graphicsScene1->selectedItems().count();\\r\\n    if(count > 1)\\r\\n    {\\r\\n        QGraphicsItem *item = this->graphicsScene1->selectedItems().at(0);\\r\\n        item->setZValue(--this->backZ);\\r\\n    }\\r\\n}\\r\\n\\r\\nvoid MainWindow29::action7_triggered()\\r\\n{\\r\\n    // 后置\\r\\n    int count = this->graphicsScene1->selectedItems().count();\\r\\n    if(count > 1)\\r\\n    {\\r\\n        QGraphicsItem *item = this->graphicsScene1->selectedItems().at(0);\\r\\n        item->setZValue(++this->frontZ);\\r\\n    }\\r\\n}\\r\\n\\r\\nvoid MainWindow29::action8_triggered()\\r\\n{\\r\\n    // 组合\\r\\n    QGraphicsItemGroup *group = new QGraphicsItemGroup();\\r\\n    this->graphicsScene1->addItem(group);\\r\\n    int count = this->graphicsScene1->selectedItems().count();\\r\\n    if(count > 0)\\r\\n    {\\r\\n        for(int i=0; i<count; i++)\\r\\n        {\\r\\n            QGraphicsItem *item = this->graphicsScene1->selectedItems().at(0);\\r\\n            item->setSelected(false);\\r\\n            item->clearFocus();\\r\\n            group->addToGroup(item);\\r\\n        }\\r\\n        group->setFlags(QGraphicsItem::ItemIsMovable | QGraphicsItem::ItemIsSelectable | QGraphicsItem::ItemIsFocusable);\\r\\n        group->setZValue(++this->frontZ);\\r\\n        this->graphicsScene1->clearSelection();\\r\\n        group->setSelected(true);\\r\\n    }\\r\\n}\\r\\n\\r\\nvoid MainWindow29::action9_triggered()\\r\\n{\\r\\n    // 打散\\r\\n    int count = this->graphicsScene1->selectedItems().count();\\r\\n    if(count == 1)\\r\\n    {\\r\\n        QGraphicsItemGroup *group = (QGraphicsItemGroup*)this->graphicsScene1->selectedItems().at(0);\\r\\n        this->graphicsScene1->destroyItemGroup(group);\\r\\n    }\\r\\n}\\r\\n\\r\\nvoid MainWindow29::action10_triggered()\\r\\n{\\r\\n    // 删除\\r\\n    int count = this->graphicsScene1->selectedItems().count();\\r\\n    for(int i=0; i<count; i++)\\r\\n    {\\r\\n        QGraphicsItem *item = this->graphicsScene1->selectedItems().at(i);\\r\\n        this->graphicsScene1->removeItem(item);\\r\\n\\r\\n    }\\r\\n}\\r\\n\\r\\nvoid MainWindow29::action11_triggered()\\r\\n{\\r\\n    // 退出\\r\\n    this->close();\\r\\n}\\r\\n\\r\\nvoid MainWindow29::action12_triggered()\\r\\n{\\r\\n    // 矩形\\r\\n}\\r\\n\\r\\nvoid MainWindow29::action13_triggered()\\r\\n{\\r\\n    // 椭圆\\r\\n    QGraphicsEllipseItem *item = new QGraphicsEllipseItem(-50, -30, 100, 60);\\r\\n    item->setFlags(QGraphicsItem::ItemIsMovable | QGraphicsItem::ItemIsSelectable | QGraphicsItem::ItemIsFocusable);\\r\\n    item->setBrush(QBrush(Qt::green));\\r\\n    item->setZValue(++this->frontZ);\\r\\n    item->setPos(-50 + (qrand() % 100), -50 + (qrand() % 100));\\r\\n    item->setData(this->itemId, ++this->itemNum);\\r\\n    item->setData(this->itemDesciption, \\"椭圆\\");\\r\\n\\r\\n    this->graphicsScene1->addItem(item);\\r\\n    this->graphicsScene1->clearSelection();\\r\\n    item->setSelected(true);\\r\\n}\\r\\n\\r\\nvoid MainWindow29::action14_triggered()\\r\\n{\\r\\n    // 圆形\\r\\n    QGraphicsEllipseItem *item = new QGraphicsEllipseItem(-20, -20, 50, 50);\\r\\n    item->setFlags(QGraphicsItem::ItemIsMovable | QGraphicsItem::ItemIsSelectable | QGraphicsItem::ItemIsFocusable);\\r\\n    item->setBrush(QBrush(Qt::yellow));\\r\\n    item->setZValue(++this->frontZ);\\r\\n    item->setPos(-50 + (qrand() % 100), -50 + (qrand() % 100));\\r\\n    item->setData(this->itemId, ++this->itemNum);\\r\\n    item->setData(this->itemDesciption, \\"圆\\");\\r\\n\\r\\n    this->graphicsScene1->addItem(item);\\r\\n    this->graphicsScene1->clearSelection();\\r\\n    item->setSelected(true);\\r\\n}\\r\\n\\r\\nvoid MainWindow29::action15_triggered()\\r\\n{\\r\\n    // 三角形\\r\\n}\\r\\nvoid MainWindow29::action16_triggered()\\r\\n{\\r\\n    // 梯形\\r\\n}\\r\\nvoid MainWindow29::action17_triggered()\\r\\n{\\r\\n    // 直线\\r\\n}\\r\\nvoid MainWindow29::action18_triggered()\\r\\n{\\r\\n    // 文字\\r\\n}\\r\\n\\r\\nMainWindow29GraphicsView::MainWindow29GraphicsView(QWidget *parent) : QGraphicsView(parent)\\r\\n{\\r\\n\\r\\n}\\r\\n\\r\\nMainWindow29GraphicsView::~MainWindow29GraphicsView()\\r\\n{\\r\\n\\r\\n}\\r\\n\\r\\nvoid MainWindow29GraphicsView::mouseMoveEvent(QMouseEvent *event)\\r\\n{\\r\\n    QPoint point = event->pos();\\r\\n    emit this->mouseMovePoint(point);\\r\\n    QGraphicsView::mouseMoveEvent(event);\\r\\n}\\r\\n\\r\\nvoid MainWindow29GraphicsView::mousePressEvent(QMouseEvent *event)\\r\\n{\\r\\n    if(event->button() == Qt::LeftButton)\\r\\n    {\\r\\n        QPoint point = event->pos();\\r\\n        emit this->mouseClicked(point);\\r\\n    }\\r\\n    QGraphicsView::mousePressEvent(event);\\r\\n}\\r\\n\\r\\nvoid MainWindow29GraphicsView::mouseDoubleClickEvent(QMouseEvent *event)\\r\\n{\\r\\n    if(event->button() == Qt::LeftButton)\\r\\n    {\\r\\n        QPoint point = event->pos();\\r\\n        emit this->mouseDoubleClicked(point);\\r\\n    }\\r\\n    QGraphicsView::mouseDoubleClickEvent(event);\\r\\n}\\r\\n\\r\\nvoid MainWindow29GraphicsView::keyPressEvent(QKeyEvent *event)\\r\\n{\\r\\n    emit this->keyPress(event);\\r\\n    QGraphicsView::keyPressEvent(event);\\r\\n}\\r\\n\\r\\n```","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},"5853fec45ce789cb10e5c9c2eb3e4f93e17c94c0aece88ac80bd598dd46fc645":{"title":"view scene item 基本关系和坐标变换","hash":"5853fec45ce789cb10e5c9c2eb3e4f93e17c94c0aece88ac80bd598dd46fc645","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2022-02-07","update":"2022-02-07","content":"\\r\\n```c++\\r\\n#if _MSC_VER >= 1600\\r\\n#pragma execution_character_set(\\"utf-8\\")\\r\\n#endif\\r\\n\\r\\n#include \\"mainwindow28.h\\"\\r\\n\\r\\nMainWindow28::MainWindow28(QString title, QWidget *parent) : QMainWindow(parent)\\r\\n{\\r\\n    this->setWindowTitle(title);\\r\\n\\r\\n    this->statusBar1 = new QStatusBar();\\r\\n    this->label3 = new QLabel();\\r\\n    this->label3->setText(\\"View 坐标:\\");\\r\\n    this->label4 = new QLabel();\\r\\n    this->label4->setText(\\"Scene 坐标:\\");\\r\\n    this->label5 = new QLabel();\\r\\n    this->label5->setText(\\"Item 坐标:\\");\\r\\n    this->statusBar1->addWidget(this->label3);\\r\\n    this->statusBar1->addWidget(this->label4);\\r\\n    this->statusBar1->addWidget(this->label5);\\r\\n    this->setStatusBar(this->statusBar1);\\r\\n\\r\\n    this->label1 = new QLabel();\\r\\n    this->label2 = new QLabel();\\r\\n    QVBoxLayout *layout1 = new QVBoxLayout();\\r\\n    layout1->addWidget(this->label1);\\r\\n    layout1->addWidget(this->label2);\\r\\n    this->groupBox1 = new QGroupBox();\\r\\n    this->groupBox1->setLayout(layout1);\\r\\n\\r\\n    this->graphicsViewWithMouseEvent = new QGraphicsViewWithMouseEvent();\\r\\n    this->graphicsViewWithMouseEvent->setCursor(Qt::CrossCursor);\\r\\n    this->graphicsViewWithMouseEvent->setMouseTracking(true);\\r\\n    this->graphicsViewWithMouseEvent->setDragMode(QGraphicsView::RubberBandDrag);\\r\\n    this->connect(this->graphicsViewWithMouseEvent, SIGNAL(mouseMovePoint(QPoint)), this, SLOT(mouseMovePoint(QPoint)));\\r\\n    this->connect(this->graphicsViewWithMouseEvent, SIGNAL(mouseClicked(QPoint)), this, SLOT(mouseClicked(QPoint)));\\r\\n\\r\\n    QVBoxLayout *layout2 = new QVBoxLayout();\\r\\n    layout2->addWidget(this->groupBox1);\\r\\n    layout2->addWidget(this->graphicsViewWithMouseEvent);\\r\\n    QWidget *widget = new QWidget();\\r\\n    widget->setLayout(layout2);\\r\\n    this->setCentralWidget(widget);\\r\\n\\r\\n    this->initGraphicsSystem();\\r\\n}\\r\\n\\r\\nvoid MainWindow28::mouseMovePoint(QPoint point)\\r\\n{\\r\\n    this->label3->setText(QString(\\"View 坐标:%1,%2\\").arg(point.x()).arg(point.y()));\\r\\n\\r\\n    QPointF scenePoint = this->graphicsViewWithMouseEvent->mapToScene(point);\\r\\n    this->label4->setText(QString(\\"scene 坐标:%1,%2\\").arg(scenePoint.x()).arg(scenePoint.y()));\\r\\n}\\r\\n\\r\\nvoid MainWindow28::mouseClicked(QPoint point)\\r\\n{\\r\\n    QPointF scenePoint = this->graphicsViewWithMouseEvent->mapToScene(point);\\r\\n    QGraphicsItem *item = this->graphicsScene1->itemAt(scenePoint, this->graphicsViewWithMouseEvent->transform());\\r\\n    if(item != NULL)\\r\\n    {\\r\\n        QPointF itemPoint = item->mapFromScene(scenePoint);\\r\\n        this->label5->setText(QString(\\"item 坐标:%1,%2\\").arg(itemPoint.x()).arg(itemPoint.y()));\\r\\n    }\\r\\n}\\r\\n\\r\\nvoid MainWindow28::initGraphicsSystem()\\r\\n{\\r\\n    QRectF rectF(-200, -100, 500, 200);\\r\\n    this->graphicsScene1 = new QGraphicsScene(rectF);\\r\\n    this->graphicsViewWithMouseEvent->setScene(this->graphicsScene1);\\r\\n\\r\\n    QGraphicsRectItem *item1 = new QGraphicsRectItem(rectF);\\r\\n    item1->setFlags(QGraphicsItem::ItemIsSelectable | QGraphicsItem::ItemIsFocusable);\\r\\n    QPen pen;\\r\\n    pen.setWidth(1);\\r\\n    item1->setPen(pen);\\r\\n    this->graphicsScene1->addItem(item1);\\r\\n\\r\\n    QGraphicsEllipseItem *item2 = new QGraphicsEllipseItem(-100, -50, 200, 100);\\r\\n    item2->setPos(0, 0);\\r\\n    item2->setBrush(QBrush(Qt::green));\\r\\n    item2->setFlags(QGraphicsItem::ItemIsMovable | QGraphicsItem::ItemIsSelectable | QGraphicsItem::ItemIsFocusable);\\r\\n    this->graphicsScene1->addItem(item2);\\r\\n\\r\\n    QGraphicsEllipseItem *item3 = new QGraphicsEllipseItem(-50, -50, 100, 100);\\r\\n    item3->setPos(rectF.right(), rectF.bottom());\\r\\n    item3->setBrush(QBrush(Qt::red));\\r\\n    item3->setFlags(QGraphicsItem::ItemIsMovable | QGraphicsItem::ItemIsSelectable | QGraphicsItem::ItemIsFocusable);\\r\\n    this->graphicsScene1->addItem(item3);\\r\\n\\r\\n    this->graphicsScene1->clearSelection();\\r\\n}\\r\\n\\r\\nvoid MainWindow28::resizeEvent(QResizeEvent *event)\\r\\n{\\r\\n    Q_UNUSED(event);\\r\\n    this->label1->setText(QString(\\"Graphics View 坐标: 左上角总是(0,0), 宽度=%1, 高度=%2\\")\\r\\n                          .arg(this->graphicsViewWithMouseEvent->width())\\r\\n                          .arg(this->graphicsViewWithMouseEvent->height()));\\r\\n\\r\\n    QRectF rectF = this->graphicsViewWithMouseEvent->sceneRect();\\r\\n    this->label2->setText(QString(\\"QGraphicsView::sceneRect=(left,top,width,height)=%1,%2,%3,%4\\")\\r\\n                          .arg(rectF.left())\\r\\n                          .arg(rectF.top())\\r\\n                          .arg(rectF.width())\\r\\n                          .arg(rectF.height()));\\r\\n}\\r\\n\\r\\nQGraphicsViewWithMouseEvent::QGraphicsViewWithMouseEvent(QWidget *parent) : QGraphicsView(parent)\\r\\n{\\r\\n\\r\\n}\\r\\n\\r\\nQGraphicsViewWithMouseEvent::~QGraphicsViewWithMouseEvent()\\r\\n{\\r\\n\\r\\n}\\r\\n\\r\\nvoid QGraphicsViewWithMouseEvent::mouseMoveEvent(QMouseEvent *event)\\r\\n{\\r\\n    QPoint point = event->pos();\\r\\n    emit this->mouseMovePoint(point);\\r\\n    QGraphicsView::mouseMoveEvent(event);\\r\\n}\\r\\n\\r\\nvoid QGraphicsViewWithMouseEvent::mousePressEvent(QMouseEvent *event)\\r\\n{\\r\\n    if(event->button() == Qt::LeftButton)\\r\\n    {\\r\\n        QPoint point = event->pos();\\r\\n        emit this->mouseClicked(point);\\r\\n    }\\r\\n    QGraphicsView::mousePressEvent(event);\\r\\n\\r\\n}\\r\\n\\r\\n```","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},"02fe3d385d7dabbddcfc77c999c1c15e24a472acbb732d7298d682cd42d95e25":{"title":"坐标变换","hash":"02fe3d385d7dabbddcfc77c999c1c15e24a472acbb732d7298d682cd42d95e25","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2022-02-06","update":"2022-02-06","content":"\\r\\n```c++\\r\\n#if _MSC_VER >= 1600\\r\\n#pragma execution_character_set(\\"utf-8\\")\\r\\n#endif\\r\\n\\r\\n#include \\"widget27.h\\"\\r\\n#include <QDebug>\\r\\n#include <cmath>\\r\\n\\r\\nusing namespace std;\\r\\n\\r\\nWidget27::Widget27(QString title, QWidget *parent) : QWidget(parent)\\r\\n{\\r\\n    this->setWindowTitle(title);\\r\\n    this->setPalette(QPalette(QColor(\\"#FF6A00\\")));\\r\\n    this->setAutoFillBackground(true);\\r\\n}\\r\\n\\r\\nvoid Widget27::paintEvent(QPaintEvent *event)\\r\\n{\\r\\n    QPainter painter(this);\\r\\n    painter.setRenderHint(QPainter::Antialiasing);\\r\\n    painter.setRenderHint(QPainter::TextAntialiasing);\\r\\n\\r\\n    // 半径\\r\\n    qreal R = 100;\\r\\n    const qreal Pi = 3.1415926535897932384626;\\r\\n    // 角度\\r\\n    qreal deg = Pi * 72 / 180;\\r\\n    QPoint points[5] = {\\r\\n        QPoint(R, 0),\\r\\n        QPoint(R * std::cos(deg), -R * std::sin(deg)),\\r\\n        QPoint(R * std::cos(2 * deg), -R * std::sin(2 * deg)),\\r\\n        QPoint(R * std::cos(3 * deg), -R * std::sin(3 * deg)),\\r\\n        QPoint(R * std::cos(4 * deg), -R * std::sin(4 * deg)),\\r\\n    };\\r\\n\\r\\n    // 设置字体\\r\\n    QFont font;\\r\\n    font.setPointSize(14);\\r\\n    font.setBold(true);\\r\\n    font.setFamily(\\"Hack\\");\\r\\n    painter.setFont(font);\\r\\n\\r\\n    // 设置画笔\\r\\n    QPen pen;\\r\\n    pen.setWidth(2);\\r\\n    pen.setColor(Qt::blue);\\r\\n    pen.setStyle(Qt::SolidLine);\\r\\n    pen.setCapStyle(Qt::FlatCap);\\r\\n    pen.setJoinStyle(Qt::BevelJoin);\\r\\n    painter.setPen(pen);\\r\\n\\r\\n    // 设置画刷\\r\\n    QBrush brush;\\r\\n    brush.setColor(Qt::green);\\r\\n    brush.setStyle(Qt::SolidPattern);\\r\\n\\r\\n    // 设计绘制五角星的 PainterPath，以便复用\\r\\n    QPainterPath starPath;\\r\\n    starPath.moveTo(points[0]);\\r\\n    starPath.lineTo(points[2]);\\r\\n    starPath.lineTo(points[4]);\\r\\n    starPath.lineTo(points[1]);\\r\\n    starPath.lineTo(points[3]);\\r\\n    starPath.closeSubpath();\\r\\n    starPath.addText(points[0], font, \\"0\\");\\r\\n    starPath.addText(points[1], font, \\"1\\");\\r\\n    starPath.addText(points[2], font, \\"2\\");\\r\\n    starPath.addText(points[3], font, \\"3\\");\\r\\n    starPath.addText(points[4], font, \\"4\\");\\r\\n\\r\\n    // 绘图\\r\\n    // 保存左边状态\\r\\n    painter.save();\\r\\n    painter.translate(100, 120);\\r\\n    painter.drawPath(starPath);\\r\\n    painter.drawText(0, 0, \\"S1\\");\\r\\n\\r\\n    painter.restore();\\r\\n    painter.translate(300, 120);\\r\\n    painter.scale(0.8, 0.8);\\r\\n    painter.rotate(90);\\r\\n    painter.drawPath(starPath);\\r\\n    painter.drawText(0, 0, \\"S2\\");\\r\\n\\r\\n    painter.resetTransform();\\r\\n    painter.translate(500, 120);\\r\\n    painter.rotate(-90);\\r\\n    painter.drawPath(starPath);\\r\\n    painter.drawText(0, 0, \\"S3\\");\\r\\n\\r\\n}\\r\\n\\r\\n```","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},"2d51cb21fedd6cb4741ddd8af396a54c432df80d30388640de17969da61eae5b":{"title":"QPainter 绘图","hash":"2d51cb21fedd6cb4741ddd8af396a54c432df80d30388640de17969da61eae5b","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2022-02-05","update":"2022-02-05","content":"\\r\\n```c++\\r\\n#if _MSC_VER >= 1600\\r\\n#pragma execution_character_set(\\"utf-8\\")\\r\\n#endif\\r\\n\\r\\n#include \\"widget26.h\\"\\r\\n#include <QDebug>\\r\\n\\r\\nWidget26::Widget26(QString title, QWidget *parent) : QWidget(parent)\\r\\n{\\r\\n    this->setWindowTitle(title);\\r\\n\\r\\n    QColor color(\\"#FFFFFF\\");\\r\\n    this->setPalette(QPalette(color));\\r\\n    this->setAutoFillBackground(true);\\r\\n}\\r\\n\\r\\nvoid Widget26::paintEvent(QPaintEvent *event)\\r\\n{\\r\\n    Q_UNUSED(event);\\r\\n//    enum PenCapStyle { // line endcap style\\r\\n//        FlatCap = 0x00,\\r\\n//        SquareCap = 0x10,\\r\\n//        RoundCap = 0x20,\\r\\n//        MPenCapStyle = 0x30\\r\\n//    };\\r\\n\\r\\n//    enum PenJoinStyle { // line join style\\r\\n//        MiterJoin = 0x00,\\r\\n//        BevelJoin = 0x40,\\r\\n//        RoundJoin = 0x80,\\r\\n//        SvgMiterJoin = 0x100,\\r\\n//        MPenJoinStyle = 0x1c0\\r\\n//    };\\r\\n\\r\\n//    enum BrushStyle { // brush style\\r\\n//        NoBrush,\\r\\n//        SolidPattern,\\r\\n//        Dense1Pattern,\\r\\n//        Dense2Pattern,\\r\\n//        Dense3Pattern,\\r\\n//        Dense4Pattern,\\r\\n//        Dense5Pattern,\\r\\n//        Dense6Pattern,\\r\\n//        Dense7Pattern,\\r\\n//        HorPattern,\\r\\n//        VerPattern,\\r\\n//        CrossPattern,\\r\\n//        BDiagPattern,\\r\\n//        FDiagPattern,\\r\\n//        DiagCrossPattern,\\r\\n//        LinearGradientPattern,\\r\\n//        RadialGradientPattern,\\r\\n//        ConicalGradientPattern,\\r\\n//        TexturePattern = 24\\r\\n//    };\\r\\n\\r\\n    QRect rect(this->width() / 4, this->height() / 4, this->width() / 2, this->height() / 2);\\r\\n\\r\\n    QPainter painter(this);\\r\\n    painter.setRenderHint(QPainter::Antialiasing);\\r\\n    painter.setRenderHint(QPainter::TextAntialiasing);\\r\\n\\r\\n    QPen pen;\\r\\n    pen.setWidth(1);\\r\\n    pen.setColor(Qt::red);\\r\\n    // 线条样式  Qt::PenStyle\\r\\n    pen.setStyle(Qt::SolidLine);\\r\\n    // 线端点样式 Qt::PenCapStyle\\r\\n    pen.setCapStyle(Qt::FlatCap);\\r\\n    // 线连接点样式 Qt:: PenJoinStyle\\r\\n    pen.setJoinStyle(Qt::BevelJoin);\\r\\n    painter.setPen(pen);\\r\\n\\r\\n    QBrush brush;\\r\\n    brush.setColor(Qt::green);\\r\\n    // 画刷填充样式\\r\\n//    brush.setStyle(Qt::BDiagPattern);\\r\\n    QPixmap texturePixmap(QDir::currentPath() + QDir::separator() + \\"images/20211111_5acd3d9d5d9bd495954c7aaeacdf6ec7.jpg\\");\\r\\n    // 设置材质图片\\r\\n    brush.setTexture(texturePixmap);\\r\\n    brush.setStyle(Qt::TexturePattern);\\r\\n\\r\\n    // 径向渐变\\r\\n    QRadialGradient radialGradient(this->width() / 2, this->height() / 2,\\r\\n                                   qMax(this->width() / 8, this->height() / 8),\\r\\n                                   this->width() / 2, this->height() / 2);\\r\\n    // 渐变起点颜色和终点颜色\\r\\n    radialGradient.setColorAt(0, Qt::yellow);\\r\\n    radialGradient.setColorAt(1, Qt::blue);\\r\\n\\r\\n    // 线性渐变\\r\\n    // 矩形对角线\\r\\n    QLinearGradient linearGradient(rect.left(), rect.top(), rect.right(), rect.bottom());\\r\\n    // 从左到右\\r\\n//    QLinearGradient linearGradient(rect.left(), rect.top(), rect.right(), rect.top());\\r\\n    linearGradient.setColorAt(0, Qt::yellow);\\r\\n    linearGradient.setColorAt(1, Qt::green);\\r\\n    // 展布模式\\r\\n    linearGradient.setSpread(QGradient::PadSpread);\\r\\n\\r\\n    // 圆锥形渐变\\r\\n    QConicalGradient conicalGradient(this->width() / 2, this->height() / 2, 45);\\r\\n    conicalGradient.setColorAt(0, Qt::green);\\r\\n    conicalGradient.setColorAt(0.5, Qt::red);\\r\\n    conicalGradient.setColorAt(1, Qt::black);\\r\\n\\r\\n//    painter.setBrush(brush);\\r\\n//    painter.setBrush(radialGradient);\\r\\n//    painter.setBrush(linearGradient);\\r\\n//    painter.setBrush(conicalGradient);\\r\\n\\r\\n    // painter.drawRect(rect);\\r\\n\\r\\n    int side = qMin(this->width(), this->height());\\r\\n    // viewport 区域\\r\\n    QRect rect1((this->width() - side) / 2,\\r\\n               (this->height() - side) / 2,\\r\\n               side,\\r\\n               side);\\r\\n    painter.setViewport(rect1);\\r\\n    // 窗口大小，逻辑坐标\\r\\n    painter.setWindow(-100, -100, 200, 200);\\r\\n\\r\\n    linearGradient.setStart(0, 0);\\r\\n    linearGradient.setFinalStop(100, 0);\\r\\n    painter.setBrush(linearGradient);\\r\\n    // 设置复合模式\\r\\n//    painter.setCompositionMode(QPainter::RasterOp_NotSourceOrDestination);\\r\\n//    painter.setCompositionMode(QPainter::CompositionMode_Difference);\\r\\n    painter.setCompositionMode(QPainter::CompositionMode_Exclusion);\\r\\n    for(int i=0; i<36; i++)\\r\\n    {\\r\\n        painter.drawEllipse(QPoint(50, 0), 50, 50);\\r\\n        painter.rotate(10);\\r\\n    }\\r\\n}\\r\\n\\r\\n```","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},"c69ca6cfe5ef7406f989f813aff6ecfe6aa8235a0cdd77f0e94e1ce05abaf0ae":{"title":"目录和文件操作","hash":"c69ca6cfe5ef7406f989f813aff6ecfe6aa8235a0cdd77f0e94e1ce05abaf0ae","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2022-02-03","update":"2022-02-03","content":"\\r\\n```c++\\r\\n#if _MSC_VER >= 1600\\r\\n#pragma execution_character_set(\\"utf-8\\")\\r\\n#endif\\r\\n\\r\\n#include \\"mainwindow25.h\\"\\r\\n\\r\\n#include <QDebug>\\r\\n\\r\\nMainWindow25::MainWindow25(QString title, QWidget *parent) : QMainWindow(parent)\\r\\n{\\r\\n    this->setWindowTitle(title);\\r\\n\\r\\n    this->toolBox1 = new QToolBox();\\r\\n\\r\\n    this->groupBox1 = new QGroupBox();\\r\\n    this->gridLayout1 = new QGridLayout();\\r\\n    this->groupBox1->setLayout(this->gridLayout1);\\r\\n\\r\\n    this->groupBox2 = new QGroupBox();\\r\\n    this->gridLayout2 = new QGridLayout();\\r\\n    this->groupBox2->setLayout(this->gridLayout2);\\r\\n\\r\\n    this->groupBox3 = new QGroupBox();\\r\\n    this->gridLayout3 = new QGridLayout();\\r\\n    this->groupBox3->setLayout(this->gridLayout3);\\r\\n\\r\\n    this->groupBox4 = new QGroupBox();\\r\\n    this->gridLayout4 = new QGridLayout();\\r\\n    this->groupBox4->setLayout(this->gridLayout4);\\r\\n\\r\\n    this->groupBox5 = new QGroupBox();\\r\\n    this->gridLayout5 = new QGridLayout();\\r\\n    this->groupBox5->setLayout(this->gridLayout5);\\r\\n\\r\\n    this->groupBox6 = new QGroupBox();\\r\\n    this->gridLayout6 = new QGridLayout();\\r\\n    this->groupBox6->setLayout(this->gridLayout6);\\r\\n\\r\\n//    QCoreApplication::applicationDirPath();\\r\\n//    QCoreApplication::applicationFilePath();\\r\\n//    QCoreApplication::applicationName();\\r\\n//    QCoreApplication::libraryPaths();\\r\\n//    QCoreApplication::setOrganizationName();\\r\\n//    QCoreApplication::organizationName();\\r\\n//    QCoreApplication::exit();\\r\\n//    QCoreApplication::applicationPid();\\r\\n//    QCoreApplication::applicationVersion();\\r\\n    this->groupBox1Button1 = new QPushButton();\\r\\n    this->groupBox1Button1->setText(\\"applicationDirPath\\");\\r\\n    this->groupBox1Button2 = new QPushButton();\\r\\n    this->groupBox1Button2->setText(\\"applicationFilePath\\");\\r\\n    this->groupBox1Button3 = new QPushButton();\\r\\n    this->groupBox1Button3->setText(\\"applicationName\\");\\r\\n    this->groupBox1Button4 = new QPushButton();\\r\\n    this->groupBox1Button4->setText(\\"organizationName\\");\\r\\n    this->groupBox1Button5 = new QPushButton();\\r\\n    this->groupBox1Button5->setText(\\"applicationPid\\");\\r\\n    this->groupBox1Button6 = new QPushButton();\\r\\n    this->groupBox1Button6->setText(\\"applicationVersion\\");\\r\\n    this->gridLayout1->addWidget(this->groupBox1Button1, 0, 0);\\r\\n    this->gridLayout1->addWidget(this->groupBox1Button2, 0, 1);\\r\\n    this->gridLayout1->addWidget(this->groupBox1Button3, 1, 0);\\r\\n    this->gridLayout1->addWidget(this->groupBox1Button4, 1, 1);\\r\\n    this->gridLayout1->addWidget(this->groupBox1Button5, 2, 0);\\r\\n    this->gridLayout1->addWidget(this->groupBox1Button6, 2, 1);\\r\\n\\r\\n//    QFile 静态函数\\r\\n//    QFile::copy();\\r\\n//    QFile::rename();\\r\\n//    QFile::remove();\\r\\n//    QFile::exists();\\r\\n//    QFile::setPermissions();\\r\\n//    QFile::Permissions();\\r\\n//    QFile 成员函数\\r\\n//    QFile::setFileName();\\r\\n//    QFile::copy();\\r\\n//    QFile::rename();\\r\\n//    QFile::remove();\\r\\n//    QFile::exists();\\r\\n//    QFile::setPermissions();\\r\\n//    QFile::permissions();\\r\\n//    QFile::size();\\r\\n    this->groupBox2Button1 = new QPushButton();\\r\\n    this->groupBox2Button1->setText(\\"copy\\");\\r\\n    this->groupBox2Button2 = new QPushButton();\\r\\n    this->groupBox2Button2->setText(\\"rename\\");\\r\\n    this->groupBox2Button3 = new QPushButton();\\r\\n    this->groupBox2Button3->setText(\\"remove\\");\\r\\n    this->groupBox2Button4 = new QPushButton();\\r\\n    this->groupBox2Button4->setText(\\"exists\\");\\r\\n    this->groupBox2Button5 = new QPushButton();\\r\\n    this->groupBox2Button5->setText(\\"Permissions\\");\\r\\n    this->groupBox2Button6 = new QPushButton();\\r\\n    this->groupBox2Button6->setText(\\"size\\");\\r\\n    this->groupBox2Button7 = new QPushButton();\\r\\n    this->groupBox2Button7->setText(\\"setFileName\\");\\r\\n    this->gridLayout2->addWidget(this->groupBox2Button1, 0, 0);\\r\\n    this->gridLayout2->addWidget(this->groupBox2Button2, 0, 1);\\r\\n    this->gridLayout2->addWidget(this->groupBox2Button3, 1, 0);\\r\\n    this->gridLayout2->addWidget(this->groupBox2Button4, 1, 1);\\r\\n    this->gridLayout2->addWidget(this->groupBox2Button5, 2, 0);\\r\\n    this->gridLayout2->addWidget(this->groupBox2Button6, 2, 1);\\r\\n    this->gridLayout2->addWidget(this->groupBox2Button7, 3, 0);\\r\\n\\r\\n//    QFileInfo::setFile();\\r\\n//    QFileInfo::absoluteFilePath();\\r\\n//    QFileInfo::absolutePath();\\r\\n//    QFileInfo::absoluteDir();\\r\\n//    QFileInfo::fileName();\\r\\n//    QFileInfo::filePath();\\r\\n//    QFileInfo::path();\\r\\n//    QFileInfo::size();\\r\\n//    QFileInfo::baseName();\\r\\n//    QFileInfo::completeBaseName();\\r\\n//    QFileInfo::suffix();\\r\\n//    QFileInfo::completeSuffix();\\r\\n//    QFileInfo::isDir();\\r\\n//    QFileInfo::isFile();\\r\\n//    QFileInfo::isExecutable();\\r\\n//    QFileInfo::created();\\r\\n//    QFileInfo::lastModified();\\r\\n//    QFileInfo::lastRead();\\r\\n//    QFileInfo::exists();\\r\\n    this->groupBox3Button1 = new QPushButton();\\r\\n    this->groupBox3Button1->setText(\\"setFile\\");\\r\\n    this->groupBox3Button2 = new QPushButton();\\r\\n    this->groupBox3Button2->setText(\\"absoluteFilePath\\");\\r\\n    this->groupBox3Button3 = new QPushButton();\\r\\n    this->groupBox3Button3->setText(\\"absolutePath\\");\\r\\n    this->groupBox3Button4 = new QPushButton();\\r\\n    this->groupBox3Button4->setText(\\"absoluteDir\\");\\r\\n    this->groupBox3Button5 = new QPushButton();\\r\\n    this->groupBox3Button5->setText(\\"fileName\\");\\r\\n    this->groupBox3Button6 = new QPushButton();\\r\\n    this->groupBox3Button6->setText(\\"filePath\\");\\r\\n    this->groupBox3Button7 = new QPushButton();\\r\\n    this->groupBox3Button7->setText(\\"path\\");\\r\\n    this->groupBox3Button8 = new QPushButton();\\r\\n    this->groupBox3Button8->setText(\\"size\\");\\r\\n    this->groupBox3Button9 = new QPushButton();\\r\\n    this->groupBox3Button9->setText(\\"baseName\\");\\r\\n    this->groupBox3Button10 = new QPushButton();\\r\\n    this->groupBox3Button10->setText(\\"\\");\\r\\n    this->groupBox3Button11 = new QPushButton();\\r\\n    this->groupBox3Button11->setText(\\"completeBaseName\\");\\r\\n    this->groupBox3Button12 = new QPushButton();\\r\\n    this->groupBox3Button12->setText(\\"suffix\\");\\r\\n    this->groupBox3Button13 = new QPushButton();\\r\\n    this->groupBox3Button13->setText(\\"completeSuffix\\");\\r\\n    this->groupBox3Button14 = new QPushButton();\\r\\n    this->groupBox3Button14->setText(\\"isDir\\");\\r\\n    this->groupBox3Button15 = new QPushButton();\\r\\n    this->groupBox3Button15->setText(\\"isFile\\");\\r\\n    this->groupBox3Button16 = new QPushButton();\\r\\n    this->groupBox3Button16->setText(\\"isExecutable\\");\\r\\n    this->groupBox3Button17 = new QPushButton();\\r\\n    this->groupBox3Button17->setText(\\"created\\");\\r\\n    this->groupBox3Button18 = new QPushButton();\\r\\n    this->groupBox3Button18->setText(\\"lastModified\\");\\r\\n    this->groupBox3Button19 = new QPushButton();\\r\\n    this->groupBox3Button19->setText(\\"lastRead\\");\\r\\n    this->groupBox3Button20 = new QPushButton();\\r\\n    this->groupBox3Button20->setText(\\"exists\\");\\r\\n    this->gridLayout3->addWidget(this->groupBox3Button1, 0, 0);\\r\\n    this->gridLayout3->addWidget(this->groupBox3Button2, 0, 1);\\r\\n    this->gridLayout3->addWidget(this->groupBox3Button3, 1, 0);\\r\\n    this->gridLayout3->addWidget(this->groupBox3Button4, 1, 1);\\r\\n    this->gridLayout3->addWidget(this->groupBox3Button5, 2, 0);\\r\\n    this->gridLayout3->addWidget(this->groupBox3Button6, 2, 1);\\r\\n    this->gridLayout3->addWidget(this->groupBox3Button7, 3, 0);\\r\\n    this->gridLayout3->addWidget(this->groupBox3Button8, 3, 1);\\r\\n    this->gridLayout3->addWidget(this->groupBox3Button9, 4, 0);\\r\\n    this->gridLayout3->addWidget(this->groupBox3Button10, 4, 1);\\r\\n    this->gridLayout3->addWidget(this->groupBox3Button11, 5, 0);\\r\\n    this->gridLayout3->addWidget(this->groupBox3Button12, 5, 1);\\r\\n    this->gridLayout3->addWidget(this->groupBox3Button13, 6, 0);\\r\\n    this->gridLayout3->addWidget(this->groupBox3Button14, 6, 1);\\r\\n    this->gridLayout3->addWidget(this->groupBox3Button15, 7, 0);\\r\\n    this->gridLayout3->addWidget(this->groupBox3Button16, 7, 1);\\r\\n    this->gridLayout3->addWidget(this->groupBox3Button17, 8, 0);\\r\\n    this->gridLayout3->addWidget(this->groupBox3Button18, 8, 1);\\r\\n    this->gridLayout3->addWidget(this->groupBox3Button19, 9, 0);\\r\\n    this->gridLayout3->addWidget(this->groupBox3Button20, 9, 1);\\r\\n\\r\\n//    QDir 静态函数\\r\\n//    QDir::tempPath();\\r\\n//    QDir::rootPath();\\r\\n//    QDir::homePath();\\r\\n//    QDir::currentPath();\\r\\n//    QDir::setCurrent();\\r\\n//    QDir::drives();\\r\\n//    QDir 成员函数\\r\\n//    QDir::absoluteFilePath();\\r\\n//    QDir::absolutePath();\\r\\n//    QDir::canonicalPath();\\r\\n//    QDir::filePath();\\r\\n//    QDir::dirName();\\r\\n//    QDir::exists();\\r\\n//    QDir::entryInfoList();\\r\\n//    QDir::Filter = QDir::AllDirs/QDir::Files/QDir::Drives/QDir::NoDotAndDotDot/QDir::AllEntries\\r\\n//    QDir::mkdir();\\r\\n//    QDir::rmdir();\\r\\n//    QDir::remove();\\r\\n//    QDir::rename();\\r\\n//    QDir::setPath();\\r\\n//    QDir::removeRecursively();\\r\\n    this->groupBox4Button1 = new QPushButton();\\r\\n    this->groupBox4Button1->setText(\\"tempPath\\");\\r\\n    this->groupBox4Button2 = new QPushButton();\\r\\n    this->groupBox4Button2->setText(\\"rootPath\\");\\r\\n    this->groupBox4Button3 = new QPushButton();\\r\\n    this->groupBox4Button3->setText(\\"homePath\\");\\r\\n    this->groupBox4Button4 = new QPushButton();\\r\\n    this->groupBox4Button4->setText(\\"currentPath\\");\\r\\n    this->groupBox4Button5 = new QPushButton();\\r\\n    this->groupBox4Button5->setText(\\"drives\\");\\r\\n    this->groupBox4Button6 = new QPushButton();\\r\\n    this->groupBox4Button6->setText(\\"absoluteFilePath\\");\\r\\n    this->groupBox4Button7 = new QPushButton();\\r\\n    this->groupBox4Button7->setText(\\"absolutePath\\");\\r\\n    this->groupBox4Button8 = new QPushButton();\\r\\n    this->groupBox4Button8->setText(\\"canonicalPath\\");\\r\\n    this->groupBox4Button9 = new QPushButton();\\r\\n    this->groupBox4Button9->setText(\\"filePath\\");\\r\\n    this->groupBox4Button10 = new QPushButton();\\r\\n    this->groupBox4Button10->setText(\\"dirName\\");\\r\\n    this->groupBox4Button11 = new QPushButton();\\r\\n    this->groupBox4Button11->setText(\\"exists\\");\\r\\n    this->groupBox4Button12 = new QPushButton();\\r\\n    this->groupBox4Button12->setText(\\"entryInfoList\\");\\r\\n    this->groupBox4Button13 = new QPushButton();\\r\\n    this->groupBox4Button13->setText(\\"mkdir\\");\\r\\n    this->groupBox4Button14 = new QPushButton();\\r\\n    this->groupBox4Button14->setText(\\"rmdir\\");\\r\\n    this->groupBox4Button15 = new QPushButton();\\r\\n    this->groupBox4Button15->setText(\\"remove\\");\\r\\n    this->groupBox4Button16 = new QPushButton();\\r\\n    this->groupBox4Button16->setText(\\"rename\\");\\r\\n    this->groupBox4Button17 = new QPushButton();\\r\\n    this->groupBox4Button17->setText(\\"setPath\\");\\r\\n    this->groupBox4Button18 = new QPushButton();\\r\\n    this->groupBox4Button18->setText(\\"removeRecursively\\");\\r\\n    this->gridLayout4->addWidget(this->groupBox4Button1, 0, 0);\\r\\n    this->gridLayout4->addWidget(this->groupBox4Button2, 0, 1);\\r\\n    this->gridLayout4->addWidget(this->groupBox4Button3, 1, 0);\\r\\n    this->gridLayout4->addWidget(this->groupBox4Button4, 1, 1);\\r\\n    this->gridLayout4->addWidget(this->groupBox4Button5, 2, 0);\\r\\n    this->gridLayout4->addWidget(this->groupBox4Button6, 2, 1);\\r\\n    this->gridLayout4->addWidget(this->groupBox4Button7, 3, 0);\\r\\n    this->gridLayout4->addWidget(this->groupBox4Button8, 3, 1);\\r\\n    this->gridLayout4->addWidget(this->groupBox4Button9, 4, 0);\\r\\n    this->gridLayout4->addWidget(this->groupBox4Button10, 4, 1);\\r\\n    this->gridLayout4->addWidget(this->groupBox4Button11, 5, 0);\\r\\n    this->gridLayout4->addWidget(this->groupBox4Button12, 5, 1);\\r\\n    this->gridLayout4->addWidget(this->groupBox4Button13, 6, 0);\\r\\n    this->gridLayout4->addWidget(this->groupBox4Button14, 6, 1);\\r\\n    this->gridLayout4->addWidget(this->groupBox4Button15, 7, 0);\\r\\n    this->gridLayout4->addWidget(this->groupBox4Button16, 7, 1);\\r\\n    this->gridLayout4->addWidget(this->groupBox4Button17, 8, 0);\\r\\n    this->gridLayout4->addWidget(this->groupBox4Button18, 8, 1);\\r\\n\\r\\n//    QTemporaryDir::setAutoRemove();\\r\\n//    QTemporaryDir::path();\\r\\n//    QTemporaryDir::remove();\\r\\n//    QTemporaryFile::setAutoRemove();\\r\\n//    QTemporaryFile::open();\\r\\n//    临时文件以 QCoreApplication::appliationName() 为前缀，6为随机数字为后缀，打开文件会实际在临时目录下创建文件\\r\\n    this->groupBox5Button1 = new QPushButton();\\r\\n    this->groupBox5Button1->setText(\\"setAutoRemove\\");\\r\\n    this->groupBox5Button2 = new QPushButton();\\r\\n    this->groupBox5Button2->setText(\\"path\\");\\r\\n    this->groupBox5Button3 = new QPushButton();\\r\\n    this->groupBox5Button3->setText(\\"remove\\");\\r\\n    this->groupBox5Button4 = new QPushButton();\\r\\n    this->groupBox5Button4->setText(\\"open\\");\\r\\n    this->gridLayout5->addWidget(this->groupBox5Button1, 0, 0);\\r\\n    this->gridLayout5->addWidget(this->groupBox5Button2, 0, 1);\\r\\n    this->gridLayout5->addWidget(this->groupBox5Button3, 1, 0);\\r\\n    this->gridLayout5->addWidget(this->groupBox5Button4, 1, 1);\\r\\n\\r\\n//    QFileSystemWatcher::addPath();\\r\\n//    QFileSystemWatcher::addPaths();\\r\\n//    QFileSystemWatcher::directories();\\r\\n//    QFileSystemWatcher::files();\\r\\n//    QFileSystemWatcher::removePath();\\r\\n//    QFileSystemWatcher::removePaths();\\r\\n    this->groupBox6Button1 = new QPushButton();\\r\\n    this->groupBox6Button1->setText(\\"addPath\\");\\r\\n    this->groupBox6Button2 = new QPushButton();\\r\\n    this->groupBox6Button2->setText(\\"addPaths\\");\\r\\n    this->groupBox6Button3 = new QPushButton();\\r\\n    this->groupBox6Button3->setText(\\"directories\\");\\r\\n    this->groupBox6Button4 = new QPushButton();\\r\\n    this->groupBox6Button4->setText(\\"files\\");\\r\\n    this->groupBox6Button5 = new QPushButton();\\r\\n    this->groupBox6Button5->setText(\\"removePath\\");\\r\\n    this->groupBox6Button6 = new QPushButton();\\r\\n    this->groupBox6Button6->setText(\\"removePaths\\");\\r\\n    this->gridLayout6->addWidget(this->groupBox6Button1, 0, 0);\\r\\n    this->gridLayout6->addWidget(this->groupBox6Button2, 0, 1);\\r\\n    this->gridLayout6->addWidget(this->groupBox6Button3, 1, 0);\\r\\n    this->gridLayout6->addWidget(this->groupBox6Button4, 1, 1);\\r\\n    this->gridLayout6->addWidget(this->groupBox6Button5, 2, 0);\\r\\n    this->gridLayout6->addWidget(this->groupBox6Button6, 2, 1);\\r\\n\\r\\n    /// QCoreApplication =>用于提取应用程序路径、程序名等文件信息\\r\\n    this->toolBox1->addItem(this->groupBox1, \\"QCoreApplication\\");\\r\\n    // QFile => 打开文件/复制文件/删除文件\\r\\n    this->toolBox1->addItem(this->groupBox2, \\"QFile\\");\\r\\n    // QFileInfo => 提取文件信息，路径/文件名/后缀\\r\\n    this->toolBox1->addItem(this->groupBox3, \\"QFileInfo\\");\\r\\n    // QDir => 提取目录或文件信息，获取目录下的文件或目录列表，创建目录，删除目录，文件重命名\\r\\n    this->toolBox1->addItem(this->groupBox4, \\"QDir\\");\\r\\n    // QTemporaryDir/QTemporaryFile => 创建临时目录和临时文件\\r\\n    this->toolBox1->addItem(this->groupBox5, \\"QTemporary/QTemporaryFile\\");\\r\\n    // QFileSystemWatcher => w文件和目录监视类，监视目录下文件的添加、删除变化，监听文件修改变化\\r\\n    this->toolBox1->addItem(this->groupBox6, \\"QFileSystemWatcher\\");\\r\\n\\r\\n    QHBoxLayout *layout1 = new QHBoxLayout();\\r\\n    this->openFileButton = new QPushButton();\\r\\n    this->openFileButton->setText(\\"打开文件\\");\\r\\n    this->openFoldButton = new QPushButton();\\r\\n    this->openFoldButton->setText(\\"打开目录\\");\\r\\n    this->clearTextButton = new QPushButton();\\r\\n    this->clearTextButton->setText(\\"清除文本框\\");\\r\\n    layout1->addWidget(this->openFileButton);\\r\\n    layout1->addWidget(this->openFoldButton);\\r\\n    layout1->addWidget(this->clearTextButton);\\r\\n\\r\\n    this->label1 = new QLabel();\\r\\n    this->label1->setText(\\"文件\\");\\r\\n    this->lineEdit1 = new QLineEdit();\\r\\n    this->lineEdit1->setClearButtonEnabled(true);\\r\\n    this->label2 = new QLabel();\\r\\n    this->label2->setText(\\"目录\\");\\r\\n    this->lineEdit2 = new QLineEdit();\\r\\n    this->lineEdit2->setClearButtonEnabled(true);\\r\\n    this->label3 = new QLabel();\\r\\n    this->label3->setText(\\"信息\\");\\r\\n    this->plainTextEdit1 = new QPlainTextEdit();\\r\\n\\r\\n    QHBoxLayout *layout2 = new QHBoxLayout();\\r\\n    layout2->addWidget(this->label1);\\r\\n    layout2->addWidget(this->lineEdit1);\\r\\n    QHBoxLayout *layout3 = new QHBoxLayout();\\r\\n    layout3->addWidget(this->label2);\\r\\n    layout3->addWidget(this->lineEdit2);\\r\\n    QHBoxLayout *layout4 = new QHBoxLayout();\\r\\n    layout4->addWidget(this->label3);\\r\\n    layout4->addWidget(this->plainTextEdit1);\\r\\n\\r\\n    QVBoxLayout *layout5 = new QVBoxLayout();\\r\\n    layout5->addLayout(layout1);\\r\\n    layout5->addLayout(layout2);\\r\\n    layout5->addLayout(layout3);\\r\\n    layout5->addLayout(layout4);\\r\\n    QGroupBox *groupbox = new QGroupBox();\\r\\n    groupbox->setLayout(layout5);\\r\\n\\r\\n    this->splitter1 = new QSplitter();\\r\\n    this->splitter1->addWidget(this->toolBox1);\\r\\n    this->splitter1->addWidget(groupbox);\\r\\n    this->setCentralWidget(this->splitter1);\\r\\n\\r\\n    this->connect(this->groupBox1Button1, SIGNAL(clicked()), this, SLOT(groupBox1Button1_clicked()));\\r\\n    this->connect(this->groupBox1Button2, SIGNAL(clicked()), this, SLOT(groupBox1Button2_clicked()));\\r\\n    this->connect(this->groupBox1Button3, SIGNAL(clicked()), this, SLOT(groupBox1Button3_clicked()));\\r\\n    this->connect(this->groupBox1Button4, SIGNAL(clicked()), this, SLOT(groupBox1Button4_clicked()));\\r\\n    this->connect(this->groupBox1Button5, SIGNAL(clicked()), this, SLOT(groupBox1Button5_clicked()));\\r\\n    this->connect(this->groupBox1Button6, SIGNAL(clicked()), this, SLOT(groupBox1Button6_clicked()));\\r\\n\\r\\n    this->connect(this->groupBox2Button1, SIGNAL(clicked()), this, SLOT(groupBox2Button1_clicked()));\\r\\n    this->connect(this->groupBox2Button2, SIGNAL(clicked()), this, SLOT(groupBox2Button2_clicked()));\\r\\n    this->connect(this->groupBox2Button3, SIGNAL(clicked()), this, SLOT(groupBox2Button3_clicked()));\\r\\n    this->connect(this->groupBox2Button4, SIGNAL(clicked()), this, SLOT(groupBox2Button4_clicked()));\\r\\n    this->connect(this->groupBox2Button5, SIGNAL(clicked()), this, SLOT(groupBox2Button5_clicked()));\\r\\n    this->connect(this->groupBox2Button6, SIGNAL(clicked()), this, SLOT(groupBox2Button6_clicked()));\\r\\n    this->connect(this->groupBox2Button7, SIGNAL(clicked()), this, SLOT(groupBox2Button7_clicked()));\\r\\n\\r\\n    this->connect(this->groupBox3Button1, SIGNAL(clicked()), this, SLOT(groupBox3Button1_clicked()));\\r\\n    this->connect(this->groupBox3Button2, SIGNAL(clicked()), this, SLOT(groupBox3Button2_clicked()));\\r\\n    this->connect(this->groupBox3Button3, SIGNAL(clicked()), this, SLOT(groupBox3Button3_clicked()));\\r\\n    this->connect(this->groupBox3Button4, SIGNAL(clicked()), this, SLOT(groupBox3Button4_clicked()));\\r\\n    this->connect(this->groupBox3Button5, SIGNAL(clicked()), this, SLOT(groupBox3Button5_clicked()));\\r\\n    this->connect(this->groupBox3Button6, SIGNAL(clicked()), this, SLOT(groupBox3Button6_clicked()));\\r\\n    this->connect(this->groupBox3Button7, SIGNAL(clicked()), this, SLOT(groupBox3Button7_clicked()));\\r\\n    this->connect(this->groupBox3Button8, SIGNAL(clicked()), this, SLOT(groupBox3Button8_clicked()));\\r\\n    this->connect(this->groupBox3Button9, SIGNAL(clicked()), this, SLOT(groupBox3Button9_clicked()));\\r\\n    this->connect(this->groupBox3Button10, SIGNAL(clicked()), this, SLOT(groupBox3Button10_clicked()));\\r\\n    this->connect(this->groupBox3Button11, SIGNAL(clicked()), this, SLOT(groupBox3Button11_clicked()));\\r\\n    this->connect(this->groupBox3Button12, SIGNAL(clicked()), this, SLOT(groupBox3Button12_clicked()));\\r\\n    this->connect(this->groupBox3Button13, SIGNAL(clicked()), this, SLOT(groupBox3Button13_clicked()));\\r\\n    this->connect(this->groupBox3Button14, SIGNAL(clicked()), this, SLOT(groupBox3Button14_clicked()));\\r\\n    this->connect(this->groupBox3Button15, SIGNAL(clicked()), this, SLOT(groupBox3Button15_clicked()));\\r\\n    this->connect(this->groupBox3Button16, SIGNAL(clicked()), this, SLOT(groupBox3Button16_clicked()));\\r\\n    this->connect(this->groupBox3Button17, SIGNAL(clicked()), this, SLOT(groupBox3Button17_clicked()));\\r\\n    this->connect(this->groupBox3Button18, SIGNAL(clicked()), this, SLOT(groupBox3Button18_clicked()));\\r\\n    this->connect(this->groupBox3Button19, SIGNAL(clicked()), this, SLOT(groupBox3Button19_clicked()));\\r\\n    this->connect(this->groupBox3Button20, SIGNAL(clicked()), this, SLOT(groupBox3Button20_clicked()));\\r\\n\\r\\n    this->connect(this->groupBox4Button1, SIGNAL(clicked()), this, SLOT(groupBox4Button1_clicked()));\\r\\n    this->connect(this->groupBox4Button2, SIGNAL(clicked()), this, SLOT(groupBox4Button2_clicked()));\\r\\n    this->connect(this->groupBox4Button3, SIGNAL(clicked()), this, SLOT(groupBox4Button3_clicked()));\\r\\n    this->connect(this->groupBox4Button4, SIGNAL(clicked()), this, SLOT(groupBox4Button4_clicked()));\\r\\n    this->connect(this->groupBox4Button5, SIGNAL(clicked()), this, SLOT(groupBox4Button5_clicked()));\\r\\n    this->connect(this->groupBox4Button6, SIGNAL(clicked()), this, SLOT(groupBox4Button6_clicked()));\\r\\n    this->connect(this->groupBox4Button7, SIGNAL(clicked()), this, SLOT(groupBox4Button7_clicked()));\\r\\n    this->connect(this->groupBox4Button8, SIGNAL(clicked()), this, SLOT(groupBox4Button8_clicked()));\\r\\n    this->connect(this->groupBox4Button9, SIGNAL(clicked()), this, SLOT(groupBox4Button9_clicked()));\\r\\n    this->connect(this->groupBox4Button10, SIGNAL(clicked()), this, SLOT(groupBox4Button10_clicked()));\\r\\n    this->connect(this->groupBox4Button11, SIGNAL(clicked()), this, SLOT(groupBox4Button11_clicked()));\\r\\n    this->connect(this->groupBox4Button12, SIGNAL(clicked()), this, SLOT(groupBox4Button12_clicked()));\\r\\n    this->connect(this->groupBox4Button13, SIGNAL(clicked()), this, SLOT(groupBox4Button13_clicked()));\\r\\n    this->connect(this->groupBox4Button14, SIGNAL(clicked()), this, SLOT(groupBox4Button14_clicked()));\\r\\n    this->connect(this->groupBox4Button15, SIGNAL(clicked()), this, SLOT(groupBox4Button15_clicked()));\\r\\n    this->connect(this->groupBox4Button16, SIGNAL(clicked()), this, SLOT(groupBox4Button16_clicked()));\\r\\n    this->connect(this->groupBox4Button17, SIGNAL(clicked()), this, SLOT(groupBox4Button17_clicked()));\\r\\n    this->connect(this->groupBox4Button18, SIGNAL(clicked()), this, SLOT(groupBox4Button18_clicked()));\\r\\n\\r\\n    this->connect(this->groupBox5Button1, SIGNAL(clicked()), this, SLOT(groupBox5Button1_clicked()));\\r\\n    this->connect(this->groupBox5Button2, SIGNAL(clicked()), this, SLOT(groupBox5Button2_clicked()));\\r\\n    this->connect(this->groupBox5Button3, SIGNAL(clicked()), this, SLOT(groupBox5Button3_clicked()));\\r\\n    this->connect(this->groupBox5Button4, SIGNAL(clicked()), this, SLOT(groupBox5Button4_clicked()));\\r\\n\\r\\n    this->connect(this->groupBox6Button1, SIGNAL(clicked()), this, SLOT(groupBox6Button1_clicked()));\\r\\n    this->connect(this->groupBox6Button2, SIGNAL(clicked()), this, SLOT(groupBox6Button2_clicked()));\\r\\n    this->connect(this->groupBox6Button3, SIGNAL(clicked()), this, SLOT(groupBox6Button3_clicked()));\\r\\n    this->connect(this->groupBox6Button4, SIGNAL(clicked()), this, SLOT(groupBox6Button4_clicked()));\\r\\n    this->connect(this->groupBox6Button5, SIGNAL(clicked()), this, SLOT(groupBox6Button5_clicked()));\\r\\n    this->connect(this->groupBox6Button6, SIGNAL(clicked()), this, SLOT(groupBox6Button6_clicked()));\\r\\n\\r\\n    this->connect(this->openFileButton, SIGNAL(clicked()), this, SLOT(openFileButton_clicked()));\\r\\n    this->connect(this->openFoldButton, SIGNAL(clicked()), this, SLOT(openFoldButton_clicked()));\\r\\n    this->connect(this->clearTextButton, SIGNAL(clicked()), this, SLOT(clearTextButton_clicked()));\\r\\n}\\r\\n\\r\\nvoid MainWindow25::groupBox1Button1_clicked()\\r\\n{\\r\\n\\r\\n}\\r\\n\\r\\nvoid MainWindow25::groupBox1Button2_clicked()\\r\\n{\\r\\n\\r\\n}\\r\\n\\r\\nvoid MainWindow25::groupBox1Button3_clicked()\\r\\n{\\r\\n\\r\\n}\\r\\n\\r\\nvoid MainWindow25::groupBox1Button4_clicked()\\r\\n{\\r\\n\\r\\n}\\r\\n\\r\\nvoid MainWindow25::groupBox1Button5_clicked()\\r\\n{\\r\\n\\r\\n}\\r\\n\\r\\nvoid MainWindow25::groupBox1Button6_clicked()\\r\\n{\\r\\n\\r\\n}\\r\\n\\r\\nvoid MainWindow25::groupBox2Button1_clicked()\\r\\n{\\r\\n\\r\\n}\\r\\n\\r\\nvoid MainWindow25::groupBox2Button2_clicked()\\r\\n{\\r\\n\\r\\n}\\r\\n\\r\\nvoid MainWindow25::groupBox2Button3_clicked()\\r\\n{\\r\\n\\r\\n}\\r\\n\\r\\nvoid MainWindow25::groupBox2Button4_clicked()\\r\\n{\\r\\n\\r\\n}\\r\\n\\r\\nvoid MainWindow25::groupBox2Button5_clicked()\\r\\n{\\r\\n\\r\\n}\\r\\n\\r\\nvoid MainWindow25::groupBox2Button6_clicked()\\r\\n{\\r\\n\\r\\n}\\r\\n\\r\\nvoid MainWindow25::groupBox2Button7_clicked()\\r\\n{\\r\\n\\r\\n}\\r\\n\\r\\nvoid MainWindow25::groupBox3Button1_clicked()\\r\\n{\\r\\n\\r\\n}\\r\\n\\r\\nvoid MainWindow25::groupBox3Button2_clicked()\\r\\n{\\r\\n\\r\\n}\\r\\n\\r\\nvoid MainWindow25::groupBox3Button3_clicked()\\r\\n{\\r\\n\\r\\n}\\r\\n\\r\\nvoid MainWindow25::groupBox3Button4_clicked()\\r\\n{\\r\\n\\r\\n}\\r\\n\\r\\nvoid MainWindow25::groupBox3Button5_clicked()\\r\\n{\\r\\n\\r\\n}\\r\\n\\r\\nvoid MainWindow25::groupBox3Button6_clicked()\\r\\n{\\r\\n\\r\\n}\\r\\n\\r\\nvoid MainWindow25::groupBox3Button7_clicked()\\r\\n{\\r\\n\\r\\n}\\r\\n\\r\\nvoid MainWindow25::groupBox3Button8_clicked()\\r\\n{\\r\\n\\r\\n}\\r\\n\\r\\nvoid MainWindow25::groupBox3Button9_clicked()\\r\\n{\\r\\n\\r\\n}\\r\\n\\r\\nvoid MainWindow25::groupBox3Button10_clicked()\\r\\n{\\r\\n\\r\\n}\\r\\n\\r\\nvoid MainWindow25::groupBox3Button11_clicked()\\r\\n{\\r\\n\\r\\n}\\r\\n\\r\\nvoid MainWindow25::groupBox3Button12_clicked()\\r\\n{\\r\\n\\r\\n}\\r\\n\\r\\nvoid MainWindow25::groupBox3Button13_clicked()\\r\\n{\\r\\n\\r\\n}\\r\\n\\r\\nvoid MainWindow25::groupBox3Button14_clicked()\\r\\n{\\r\\n\\r\\n}\\r\\n\\r\\nvoid MainWindow25::groupBox3Button15_clicked()\\r\\n{\\r\\n\\r\\n}\\r\\n\\r\\nvoid MainWindow25::groupBox3Button16_clicked()\\r\\n{\\r\\n\\r\\n}\\r\\n\\r\\nvoid MainWindow25::groupBox3Button17_clicked()\\r\\n{\\r\\n\\r\\n}\\r\\n\\r\\nvoid MainWindow25::groupBox3Button18_clicked()\\r\\n{\\r\\n\\r\\n}\\r\\n\\r\\nvoid MainWindow25::groupBox3Button19_clicked()\\r\\n{\\r\\n\\r\\n}\\r\\n\\r\\nvoid MainWindow25::groupBox3Button20_clicked()\\r\\n{\\r\\n\\r\\n}\\r\\n\\r\\nvoid MainWindow25::groupBox4Button1_clicked()\\r\\n{\\r\\n\\r\\n}\\r\\n\\r\\nvoid MainWindow25::groupBox4Button2_clicked()\\r\\n{\\r\\n\\r\\n}\\r\\n\\r\\nvoid MainWindow25::groupBox4Button3_clicked()\\r\\n{\\r\\n\\r\\n}\\r\\n\\r\\nvoid MainWindow25::groupBox4Button4_clicked()\\r\\n{\\r\\n\\r\\n}\\r\\n\\r\\nvoid MainWindow25::groupBox4Button5_clicked()\\r\\n{\\r\\n\\r\\n}\\r\\n\\r\\nvoid MainWindow25::groupBox4Button6_clicked()\\r\\n{\\r\\n\\r\\n}\\r\\n\\r\\nvoid MainWindow25::groupBox4Button7_clicked()\\r\\n{\\r\\n\\r\\n}\\r\\n\\r\\nvoid MainWindow25::groupBox4Button8_clicked()\\r\\n{\\r\\n\\r\\n}\\r\\n\\r\\nvoid MainWindow25::groupBox4Button9_clicked()\\r\\n{\\r\\n\\r\\n}\\r\\n\\r\\nvoid MainWindow25::groupBox4Button10_clicked()\\r\\n{\\r\\n\\r\\n}\\r\\n\\r\\nvoid MainWindow25::groupBox4Button11_clicked()\\r\\n{\\r\\n\\r\\n}\\r\\n\\r\\nvoid MainWindow25::groupBox4Button12_clicked()\\r\\n{\\r\\n\\r\\n}\\r\\n\\r\\nvoid MainWindow25::groupBox4Button13_clicked()\\r\\n{\\r\\n\\r\\n}\\r\\n\\r\\nvoid MainWindow25::groupBox4Button14_clicked()\\r\\n{\\r\\n\\r\\n}\\r\\n\\r\\nvoid MainWindow25::groupBox4Button15_clicked()\\r\\n{\\r\\n\\r\\n}\\r\\n\\r\\nvoid MainWindow25::groupBox4Button16_clicked()\\r\\n{\\r\\n\\r\\n}\\r\\n\\r\\nvoid MainWindow25::groupBox4Button17_clicked()\\r\\n{\\r\\n\\r\\n}\\r\\n\\r\\nvoid MainWindow25::groupBox4Button18_clicked()\\r\\n{\\r\\n\\r\\n}\\r\\n\\r\\nvoid MainWindow25::groupBox5Button1_clicked()\\r\\n{\\r\\n//    QTemporaryDir::setAutoRemove();\\r\\n\\r\\n}\\r\\n\\r\\nvoid MainWindow25::groupBox5Button2_clicked()\\r\\n{\\r\\n//    QTemporaryDir::path();\\r\\n    QTemporaryDir temporaryDir(\\"ddd\\");\\r\\n    // 变量删除，临时目录删除\\r\\n    temporaryDir.setAutoRemove(true);\\r\\n    this->plainTextEdit1->appendPlainText(\\"临时目录名称: \\"+ temporaryDir.path());\\r\\n}\\r\\n\\r\\nvoid MainWindow25::groupBox5Button3_clicked()\\r\\n{\\r\\n//    QTemporaryDir::remove();\\r\\n}\\r\\n\\r\\nvoid MainWindow25::groupBox5Button4_clicked()\\r\\n{\\r\\n//    QTemporaryFile::open();\\r\\n    qDebug() << QDir::tempPath();\\r\\n    qDebug() << QCoreApplication::applicationName();\\r\\n    QTemporaryFile temporaryFile(QDir::currentPath() + \\"/aaa\\");\\r\\n    temporaryFile.setAutoRemove(false);\\r\\n    qDebug() << temporaryFile.fileName();\\r\\n    if(temporaryFile.open())\\r\\n    {\\r\\n        temporaryFile.write(\\"aaa\\");\\r\\n        temporaryFile.close();\\r\\n        qDebug() << temporaryFile.fileName();\\r\\n    }\\r\\n}\\r\\n\\r\\nvoid MainWindow25::groupBox6Button1_clicked()\\r\\n{\\r\\n    // addPath\\r\\n    if(this->lineEdit1->text() != NULL)\\r\\n    {\\r\\n        this->plainTextEdit1->appendPlainText(\\"监听目录: \\" + this->lineEdit1->text() + \\"\\\\n\\");\\r\\n        this->fileSystemWatcher.addPath(this->lineEdit1->text());\\r\\n\\r\\n        qDebug() << this->fileSystemWatcher.directories();\\r\\n        qDebug() << this->fileSystemWatcher.files();\\r\\n\\r\\n        this->connect(&this->fileSystemWatcher, SIGNAL(directoryChanged(const QString &)), this, SLOT(fileSystemWatcher_directoryChanged(const QString &)));\\r\\n        this->connect(&this->fileSystemWatcher, SIGNAL(fileChanged(const QString &)), this, SLOT(fileSystemWatcher_fileChanged(const QString &)));\\r\\n    }\\r\\n}\\r\\n\\r\\nvoid MainWindow25::groupBox6Button2_clicked()\\r\\n{\\r\\n    // addPaths\\r\\n}\\r\\n\\r\\nvoid MainWindow25::groupBox6Button3_clicked()\\r\\n{\\r\\n    // directories\\r\\n}\\r\\n\\r\\nvoid MainWindow25::groupBox6Button4_clicked()\\r\\n{\\r\\n    // files\\r\\n}\\r\\n\\r\\nvoid MainWindow25::groupBox6Button5_clicked()\\r\\n{\\r\\n    // removePath\\r\\n    if(this->lineEdit1->text() != NULL)\\r\\n    {\\r\\n        this->plainTextEdit1->appendPlainText(\\"停止监听目录: \\" + this->lineEdit1->text() + \\"\\\\n\\");\\r\\n        this->fileSystemWatcher.removePath(this->lineEdit1->text());\\r\\n\\r\\n        this->disconnect(&this->fileSystemWatcher, SIGNAL(directoryChanged(const QString &)), this, SLOT(fileSystemWatcher_directoryChanged(const QString &)));\\r\\n        this->disconnect(&this->fileSystemWatcher, SIGNAL(fileChanged(const QString &)), this, SLOT(fileSystemWatcher_fileChanged(const QString &)));\\r\\n    }\\r\\n}\\r\\n\\r\\nvoid MainWindow25::groupBox6Button6_clicked()\\r\\n{\\r\\n    // removePaths\\r\\n}\\r\\n\\r\\nvoid MainWindow25::openFileButton_clicked()\\r\\n{\\r\\n    QString fileName = QFileDialog::getOpenFileName(this, \\"打开文件\\", QDir::currentPath(), \\"所有文件(*.*)\\");\\r\\n    if(!fileName.isEmpty())\\r\\n    {\\r\\n        this->lineEdit1->setText(fileName);\\r\\n    }\\r\\n}\\r\\n\\r\\nvoid MainWindow25::openFoldButton_clicked()\\r\\n{\\r\\n    QString foldName = QFileDialog::getExistingDirectory(this, \\"打开目录\\", QDir::currentPath());\\r\\n    if(!foldName.isEmpty())\\r\\n    {\\r\\n        this->lineEdit1->setText(foldName);\\r\\n    }\\r\\n}\\r\\n\\r\\nvoid MainWindow25::clearTextButton_clicked()\\r\\n{\\r\\n    this->plainTextEdit1->clear();\\r\\n}\\r\\n\\r\\nvoid MainWindow25::fileSystemWatcher_directoryChanged(const QString &path)\\r\\n{\\r\\n    this->plainTextEdit1->appendPlainText(QString(\\"%1 目录发生变化!\\\\n\\").arg(path));\\r\\n}\\r\\n\\r\\nvoid MainWindow25::fileSystemWatcher_fileChanged(const QString &path)\\r\\n{\\r\\n    this->plainTextEdit1->appendPlainText(QString(\\"%1 文件发生变化!\\\\n\\").arg(path));\\r\\n}\\r\\n\\r\\n```","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},"f30123eba9621ea24ccf71909dd3eb6dd06ff0cbfa5f360bd76af9a030263111":{"title":"QDataStream 读写文件","hash":"f30123eba9621ea24ccf71909dd3eb6dd06ff0cbfa5f360bd76af9a030263111","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2022-02-02","update":"2022-02-02","content":"\\r\\n```c++\\r\\n#if _MSC_VER >= 1600\\r\\n#pragma execution_character_set(\\"utf-8\\")\\r\\n#endif\\r\\n\\r\\n#include \\"mainwindow24.h\\"\\r\\n\\r\\n#include <QDebug>\\r\\n\\r\\nMainWindow24::MainWindow24(QString title, QWidget *parent) : QMainWindow(parent)\\r\\n{\\r\\n    this->setWindowTitle(title);\\r\\n\\r\\n    this->toolBar1 = new QToolBar();\\r\\n    this->action1 = new QAction();\\r\\n    this->action1->setText(\\"表格复位\\");\\r\\n    this->action2 = new QAction();\\r\\n    this->action2->setText(\\"打开 stm 文件\\");\\r\\n    this->action3 = new QAction();\\r\\n    this->action3->setText(\\"保存 stm 文件\\");\\r\\n    this->action4 = new QAction();\\r\\n    this->action4->setText(\\"打开 dat 文件\\");\\r\\n    this->action5 = new QAction();\\r\\n    this->action5->setText(\\"保存 dat 文件\\");\\r\\n    this->action6 = new QAction();\\r\\n    this->action6->setText(\\"添加行\\");\\r\\n    this->action7 = new QAction();\\r\\n    this->action7->setText(\\"插入行\\");\\r\\n    this->action8 = new QAction();\\r\\n    this->action8->setText(\\"删除行\\");\\r\\n    this->action9 = new QAction();\\r\\n    this->action9->setText(\\"退出\\");\\r\\n    this->toolBar1->addAction(this->action1);\\r\\n    this->toolBar1->addAction(this->action2);\\r\\n    this->toolBar1->addAction(this->action3);\\r\\n    this->toolBar1->addAction(this->action4);\\r\\n    this->toolBar1->addAction(this->action5);\\r\\n    this->toolBar1->addAction(this->action6);\\r\\n    this->toolBar1->addAction(this->action7);\\r\\n    this->toolBar1->addAction(this->action8);\\r\\n    this->toolBar1->addAction(this->action9);\\r\\n    this->addToolBar(this->toolBar1);\\r\\n\\r\\n    this->connect(this->action1, SIGNAL(triggered()), this, SLOT(action1_triggered()));\\r\\n    this->connect(this->action2, SIGNAL(triggered()), this, SLOT(action2_triggered()));\\r\\n    this->connect(this->action3, SIGNAL(triggered()), this, SLOT(action3_triggered()));\\r\\n    this->connect(this->action4, SIGNAL(triggered()), this, SLOT(action4_triggered()));\\r\\n    this->connect(this->action5, SIGNAL(triggered()), this, SLOT(action5_triggered()));\\r\\n    this->connect(this->action6, SIGNAL(triggered()), this, SLOT(action6_triggered()));\\r\\n    this->connect(this->action7, SIGNAL(triggered()), this, SLOT(action7_triggered()));\\r\\n    this->connect(this->action8, SIGNAL(triggered()), this, SLOT(action8_triggered()));\\r\\n    this->connect(this->action9, SIGNAL(triggered()), this, SLOT(action9_triggered()));\\r\\n\\r\\n    this->tableView1 = new QTableView();\\r\\n    this->standardItemModel1 = new QStandardItemModel();\\r\\n    this->standardItemModel1->setColumnCount(6);\\r\\n    QStringList header;\\r\\n    header << \\"测深\\" << \\"垂深\\" << \\"方位\\" << \\"位移\\" << \\"固井质量\\" << \\"测井取样\\";\\r\\n    this->standardItemModel1->setHorizontalHeaderLabels(header);\\r\\n    this->itemSelectionModel1 = new QItemSelectionModel(this->standardItemModel1);\\r\\n    this->tableView1->setModel(this->standardItemModel1);\\r\\n    this->tableView1->setSelectionModel(this->itemSelectionModel1);\\r\\n    this->tableView1->setSelectionMode(QAbstractItemView::ExtendedSelection);\\r\\n    this->tableView1->setSelectionBehavior(QAbstractItemView::SelectItems);\\r\\n\\r\\n    this->tableView1->setItemDelegateForColumn(0, &this->spinBoxDelegate);\\r\\n    this->tableView1->setItemDelegateForColumn(1, &this->doubleSpinBoxDelegate);\\r\\n    this->tableView1->setItemDelegateForColumn(2, &this->doubleSpinBoxDelegate);\\r\\n    this->tableView1->setItemDelegateForColumn(3, &this->doubleSpinBoxDelegate);\\r\\n    this->tableView1->setItemDelegateForColumn(4, &this->comboBoxDelegate);\\r\\n    this->setCentralWidget(this->tableView1);\\r\\n\\r\\n    this->statusBar1 = new QStatusBar();\\r\\n    this->label1 = new QLabel();\\r\\n    this->label2 = new QLabel();\\r\\n    this->statusBar1->addWidget(this->label1);\\r\\n    this->statusBar1->addWidget(this->label2);\\r\\n    this->setStatusBar(this->statusBar1);\\r\\n}\\r\\n\\r\\nvoid MainWindow24::paintEvent(QPaintEvent *event)\\r\\n{\\r\\n    // 绘制窗口背景图片\\r\\n    Q_UNUSED(event);\\r\\n    QString currentPath = QDir::currentPath();\\r\\n    QPainter painter(this);\\r\\n    painter.drawPixmap(0,\\r\\n                       this->toolBar1->height(),\\r\\n                       this->width(),\\r\\n                       this->height() - this->toolBar1->height() - this->statusBar1->height(),\\r\\n                       QPixmap(currentPath + \\"/images/\\" + \\"20210925_47ff6192976c0e3394e4db2f2507efce.jpg\\"));\\r\\n}\\r\\n\\r\\nvoid MainWindow24::resetTable(int row)\\r\\n{\\r\\n    this->standardItemModel1->removeRows(0, this->standardItemModel1->rowCount());\\r\\n\\r\\n    this->standardItemModel1->setRowCount(row);\\r\\n\\r\\n    QString str = this->standardItemModel1->headerData(this->standardItemModel1->columnCount() - 1,\\r\\n                                                       Qt::Horizontal,\\r\\n                                                       Qt::DisplayRole).toString();\\r\\n    for(int i=0; i<row; i++)\\r\\n    {\\r\\n        this->standardItemModel1->setData(this->standardItemModel1->index(i, 0), 0, Qt::DisplayRole);\\r\\n        this->standardItemModel1->setData(this->standardItemModel1->index(i, 1), 0.0, Qt::DisplayRole);\\r\\n        this->standardItemModel1->setData(this->standardItemModel1->index(i, 2), 0.0, Qt::DisplayRole);\\r\\n        this->standardItemModel1->setData(this->standardItemModel1->index(i, 3), 0.0, Qt::DisplayRole);\\r\\n        this->standardItemModel1->setData(this->standardItemModel1->index(i, 4), \\"111\\", Qt::DisplayRole);\\r\\n        this->standardItemModel1->itemFromIndex(this->standardItemModel1->index(i, 5))->setText(str);\\r\\n        this->standardItemModel1->itemFromIndex(this->standardItemModel1->index(i, 5))->setCheckable(true);\\r\\n        this->standardItemModel1->itemFromIndex(this->standardItemModel1->index(i, 5))->setCheckState(Qt::Checked);\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\nvoid MainWindow24::action1_triggered()\\r\\n{\\r\\n    // 表格复位\\r\\n    this->resetTable(10);\\r\\n}\\r\\n\\r\\nvoid MainWindow24::action2_triggered()\\r\\n{\\r\\n    // 打开 stm 文件\\r\\n    QString currentPath = QDir::currentPath();\\r\\n    QString fileName = QFileDialog::getOpenFileName(this, \\"打开文件\\", currentPath, \\"Qt预定义编码数据文件(*.stm)\\");\\r\\n    if(fileName.isEmpty())\\r\\n        return;\\r\\n\\r\\n    QFile file(fileName);\\r\\n    if(file.open(QIODevice::ReadOnly))\\r\\n    {\\r\\n        QDataStream dataSteam(&file);\\r\\n        // 写入和读取的版本一致,或者读取版本高于写入版本\\r\\n        dataSteam.setVersion(QDataStream::Qt_5_12);\\r\\n        qint16 row, column;\\r\\n        dataSteam >> row;\\r\\n        dataSteam >> column;\\r\\n        this->resetTable(row);\\r\\n\\r\\n        QString str;\\r\\n        for(int i=0; i<column; i++)\\r\\n        {\\r\\n            dataSteam >> str;\\r\\n        }\\r\\n\\r\\n        for(int i=0; i<row; i++)\\r\\n        {\\r\\n            qint16 a;\\r\\n            qreal b, c, d;\\r\\n            QString e;\\r\\n            bool f;\\r\\n            dataSteam >> a >> b >> c >> d >> e >> f;\\r\\n\\r\\n            qDebug() << a << b << c << d << e << f;\\r\\n\\r\\n            QModelIndex index1 = this->standardItemModel1->index(i, 0);\\r\\n            QStandardItem *item1 = this->standardItemModel1->itemFromIndex(index1);\\r\\n            item1->setData(a, Qt::DisplayRole);\\r\\n\\r\\n            QModelIndex index2 = this->standardItemModel1->index(i, 1);\\r\\n            QStandardItem *item2 = this->standardItemModel1->itemFromIndex(index2);\\r\\n            item2->setData(b, Qt::DisplayRole);\\r\\n\\r\\n            QModelIndex index3 = this->standardItemModel1->index(i, 2);\\r\\n            QStandardItem *item3 = this->standardItemModel1->itemFromIndex(index3);\\r\\n            item3->setData(c, Qt::DisplayRole);\\r\\n\\r\\n            QModelIndex index4 = this->standardItemModel1->index(i, 3);\\r\\n            QStandardItem *item4 = this->standardItemModel1->itemFromIndex(index4);\\r\\n            item4->setData(d, Qt::DisplayRole);\\r\\n\\r\\n            QModelIndex index5 = this->standardItemModel1->index(i, 4);\\r\\n            QStandardItem *item5 = this->standardItemModel1->itemFromIndex(index5);\\r\\n            item5->setData(e, Qt::DisplayRole);\\r\\n\\r\\n            QModelIndex index6 = this->standardItemModel1->index(i, 5);\\r\\n            QStandardItem *item6 = this->standardItemModel1->itemFromIndex(index6);\\r\\n            if(f)\\r\\n            {\\r\\n                item6->setCheckState(Qt::Checked);\\r\\n            }\\r\\n            else\\r\\n            {\\r\\n                item6->setCheckState(Qt::Unchecked);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nvoid MainWindow24::action3_triggered()\\r\\n{\\r\\n    // 保存 stm 文件\\r\\n    QString currentPath = QDir::currentPath();\\r\\n    QString fileName = QFileDialog::getSaveFileName(this, \\"打开文件\\", currentPath, \\"Qt预定义编码数据文件(*.stm)\\");\\r\\n    if(fileName.isEmpty())\\r\\n        return;\\r\\n\\r\\n    QFile file(fileName);\\r\\n    if(file.open(QIODevice::WriteOnly | QIODevice::Truncate))\\r\\n    {\\r\\n        QDataStream dataStream(&file);\\r\\n        // 写入和读取的版本一致\\r\\n        dataStream.setVersion(QDataStream::Qt_5_12);\\r\\n        qint16 row = this->standardItemModel1->rowCount();\\r\\n        qint16 column = this->standardItemModel1->columnCount();\\r\\n        dataStream << row;\\r\\n        dataStream << column;\\r\\n        // 表头\\r\\n        for(int i=0; i<column;i++)\\r\\n        {\\r\\n            dataStream << this->standardItemModel1->horizontalHeaderItem(i)->text();\\r\\n        }\\r\\n        // 数据\\r\\n        for(int r=0; r<row; r++)\\r\\n        {\\r\\n            qint16 a = this->standardItemModel1->item(r, 0)->data(Qt::DisplayRole).toInt();\\r\\n            qreal b = this->standardItemModel1->item(r, 1)->data(Qt::DisplayRole).toReal();\\r\\n            qreal c = this->standardItemModel1->item(r, 2)->data(Qt::DisplayRole).toReal();\\r\\n            qreal d = this->standardItemModel1->item(r, 3)->data(Qt::DisplayRole).toReal();\\r\\n            QString e = this->standardItemModel1->item(r, 4)->data(Qt::DisplayRole).toString();\\r\\n            bool f = (this->standardItemModel1->item(r, 5)->checkState() == Qt::Checked);\\r\\n\\r\\n            qDebug() << a << b << c << d << e << f;\\r\\n            dataStream << a << b << c << d << e << f;\\r\\n        }\\r\\n        file.close();\\r\\n    }\\r\\n}\\r\\n\\r\\nvoid MainWindow24::action4_triggered()\\r\\n{\\r\\n    // 打开 dat 文件\\r\\n//    QDataStream::readBytes();QDataStream::writeBytes();\\r\\n//    QDataStream::readBytes();QDataStream::writeBytes();\\r\\n    QString currentPath = QDir::currentPath();\\r\\n    QString fileName = QFileDialog::getOpenFileName(this, \\"打开文件\\", currentPath, \\"标准编码数据文件(*.dat)\\");\\r\\n    if(fileName.isEmpty())\\r\\n        return;\\r\\n\\r\\n    QFile file(fileName);\\r\\n    if(file.open(QIODevice::ReadOnly))\\r\\n    {\\r\\n        QDataStream dataStream(&file);\\r\\n        dataStream.setByteOrder(QDataStream::LittleEndian);\\r\\n\\r\\n        qint16 row, column;\\r\\n        dataStream.readRawData((char*)&row, sizeof(qint16));\\r\\n        dataStream.readRawData((char*)&column, sizeof(qint16));\\r\\n        this->resetTable(row);\\r\\n\\r\\n        char *buffer;\\r\\n        uint bufferLength;\\r\\n        for(int i=0; i<column; i++)\\r\\n        {\\r\\n            dataStream.readBytes(buffer, bufferLength);\\r\\n            QString str = QString::fromLocal8Bit(buffer, bufferLength);\\r\\n        }\\r\\n\\r\\n        for(int i=0; i<row; i++)\\r\\n        {\\r\\n            qint16 a;\\r\\n            qreal b, c, d;\\r\\n            char *eChar;\\r\\n            uint eLength;\\r\\n            QString e;\\r\\n            bool f;\\r\\n            dataStream.readRawData((char*)&a, sizeof(qint16));\\r\\n            dataStream.readRawData((char*)&b, sizeof(qreal));\\r\\n            dataStream.readRawData((char*)&c, sizeof(qreal));\\r\\n            dataStream.readRawData((char*)&d, sizeof(qreal));\\r\\n            dataStream.readBytes(eChar, eLength);\\r\\n            e = QString::fromLocal8Bit(eChar, eLength);\\r\\n            dataStream.readRawData((char*)&f, sizeof(bool));\\r\\n\\r\\n            qDebug() << a << b << c << d << e << f;\\r\\n\\r\\n            this->standardItemModel1->itemFromIndex(this->standardItemModel1->index(i, 0))->setData(a, Qt::DisplayRole);\\r\\n            this->standardItemModel1->itemFromIndex(this->standardItemModel1->index(i, 1))->setData(b, Qt::DisplayRole);\\r\\n            this->standardItemModel1->itemFromIndex(this->standardItemModel1->index(i, 2))->setData(c, Qt::DisplayRole);\\r\\n            this->standardItemModel1->itemFromIndex(this->standardItemModel1->index(i, 3))->setData(d, Qt::DisplayRole);\\r\\n            this->standardItemModel1->itemFromIndex(this->standardItemModel1->index(i, 4))->setData(e, Qt::DisplayRole);\\r\\n            if(f)\\r\\n            {\\r\\n                this->standardItemModel1->itemFromIndex(this->standardItemModel1->index(i, 5))->setCheckState(Qt::Checked);\\r\\n            }\\r\\n            else\\r\\n            {\\r\\n                this->standardItemModel1->itemFromIndex(this->standardItemModel1->index(i, 5))->setCheckState(Qt::Unchecked);\\r\\n            }\\r\\n        }\\r\\n        file.close();\\r\\n    }\\r\\n}\\r\\n\\r\\nvoid MainWindow24::action5_triggered()\\r\\n{\\r\\n    // 保存 dat 文件\\r\\n    QString currentPath = QDir::currentPath();\\r\\n    QString fileName = QFileDialog::getSaveFileName(this, \\"打开文件\\", currentPath, \\"标准编码数据文件(*.dat)\\");\\r\\n    if(fileName.isEmpty())\\r\\n        return;\\r\\n\\r\\n    QFile file(fileName);\\r\\n    if(file.open(QIODevice::WriteOnly | QIODevice::Truncate))\\r\\n    {\\r\\n        QDataStream dataSteam(&file);\\r\\n        // 小端字节序\\r\\n        dataSteam.setByteOrder(QDataStream::LittleEndian);\\r\\n        // 大端字节序\\r\\n//        dataSteam.setByteOrder(QDataStream::BigEndian);\\r\\n\\r\\n        qint16 row = this->standardItemModel1->rowCount();\\r\\n        qint16 column = this->standardItemModel1->columnCount();\\r\\n        dataSteam.writeRawData((char *)&row, sizeof (qint16));\\r\\n        dataSteam.writeRawData((char *)&column, sizeof (qint16));\\r\\n        // 表头\\r\\n        QByteArray byteArray;\\r\\n        for(int i=0; i<column; i++)\\r\\n        {\\r\\n            QString str = this->standardItemModel1->horizontalHeaderItem(i)->text();\\r\\n            QByteArray byteArray = str.toUtf8();\\r\\n            dataSteam.writeBytes(byteArray, byteArray.length());\\r\\n        }\\r\\n        // 数据\\r\\n        for(int i=0; i<row; i++)\\r\\n        {\\r\\n            qint16 a = this->standardItemModel1->item(i, 0)->data(Qt::DisplayRole).toInt();\\r\\n            dataSteam.writeRawData((char *)&a, sizeof(qint16));\\r\\n\\r\\n            qreal b = this->standardItemModel1->item(i, 1)->data(Qt::DisplayRole).toReal();\\r\\n            dataSteam.writeRawData((char *)&b, sizeof(qreal));\\r\\n\\r\\n            qreal c = this->standardItemModel1->item(i, 2)->data(Qt::DisplayRole).toReal();\\r\\n            dataSteam.writeRawData((char *)&c, sizeof(qreal));\\r\\n\\r\\n            qreal d = this->standardItemModel1->item(i, 3)->data(Qt::DisplayRole).toReal();\\r\\n            dataSteam.writeRawData((char *)&d, sizeof(qreal));\\r\\n\\r\\n            QString e = this->standardItemModel1->item(i, 4)->data(Qt::DisplayRole).toString();\\r\\n            QByteArray byteArray = e.toUtf8();\\r\\n            dataSteam.writeBytes(byteArray, byteArray.length());\\r\\n\\r\\n            bool f = (this->standardItemModel1->item(i, 5)->checkState() == Qt::Checked);\\r\\n            dataSteam.writeRawData((char *)&f, sizeof(bool));\\r\\n\\r\\n            qDebug() << a << b << c << d << e << f;\\r\\n        }\\r\\n        file.close();\\r\\n    }\\r\\n}\\r\\n\\r\\nvoid MainWindow24::action6_triggered()\\r\\n{\\r\\n    // 添加行\\r\\n    qDebug() << this->standardItemModel1->rowCount();\\r\\n    if(this->standardItemModel1->rowCount() > 1)\\r\\n    {\\r\\n        int columnCount = this->standardItemModel1->columnCount();\\r\\n        QString str = this->standardItemModel1->headerData(columnCount - 1,\\r\\n                                                           Qt::Horizontal,\\r\\n                                                           Qt::DisplayRole).toString();\\r\\n\\r\\n        int rowCount = this->standardItemModel1->rowCount();\\r\\n        this->standardItemModel1->insertRow(rowCount);\\r\\n        this->itemSelectionModel1->clearSelection();\\r\\n        this->itemSelectionModel1->setCurrentIndex(this->standardItemModel1->index(rowCount, 0),\\r\\n                                                   QItemSelectionModel::Select);\\r\\n\\r\\n        this->standardItemModel1->setData(this->standardItemModel1->index(rowCount, 0), 0, Qt::DisplayRole);\\r\\n        this->standardItemModel1->setData(this->standardItemModel1->index(rowCount, 1), 0.0, Qt::DisplayRole);\\r\\n        this->standardItemModel1->setData(this->standardItemModel1->index(rowCount, 2), 0.0, Qt::DisplayRole);\\r\\n        this->standardItemModel1->setData(this->standardItemModel1->index(rowCount, 3), 0.0, Qt::DisplayRole);\\r\\n        this->standardItemModel1->setData(this->standardItemModel1->index(rowCount, 4), \\"111\\", Qt::DisplayRole);\\r\\n        this->standardItemModel1->itemFromIndex(this->standardItemModel1->index(rowCount, 5))->setText(str);\\r\\n        this->standardItemModel1->itemFromIndex(this->standardItemModel1->index(rowCount, 5))->setCheckable(true);\\r\\n        this->standardItemModel1->itemFromIndex(this->standardItemModel1->index(rowCount, 5))->setCheckState(Qt::Checked);\\r\\n    }\\r\\n}\\r\\n\\r\\nvoid MainWindow24::action7_triggered()\\r\\n{\\r\\n    // 插入行\\r\\n    if(this->standardItemModel1->rowCount() > 1)\\r\\n    {\\r\\n        int columnCount = this->standardItemModel1->columnCount();\\r\\n        QString str = this->standardItemModel1->headerData(columnCount - 1, Qt::Horizontal, Qt::DisplayRole).toString();\\r\\n        QModelIndex currentIndex = this->itemSelectionModel1->currentIndex();\\r\\n\\r\\n        this->standardItemModel1->insertRow(currentIndex.row());\\r\\n        this->standardItemModel1->setData(this->standardItemModel1->index(currentIndex.row(), 0), 0, Qt::DisplayRole);\\r\\n        this->standardItemModel1->setData(this->standardItemModel1->index(currentIndex.row(), 1), 0.0, Qt::DisplayRole);\\r\\n        this->standardItemModel1->setData(this->standardItemModel1->index(currentIndex.row(), 2), 0.0, Qt::DisplayRole);\\r\\n        this->standardItemModel1->setData(this->standardItemModel1->index(currentIndex.row(), 3), 0.0, Qt::DisplayRole);\\r\\n        this->standardItemModel1->setData(this->standardItemModel1->index(currentIndex.row(), 4), \\"111\\", Qt::DisplayRole);\\r\\n        this->standardItemModel1->itemFromIndex(this->standardItemModel1->index(currentIndex.row(), 5))->setText(str);\\r\\n        this->standardItemModel1->itemFromIndex(this->standardItemModel1->index(currentIndex.row(), 5))->setCheckable(true);\\r\\n        this->standardItemModel1->itemFromIndex(this->standardItemModel1->index(currentIndex.row(), 5))->setCheckState(Qt::Checked);\\r\\n    }\\r\\n}\\r\\n\\r\\nvoid MainWindow24::action8_triggered()\\r\\n{\\r\\n    // 删除行\\r\\n    QModelIndex currentIndex = this->itemSelectionModel1->currentIndex();\\r\\n    if(currentIndex.row() == this->standardItemModel1->rowCount() - 1)\\r\\n    {\\r\\n        this->standardItemModel1->removeRow(currentIndex.row());\\r\\n    }\\r\\n    else\\r\\n    {\\r\\n        this->standardItemModel1->removeRow(currentIndex.row());\\r\\n        this->itemSelectionModel1->setCurrentIndex(currentIndex, QItemSelectionModel::Select);\\r\\n    }\\r\\n}\\r\\n\\r\\nvoid MainWindow24::action9_triggered()\\r\\n{\\r\\n    // 退出\\r\\n    this->close();\\r\\n}\\r\\n\\r\\n```","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},"6275d91b22c6c250e9817d6be805ecc63de65b36a9b85e1c55cfc7d14624284f":{"title":"文本文件读写","hash":"6275d91b22c6c250e9817d6be805ecc63de65b36a9b85e1c55cfc7d14624284f","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2022-01-17","update":"2022-01-17","content":"\\r\\n```c++\\r\\n#if _MSC_VER >= 1600\\r\\n#pragma execution_character_set(\\"utf-8\\")\\r\\n#endif\\r\\n\\r\\n#include \\"mainwindow23.h\\"\\r\\n\\r\\nMainWindow23::MainWindow23(QString title, QWidget *parent) : QMainWindow(parent)\\r\\n{\\r\\n    this->setWindowTitle(title);\\r\\n\\r\\n    // 设置全局编码为 utf-8\\r\\n    QTextCodec *codec = QTextCodec::codecForName(\\"utf-8\\");\\r\\n    QTextCodec::setCodecForLocale(codec);\\r\\n\\r\\n    this->toolBar1 = new QToolBar();\\r\\n    this->action1 = new QAction();\\r\\n    this->action1->setText(\\"QFile打开\\");\\r\\n    this->action2 = new QAction();\\r\\n    this->action2->setText(\\"QFile另存\\");\\r\\n    this->action3 = new QAction();\\r\\n    this->action3->setText(\\"QTextStream打开\\");\\r\\n    this->action4 = new QAction();\\r\\n    this->action4->setText(\\"QTextStream另存\\");\\r\\n    this->action5 = new QAction();\\r\\n    this->action5->setText(\\"退出\\");\\r\\n    this->toolBar1->addAction(this->action1);\\r\\n    this->toolBar1->addAction(this->action2);\\r\\n    this->toolBar1->addAction(this->action3);\\r\\n    this->toolBar1->addAction(this->action4);\\r\\n    this->toolBar1->addAction(this->action5);\\r\\n    this->addToolBar(this->toolBar1);\\r\\n\\r\\n    this->connect(this->action1, SIGNAL(triggered()), this, SLOT(action1_triggered()));\\r\\n    this->connect(this->action2, SIGNAL(triggered()), this, SLOT(action2_triggered()));\\r\\n    this->connect(this->action3, SIGNAL(triggered()), this, SLOT(action3_triggered()));\\r\\n    this->connect(this->action4, SIGNAL(triggered()), this, SLOT(action4_triggered()));\\r\\n    this->connect(this->action5, SIGNAL(triggered()), this, SLOT(action5_triggered()));\\r\\n\\r\\n    this->tabWidget1 = new QTabWidget();\\r\\n    this->tabWidget1->setVisible(false);\\r\\n    this->tabWidget1->setTabsClosable(true);\\r\\n    this->setCentralWidget(this->tabWidget1);\\r\\n\\r\\n    this->connect(this->tabWidget1, SIGNAL(tabCloseRequested(int)), this, SLOT(tabWidget1_tabCloseRequested(int)));\\r\\n    this->connect(this->tabWidget1, SIGNAL(currentChanged(int)), this, SLOT(tabWidget1_currentChanged(int)));\\r\\n\\r\\n    this->statusBar1 = new QStatusBar();\\r\\n    this->setStatusBar(this->statusBar1);\\r\\n}\\r\\n\\r\\nvoid MainWindow23::paintEvent(QPaintEvent *event)\\r\\n{\\r\\n    // 绘制窗口背景图片\\r\\n    Q_UNUSED(event);\\r\\n    QString currentPath = QDir::currentPath();\\r\\n    QPainter painter(this);\\r\\n    painter.drawPixmap(0,\\r\\n                       this->toolBar1->height(),\\r\\n                       this->width(),\\r\\n                       this->height() - this->toolBar1->height() - this->statusBar1->height(),\\r\\n                       QPixmap(currentPath + \\"/images/\\" + \\"20210925_47ff6192976c0e3394e4db2f2507efce.jpg\\"));\\r\\n}\\r\\n\\r\\n\\r\\nvoid MainWindow23::action1_triggered()\\r\\n{\\r\\n    // QFile打开\\r\\n    QString currentPath = QDir::currentPath();\\r\\n    QString fileName = QFileDialog::getOpenFileName(this, \\"打开文件\\", currentPath, \\"所有文件(*.*)\\");\\r\\n    if(fileName.isEmpty())\\r\\n        return;\\r\\n\\r\\n    QFile file(fileName);\\r\\n//    QIODevice::ReadOnly;\\r\\n//    QIODevice::WriteOnly;\\r\\n//    QIODevice::ReadWrite;\\r\\n//    QIODevice::Append;\\r\\n//    QIODevice::Truncate;\\r\\n//    QIODevice::Text;\\r\\n    if(file.open(QIODevice::ReadOnly | QIODevice::Text))\\r\\n    {\\r\\n        QPlainTextEdit *plainTextEdit1 = new QPlainTextEdit();\\r\\n        plainTextEdit1->setPlainText(file.readAll());\\r\\n        int length = file.fileName().length();\\r\\n        int i = file.fileName().lastIndexOf(\'/\');\\r\\n        this->tabWidget1->addTab(plainTextEdit1, file.fileName().right(length - i -1));\\r\\n        this->tabWidget1->setCurrentWidget(plainTextEdit1);\\r\\n        this->tabWidget1->setVisible(true);\\r\\n        file.close();\\r\\n    }\\r\\n}\\r\\n\\r\\nvoid MainWindow23::action2_triggered()\\r\\n{\\r\\n    // QFile另存\\r\\n    QString currentPath = QDir::currentPath();\\r\\n    QString fileName = QFileDialog::getSaveFileName(this, \\"打开文件\\", currentPath, \\"所有文件(*.*)\\");\\r\\n    if(fileName.isEmpty())\\r\\n        return;\\r\\n\\r\\n    QFile file(fileName);\\r\\n    if(file.open(QIODevice::WriteOnly | QIODevice::Text))\\r\\n    {\\r\\n        QPlainTextEdit *currentPlainTextEdit = qobject_cast<QPlainTextEdit*>(this->tabWidget1->currentWidget());\\r\\n        QString str = currentPlainTextEdit->toPlainText();\\r\\n        QByteArray byteArray = str.toUtf8();\\r\\n        file.write(byteArray, byteArray.length());\\r\\n        file.close();\\r\\n    }\\r\\n}\\r\\n\\r\\nvoid MainWindow23::action3_triggered()\\r\\n{\\r\\n    // QTextStream打开\\r\\n    QString currentPath = QDir::currentPath();\\r\\n    QString fileName = QFileDialog::getOpenFileName(this, \\"打开文件\\", currentPath, \\"所有文件(*.*)\\");\\r\\n    if(fileName.isEmpty())\\r\\n        return;\\r\\n\\r\\n    QFile file(fileName);\\r\\n    if(file.open(QIODevice::ReadOnly | QIODevice::Text))\\r\\n    {\\r\\n        QTextStream textStram(&file);\\r\\n        // 自动检测 Unicode\\r\\n        textStram.setAutoDetectUnicode(true);\\r\\n        QPlainTextEdit *plainTextEdit1 = new QPlainTextEdit();\\r\\n        plainTextEdit1->setPlainText(textStram.readAll());\\r\\n\\r\\n//        while (!textStram.atEnd()) {\\r\\n//            plainTextEdit1->appendPlainText(textStram.readLine());\\r\\n//        }\\r\\n\\r\\n        int length = file.fileName().length();\\r\\n        int i = file.fileName().lastIndexOf(\'/\');\\r\\n        this->tabWidget1->addTab(plainTextEdit1, file.fileName().right(length - i - 1));\\r\\n        this->tabWidget1->setCurrentWidget(plainTextEdit1);\\r\\n        this->tabWidget1->setVisible(true);\\r\\n        file.close();\\r\\n    }\\r\\n}\\r\\n\\r\\nvoid MainWindow23::action4_triggered()\\r\\n{\\r\\n    // QTextStream另存\\r\\n    QString currentPath = QDir::currentPath();\\r\\n    QString fileName = QFileDialog::getSaveFileName(this, \\"打开文件\\", currentPath, \\"所有文件(*.*)\\");\\r\\n    if(fileName.isEmpty())\\r\\n        return;\\r\\n\\r\\n    QFile file(fileName);\\r\\n    if(file.open(QIODevice::WriteOnly | QIODevice::Text))\\r\\n    {\\r\\n        QTextStream textStram(&file);\\r\\n        textStram.setAutoDetectUnicode(true);\\r\\n        QPlainTextEdit *currentPlainTextEdit = qobject_cast<QPlainTextEdit*>(this->tabWidget1->currentWidget());\\r\\n        textStram << currentPlainTextEdit->toPlainText();\\r\\n        file.close();\\r\\n    }\\r\\n}\\r\\n\\r\\nvoid MainWindow23::action5_triggered()\\r\\n{\\r\\n    // 退出\\r\\n    this->close();\\r\\n}\\r\\n\\r\\nvoid MainWindow23::tabWidget1_tabCloseRequested(int index)\\r\\n{\\r\\n    if(index >= 0)\\r\\n    {\\r\\n        this->tabWidget1->removeTab(index);\\r\\n    }\\r\\n}\\r\\n\\r\\nvoid MainWindow23::tabWidget1_currentChanged(int index)\\r\\n{\\r\\n    Q_UNUSED(index);\\r\\n    this->tabWidget1->setVisible(this->tabWidget1->count() > 0);\\r\\n}\\r\\n\\r\\n```","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},"d2c78c2a1b338822d72d948b4113ad8598be906ee481c4b5f481e91856e5dae0":{"title":"QT Splash 窗口","hash":"d2c78c2a1b338822d72d948b4113ad8598be906ee481c4b5f481e91856e5dae0","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2022-01-16","update":"2022-01-16","content":"\\r\\n```c++\\r\\n#if _MSC_VER >= 1600\\r\\n#pragma execution_character_set(\\"utf-8\\")\\r\\n#endif\\r\\n\\r\\n#include \\"dialog22.h\\"\\r\\n#include <QDebug>\\r\\n\\r\\nDialog22::Dialog22(QString title, QWidget *parent) : QDialog(parent)\\r\\n{\\r\\n    this->setWindowTitle(title);\\r\\n\\r\\n    this->imageLabel = new QLabel;\\r\\n    QPixmap pixmap(QDir::currentPath() + \\"/images/20210910_cf71a88e3c4329d76eb8b3c056e1dccf.jpg\\");\\r\\n    this->imageLabel->setPixmap(pixmap.scaled(200, 200));\\r\\n\\r\\n    this->lineEdit1 = new QLineEdit();\\r\\n    this->lineEdit2 = new QLineEdit();\\r\\n    this->lineEdit2->setEchoMode(QLineEdit::Password);\\r\\n    this->checkBox1 = new QCheckBox();\\r\\n    this->checkBox1->setText(\\"记住用户名\\");\\r\\n    QFormLayout *formLayout = new QFormLayout();\\r\\n    formLayout->addRow(\\"用户名\\", this->lineEdit1);\\r\\n    formLayout->addRow(\\"密码\\", this->lineEdit2);\\r\\n    formLayout->addRow(\\"\\", this->checkBox1);\\r\\n\\r\\n    this->okButton = new QPushButton();\\r\\n    this->okButton->setText(\\"登录\\");\\r\\n    this->cancelButton = new QPushButton();\\r\\n    this->cancelButton->setText(\\"取消\\");\\r\\n    QHBoxLayout *layout1 = new QHBoxLayout();\\r\\n    layout1->addWidget(this->okButton);\\r\\n    layout1->addWidget(this->cancelButton);\\r\\n\\r\\n    QVBoxLayout *layout2 = new QVBoxLayout();\\r\\n    layout2->addWidget(this->imageLabel);\\r\\n    layout2->addLayout(formLayout);\\r\\n    layout2->addLayout(layout1);\\r\\n    this->setLayout(layout2);\\r\\n\\r\\n    this->connect(this->okButton, SIGNAL(clicked()), this, SLOT(okButton_clicked()));\\r\\n    this->connect(this->cancelButton, SIGNAL(clicked()), this, SLOT(reject()));\\r\\n\\r\\n    this->setAttribute(Qt::WA_DeleteOnClose);\\r\\n    // 设置为 SplashScreen，无边框\\r\\n    this->setWindowFlag(Qt::SplashScreen);\\r\\n    // 无边框，任务栏显示标题\\r\\n    // this->setWindowFlag(Qt::FramelessWindowHint);\\r\\n\\r\\n    this->readSettings();\\r\\n}\\r\\n\\r\\nDialog22::~Dialog22()\\r\\n{\\r\\n\\r\\n}\\r\\n\\r\\nvoid Dialog22::okButton_clicked()\\r\\n{\\r\\n    QString inputUserName = this->lineEdit1->text();\\r\\n    QString inputPassword = this->encrypt(this->lineEdit2->text());\\r\\n    if(inputUserName == this->username && inputPassword == this->password)\\r\\n    {\\r\\n        this->writeSettings();\\r\\n        this->accept();\\r\\n    }\\r\\n    else\\r\\n    {\\r\\n        this->tryCount ++;\\r\\n        if(this->tryCount > 3)\\r\\n        {\\r\\n            QMessageBox::critical(this, \\"错误\\", \\"用户名或密码错误次数太多!\\", QMessageBox::Ok);\\r\\n            this->reject();\\r\\n        }\\r\\n        else\\r\\n        {\\r\\n            QMessageBox::warning(this, \\"警告\\", \\"用户名或密码错误!\\", QMessageBox::Ok);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nvoid Dialog22::mousePressEvent(QMouseEvent *event)\\r\\n{\\r\\n    if(event->button() == Qt::LeftButton)\\r\\n    {\\r\\n        this->isMoving = true;\\r\\n        this->lastPos = event->globalPos() - this->pos();\\r\\n    }\\r\\n    return QDialog::mousePressEvent(event);\\r\\n}\\r\\n\\r\\nvoid Dialog22::mouseMoveEvent(QMouseEvent *event)\\r\\n{\\r\\n    if(isMoving &&\\r\\n            (event->buttons() && Qt::LeftButton) &&\\r\\n            (event->globalPos() - this->lastPos).manhattanLength() > QApplication::startDragDistance())\\r\\n    {\\r\\n        this->move(event->globalPos() - this->lastPos);\\r\\n        this->lastPos = event->globalPos() - this->pos();\\r\\n    }\\r\\n    return QDialog::mouseMoveEvent(event);\\r\\n}\\r\\n\\r\\nvoid Dialog22::mouseReleaseEvent(QMouseEvent *event)\\r\\n{\\r\\n    this->isMoving = false;\\r\\n}\\r\\n\\r\\nvoid Dialog22::readSettings()\\r\\n{\\r\\n    QString organization = \\"yhw-miracle\\";\\r\\n    QString appName = \\"Demo04\\";\\r\\n    QSettings settings(organization, appName);\\r\\n    bool saved = settings.value(\\"saved\\", false).toBool();\\r\\n    this->username = settings.value(\\"username\\", \\"root\\").toString();\\r\\n    this->password = settings.value(\\"password\\", this->encrypt(\\"root\\")).toString();\\r\\n    if(saved)\\r\\n    {\\r\\n        this->lineEdit1->setText(this->username);\\r\\n        this->checkBox1->setChecked(saved);\\r\\n    }\\r\\n}\\r\\n\\r\\nvoid Dialog22::writeSettings()\\r\\n{\\r\\n    QString organization = \\"yhw-miracle\\";\\r\\n    QString appName = \\"Demo04\\";\\r\\n    QSettings settings(organization, appName);\\r\\n    settings.setValue(\\"username\\", this->username);\\r\\n    settings.setValue(\\"password\\", this->password);\\r\\n    settings.setValue(\\"saved\\", this->checkBox1->isChecked());\\r\\n}\\r\\n\\r\\nQString Dialog22::encrypt(const QString &str)\\r\\n{\\r\\n    QByteArray byteArray;\\r\\n    byteArray.append(str);\\r\\n    // md5 算法\\r\\n    QCryptographicHash hash(QCryptographicHash::Md5);\\r\\n    // 添加数据\\r\\n    hash.addData(byteArray);\\r\\n    // 散列值\\r\\n    QByteArray result = hash.result();\\r\\n    // 16进制字符串\\r\\n    QString md5 = result.toHex();\\r\\n    return md5;\\r\\n}\\r\\n\\r\\n```","author":{"username":"yhw-miracle"},"reader":2,"is_comment":true,"comments":[]},"8991356abc17ce79b5091537ad1d9f069e54e4661490b2250e9b07fc95025e05":{"title":"QT MDI 应用程序","hash":"8991356abc17ce79b5091537ad1d9f069e54e4661490b2250e9b07fc95025e05","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2022-01-15","update":"2022-01-15","content":"\\r\\n```c++\\r\\n#if _MSC_VER >= 1600\\r\\n#pragma execution_character_set(\\"utf-8\\")\\r\\n#endif\\r\\n\\r\\n#include \\"mainwindow21.h\\"\\r\\n\\r\\nMainWindow21::MainWindow21(QString title, QWidget *parent) : QMainWindow(parent)\\r\\n{\\r\\n    this->setWindowTitle(title);\\r\\n    this->toolBar1 = new QToolBar();\\r\\n    this->action1 = new QAction();\\r\\n    this->action1->setText(\\"新建文档\\");\\r\\n    this->action2 = new QAction();\\r\\n    this->action2->setText(\\"打开文档\\");\\r\\n    this->action3 = new QAction();\\r\\n    this->action3->setText(\\"关闭全部\\");\\r\\n    this->action4 = new QAction();\\r\\n    this->action4->setText(\\"剪切\\");\\r\\n    this->action5 = new QAction();\\r\\n    this->action5->setText(\\"复制\\");\\r\\n    this->action6 = new QAction();\\r\\n    this->action6->setText(\\"粘贴\\");\\r\\n    this->action7 = new QAction();\\r\\n    this->action7->setText(\\"字体设置\\");\\r\\n    this->action8 = new QAction();\\r\\n    this->action8->setText(\\"MDI模式\\");\\r\\n    this->action8->setCheckable(true);\\r\\n    this->action9 = new QAction();\\r\\n    this->action9->setText(\\"级联展开\\");\\r\\n    this->action10 = new QAction();\\r\\n    this->action10->setText(\\"平铺展开\\");\\r\\n    this->action11 = new QAction();\\r\\n    this->action11->setText(\\"退出\\");\\r\\n    this->toolBar1->addAction(this->action1);\\r\\n    this->toolBar1->addAction(this->action2);\\r\\n    this->toolBar1->addAction(this->action3);\\r\\n    this->toolBar1->addAction(this->action4);\\r\\n    this->toolBar1->addAction(this->action5);\\r\\n    this->toolBar1->addAction(this->action6);\\r\\n    this->toolBar1->addAction(this->action7);\\r\\n    this->toolBar1->addAction(this->action8);\\r\\n    this->toolBar1->addAction(this->action9);\\r\\n    this->toolBar1->addAction(this->action10);\\r\\n    this->toolBar1->addAction(this->action11);\\r\\n    this->addToolBar(this->toolBar1);\\r\\n\\r\\n    this->connect(this->action1, SIGNAL(triggered()), this, SLOT(action1_triggered()));\\r\\n    this->connect(this->action2, SIGNAL(triggered()), this, SLOT(action2_triggered()));\\r\\n    this->connect(this->action3, SIGNAL(triggered()), this, SLOT(action3_triggered()));\\r\\n    this->connect(this->action4, SIGNAL(triggered()), this, SLOT(action4_triggered()));\\r\\n    this->connect(this->action5, SIGNAL(triggered()), this, SLOT(action5_triggered()));\\r\\n    this->connect(this->action6, SIGNAL(triggered()), this, SLOT(action6_triggered()));\\r\\n    this->connect(this->action7, SIGNAL(triggered()), this, SLOT(action7_triggered()));\\r\\n    this->connect(this->action8, SIGNAL(triggered(bool)), this, SLOT(action8_triggered(bool)));\\r\\n    this->connect(this->action9, SIGNAL(triggered()), this, SLOT(action9_triggered()));\\r\\n    this->connect(this->action10, SIGNAL(triggered()), this, SLOT(action10_triggered()));\\r\\n    this->connect(this->action11, SIGNAL(triggered()), this, SLOT(action11_triggered()));\\r\\n\\r\\n    this->mdiArea = new QMdiArea();\\r\\n    this->setCentralWidget(this->mdiArea);\\r\\n    this->connect(this->mdiArea, SIGNAL(subWindowActivated(QMdiSubWindow *)), this, SLOT(mdiArea_subWindowActivated(QMdiSubWindow *)));\\r\\n\\r\\n    this->statusBar1 = new QStatusBar();\\r\\n    this->setStatusBar(this->statusBar1);\\r\\n}\\r\\n\\r\\nvoid MainWindow21::action1_triggered()\\r\\n{\\r\\n    // 新建文档\\r\\n    MDIWidget1 *mdiWidget = new MDIWidget1(\\"新文档\\", this);\\r\\n    this->mdiArea->addSubWindow(mdiWidget);\\r\\n    mdiWidget->show();\\r\\n}\\r\\n\\r\\nvoid MainWindow21::action2_triggered()\\r\\n{\\r\\n    // 打开文档\\r\\n    // 先获取 MDI 子窗口，再打开文件\\r\\n    MDIWidget1 *mdiWidget;\\r\\n    bool isNeedNewSubWindow = true;\\r\\n    if(this->mdiArea->subWindowList().length() > 0)\\r\\n    {\\r\\n        mdiWidget = qobject_cast<MDIWidget1*>(this->mdiArea->activeSubWindow()->widget());\\r\\n        isNeedNewSubWindow = mdiWidget->getIsFileOpened();\\r\\n    }\\r\\n\\r\\n    if(isNeedNewSubWindow)\\r\\n    {\\r\\n        mdiWidget = new MDIWidget1(\\"新文档\\", this);\\r\\n        QMdiSubWindow *currentMdiSubWindow = this->mdiArea->addSubWindow(mdiWidget);\\r\\n        this->mdiArea->setActiveSubWindow(currentMdiSubWindow);\\r\\n    }\\r\\n\\r\\n    QString currentPath = QDir::currentPath();\\r\\n    QString fileName = QFileDialog::getOpenFileName(this, \\"打开文件\\", currentPath, \\"所有文件(*.*)\\");\\r\\n    if(fileName.isEmpty())\\r\\n    {\\r\\n        return;\\r\\n    }\\r\\n    mdiWidget->loadFromFile(fileName);\\r\\n    mdiWidget->show();\\r\\n    this->action4->setEnabled(true);\\r\\n    this->action5->setEnabled(true);\\r\\n    this->action6->setEnabled(true);\\r\\n    this->action7->setEnabled(true);\\r\\n}\\r\\n\\r\\nvoid MainWindow21::action3_triggered()\\r\\n{\\r\\n    // 关闭全部\\r\\n    this->mdiArea->closeAllSubWindows();\\r\\n}\\r\\n\\r\\nvoid MainWindow21::action4_triggered()\\r\\n{\\r\\n    // 剪切\\r\\n    MDIWidget1 *mdiWidget = static_cast<MDIWidget1 *>(this->mdiArea->activeSubWindow()->widget());\\r\\n    mdiWidget->textCut();\\r\\n}\\r\\n\\r\\nvoid MainWindow21::action5_triggered()\\r\\n{\\r\\n    // 复制\\r\\n    MDIWidget1 *mdiWidget = static_cast<MDIWidget1 *>(this->mdiArea->activeSubWindow()->widget());\\r\\n    mdiWidget->textCopy();\\r\\n}\\r\\n\\r\\nvoid MainWindow21::action6_triggered()\\r\\n{\\r\\n    // 粘贴\\r\\n    MDIWidget1 *mdiWidget = static_cast<MDIWidget1 *>(this->mdiArea->activeSubWindow()->widget());\\r\\n    mdiWidget->textPaste();\\r\\n}\\r\\n\\r\\nvoid MainWindow21::action7_triggered()\\r\\n{\\r\\n    // 字体设置\\r\\n    MDIWidget1 *mdiWidget = static_cast<MDIWidget1 *>(this->mdiArea->activeSubWindow()->widget());\\r\\n    mdiWidget->setEditFont();\\r\\n}\\r\\n\\r\\nvoid MainWindow21::action8_triggered(bool checked)\\r\\n{\\r\\n    // MDI模式\\r\\n    if(checked)\\r\\n    {\\r\\n        // 多页模式\\r\\n        this->mdiArea->setViewMode(QMdiArea::TabbedView);\\r\\n        this->mdiArea->setTabsClosable(true);\\r\\n        this->action9->setEnabled(false);\\r\\n        this->action10->setEnabled(false);\\r\\n    }\\r\\n    else\\r\\n    {\\r\\n        // 子窗口模式\\r\\n        this->mdiArea->setViewMode(QMdiArea::SubWindowView);\\r\\n        this->mdiArea->setTabsClosable(true);\\r\\n        this->action9->setEnabled(true);\\r\\n        this->action10->setEnabled(true);\\r\\n    }\\r\\n}\\r\\n\\r\\nvoid MainWindow21::action9_triggered()\\r\\n{\\r\\n    // 级联展开\\r\\n    this->mdiArea->cascadeSubWindows();\\r\\n}\\r\\n\\r\\nvoid MainWindow21::action10_triggered()\\r\\n{\\r\\n    // 平铺展开\\r\\n    this->mdiArea->tileSubWindows();\\r\\n}\\r\\n\\r\\nvoid MainWindow21::action11_triggered()\\r\\n{\\r\\n    // 退出\\r\\n    this->close();\\r\\n}\\r\\n\\r\\nvoid MainWindow21::mdiArea_subWindowActivated(QMdiSubWindow *mdiSubWindow)\\r\\n{\\r\\n    if(!mdiSubWindow)\\r\\n    {\\r\\n        this->action4->setEnabled(false);\\r\\n        this->action5->setEnabled(false);\\r\\n        this->action6->setEnabled(false);\\r\\n        this->action7->setEnabled(false);\\r\\n        this->statusBar1->clearMessage();\\r\\n    }\\r\\n    else\\r\\n    {\\r\\n        MDIWidget1 *mdiWidget = static_cast<MDIWidget1 *>(this->mdiArea->activeSubWindow()->widget());\\r\\n        this->statusBar1->showMessage(mdiWidget->getCurrentFileName());\\r\\n    }\\r\\n}\\r\\n\\r\\nMDIWidget1::MDIWidget1(QString title, QWidget *parent) : QWidget(parent)\\r\\n{\\r\\n    this->setWindowTitle(title);\\r\\n\\r\\n    this->plainTextWidget1 = new QPlainTextEdit();\\r\\n    QVBoxLayout *layout = new QVBoxLayout();\\r\\n    layout->addWidget(this->plainTextWidget1);\\r\\n    this->setLayout(layout);\\r\\n    this->setAttribute(Qt::WA_DeleteOnClose);\\r\\n}\\r\\n\\r\\nMDIWidget1::~MDIWidget1()\\r\\n{\\r\\n\\r\\n}\\r\\n\\r\\nQString MDIWidget1::getCurrentFileName() const\\r\\n{\\r\\n    return currentFileName;\\r\\n}\\r\\n\\r\\nvoid MDIWidget1::setCurrentFileName(const QString &value)\\r\\n{\\r\\n    currentFileName = value;\\r\\n}\\r\\n\\r\\nbool MDIWidget1::getIsFileOpened() const\\r\\n{\\r\\n    return isFileOpened;\\r\\n}\\r\\n\\r\\nvoid MDIWidget1::setIsFileOpened(bool value)\\r\\n{\\r\\n    isFileOpened = value;\\r\\n}\\r\\n\\r\\nvoid MDIWidget1::loadFromFile(QString &fileName)\\r\\n{\\r\\n    QFile *f = new QFile(fileName);\\r\\n    if(f->open(QIODevice::ReadOnly | QIODevice::Text))\\r\\n    {\\r\\n        QTextStream *textStream = new QTextStream(f);\\r\\n        this->plainTextWidget1->clear();\\r\\n        this->plainTextWidget1->setPlainText(textStream->readAll());\\r\\n        f->close();\\r\\n\\r\\n        this->setCurrentFileName(fileName);\\r\\n        QFileInfo *fileInto = new QFileInfo(fileName);\\r\\n        QString str = fileInto->fileName();\\r\\n        this->setWindowTitle(str);\\r\\n        this->setIsFileOpened(true);\\r\\n    }\\r\\n}\\r\\n\\r\\nvoid MDIWidget1::setEditFont()\\r\\n{\\r\\n    QFont font = this->plainTextWidget1->font();\\r\\n    bool ok;\\r\\n    font = QFontDialog::getFont(&ok, font);\\r\\n    this->plainTextWidget1->setFont(font);\\r\\n}\\r\\n\\r\\nvoid MDIWidget1::textCut()\\r\\n{\\r\\n    this->plainTextWidget1->cut();\\r\\n}\\r\\n\\r\\nvoid MDIWidget1::textCopy()\\r\\n{\\r\\n    this->plainTextWidget1->copy();\\r\\n}\\r\\n\\r\\nvoid MDIWidget1::textPaste()\\r\\n{\\r\\n    this->plainTextWidget1->paste();\\r\\n}\\r\\n\\r\\n```","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},"6e99b7fc114b5666f5b65cda619c8dbb9d96650722971aecae1069f303743392":{"title":"QT 多窗口应用程序","hash":"6e99b7fc114b5666f5b65cda619c8dbb9d96650722971aecae1069f303743392","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2022-01-14","update":"2022-01-14","content":"\\r\\n```c++\\r\\n#if _MSC_VER >= 1600\\r\\n#pragma execution_character_set(\\"utf-8\\")\\r\\n#endif\\r\\n\\r\\n#include \\"mainwindow20.h\\"\\r\\n#include <QDebug>\\r\\n\\r\\nMainWindow20::MainWindow20(QString title, QWidget *parent) : QMainWindow(parent)\\r\\n{\\r\\n    this->setWindowTitle(title);\\r\\n\\r\\n    this->toolBar1 = new QToolBar();\\r\\n    this->action1 = new QAction();\\r\\n    this->action1->setText(\\"嵌入式Widget\\");\\r\\n    this->action2 = new QAction();\\r\\n    this->action2->setText(\\"独立Widget\\");\\r\\n    this->action3 = new QAction();\\r\\n    this->action3->setText(\\"嵌入式MainWindow\\");\\r\\n    this->action4 = new QAction();\\r\\n    this->action4->setText(\\"独立MainWindow\\");\\r\\n    this->action5 = new QAction();\\r\\n    this->action5->setText(\\"退出\\");\\r\\n\\r\\n    this->toolBar1->addAction(this->action1);\\r\\n    this->toolBar1->addAction(this->action2);\\r\\n    this->toolBar1->addSeparator();\\r\\n    this->toolBar1->addAction(this->action3);\\r\\n    this->toolBar1->addAction(this->action4);\\r\\n    this->toolBar1->addSeparator();\\r\\n    this->toolBar1->addAction(this->action5);\\r\\n    this->addToolBar(this->toolBar1);\\r\\n\\r\\n    this->statusBar1 = new QStatusBar();\\r\\n    this->setStatusBar(this->statusBar1);\\r\\n\\r\\n    this->connect(this->action1, SIGNAL(triggered()), this, SLOT(action1_triggered()));\\r\\n    this->connect(this->action2, SIGNAL(triggered()), this, SLOT(action2_triggered()));\\r\\n    this->connect(this->action3, SIGNAL(triggered()), this, SLOT(action3_triggered()));\\r\\n    this->connect(this->action4, SIGNAL(triggered()), this, SLOT(action4_triggered()));\\r\\n    this->connect(this->action5, SIGNAL(triggered()), this, SLOT(action5_triggered()));\\r\\n\\r\\n//    this->setWindowState(Qt::WindowMaximized);\\r\\n\\r\\n    // TODO 实现定时刷新窗口背景图片\\r\\n//    this->timer1 = new QTimer(this);\\r\\n//    this->timer1->setInterval(1000);\\r\\n//    this->timer1->start();\\r\\n//    this->connect(this->timer1, SIGNAL(timeout()), this, SLOT(timer1_timeout()));\\r\\n\\r\\n    this->tabWidget1 = new QTabWidget();\\r\\n    this->tabWidget1->setVisible(false);\\r\\n    this->tabWidget1->clear();\\r\\n    this->tabWidget1->setTabsClosable(true);\\r\\n    this->setCentralWidget(this->tabWidget1);\\r\\n\\r\\n    this->connect(this->tabWidget1, SIGNAL(tabCloseRequested(int)), this, SLOT(tabWidget1_tabCloseRequested(int)));\\r\\n    this->connect(this->tabWidget1, SIGNAL(currentChanged(int)), this, SLOT(tabWidget1_currentChanged(int)));\\r\\n}\\r\\n\\r\\nvoid MainWindow20::paintEvent(QPaintEvent *event)\\r\\n{\\r\\n    // 绘制窗口背景图片\\r\\n    Q_UNUSED(event);\\r\\n    QString currentPath = QDir::currentPath();\\r\\n    QPainter painter(this);\\r\\n    painter.drawPixmap(0,\\r\\n                       this->toolBar1->height(),\\r\\n                       this->width(),\\r\\n                       this->height() - this->toolBar1->height() - this->statusBar1->height(),\\r\\n                       QPixmap(currentPath + \\"/images/\\" + \\"20210925_47ff6192976c0e3394e4db2f2507efce.jpg\\"));\\r\\n}\\r\\n\\r\\n\\r\\nvoid MainWindow20::action1_triggered()\\r\\n{\\r\\n    QFormDoc *formDoc = new QFormDoc(this->action1->text(), this);\\r\\n    formDoc->setAttribute(Qt::WA_DeleteOnClose);\\r\\n    int currentIndex = this->tabWidget1->addTab(formDoc, QString(\\"Doc_%1\\").arg(this->tabWidget1->count()));\\r\\n    this->tabWidget1->setCurrentIndex(currentIndex);\\r\\n    this->tabWidget1->setVisible(true);\\r\\n}\\r\\n\\r\\nvoid MainWindow20::action2_triggered()\\r\\n{\\r\\n    QFormDoc *formDoc = new QFormDoc(this->action2->text());\\r\\n    formDoc->setAttribute(Qt::WA_DeleteOnClose);\\r\\n//    formDoc->setWindowFlag(Qt::Window, true);\\r\\n//    formDoc->setWindowFlag(Qt::CustomizeWindowHint, true);\\r\\n//    formDoc->setWindowFlag(Qt::WindowMinMaxButtonsHint, true);\\r\\n//    formDoc->setWindowFlag(Qt::WindowCloseButtonHint, true);\\r\\n//    formDoc->setWindowFlag(Qt::WindowStaysOnTopHint, true);\\r\\n//    formDoc->setWindowFlag(Qt::WindowStaysOnBottomHint, true);\\r\\n    formDoc->setWindowOpacity(0.2);\\r\\n    formDoc->setWindowModality(Qt::WindowModal);\\r\\n    formDoc->show();\\r\\n}\\r\\n\\r\\n\\r\\nvoid MainWindow20::action3_triggered()\\r\\n{\\r\\n    MainWindow19 *mainWindow19 = new MainWindow19(this->action3->text(), this);\\r\\n    mainWindow19->setAttribute(Qt::WA_DeleteOnClose);\\r\\n    int currentIndex = this->tabWidget1->addTab(mainWindow19, QString(\\"Table_%1\\").arg(this->tabWidget1->count()));\\r\\n    this->tabWidget1->setCurrentIndex(currentIndex);\\r\\n    this->tabWidget1->setVisible(true);\\r\\n}\\r\\n\\r\\n\\r\\nvoid MainWindow20::action4_triggered()\\r\\n{\\r\\n    MainWindow19 *mainWindow19 = new MainWindow19(this->action3->text(), this);\\r\\n    mainWindow19->setAttribute(Qt::WA_DeleteOnClose);\\r\\n    mainWindow19->show();\\r\\n}\\r\\n\\r\\n\\r\\nvoid MainWindow20::action5_triggered()\\r\\n{\\r\\n    this->close();\\r\\n}\\r\\n\\r\\nvoid MainWindow20::tabWidget1_tabCloseRequested(int index)\\r\\n{\\r\\n    if(index >= 0)\\r\\n    {\\r\\n        QWidget *widget = this->tabWidget1->widget(index);\\r\\n        widget->close();\\r\\n    }\\r\\n}\\r\\n\\r\\nvoid MainWindow20::tabWidget1_currentChanged(int index)\\r\\n{\\r\\n    Q_UNUSED(index);\\r\\n    this->tabWidget1->setVisible(this->tabWidget1->count() > 0);\\r\\n}\\r\\n\\r\\nvoid MainWindow20::timer1_timeout()\\r\\n{\\r\\n    QString currentPath = QDir::currentPath();\\r\\n    currentPath += \\"/images/\\";\\r\\n    QStringList fileFilters;\\r\\n    fileFilters << \\"*.jpg\\";\\r\\n    QDir *currentDir = new QDir(currentPath);\\r\\n    currentDir->setNameFilters(fileFilters);\\r\\n    QFileInfoList imageFileInfoList = currentDir->entryInfoList();\\r\\n    int randomValue = QRandomGenerator::global()->bounded(imageFileInfoList.length());\\r\\n    qDebug() << randomValue;\\r\\n\\r\\n}\\r\\n\\r\\nQFormDoc::QFormDoc(QString title, QWidget *parent) : QWidget(parent)\\r\\n{\\r\\n    this->setWindowTitle(title);\\r\\n\\r\\n    this->toolBar1 = new QToolBar();\\r\\n    this->action1 = new QAction();\\r\\n    this->action1->setText(\\"打开\\");\\r\\n    this->action2 = new QAction();\\r\\n    this->action2->setText(\\"字体\\");\\r\\n    this->action3 = new QAction();\\r\\n    this->action3->setText(\\"剪切\\");\\r\\n    this->action4 = new QAction();\\r\\n    this->action4->setText(\\"复制\\");\\r\\n    this->action5 = new QAction();\\r\\n    this->action5->setText(\\"粘贴\\");\\r\\n    this->action6 = new QAction();\\r\\n    this->action6->setText(\\"撤销\\");\\r\\n    this->action7 = new QAction();\\r\\n    this->action7->setText(\\"重复\\");\\r\\n    this->action8 = new QAction();\\r\\n    this->action8->setText(\\"关闭\\");\\r\\n    this->toolBar1->addAction(this->action1);\\r\\n    this->toolBar1->addAction(this->action2);\\r\\n    this->toolBar1->addAction(this->action3);\\r\\n    this->toolBar1->addAction(this->action4);\\r\\n    this->toolBar1->addAction(this->action5);\\r\\n    this->toolBar1->addAction(this->action6);\\r\\n    this->toolBar1->addAction(this->action7);\\r\\n    this->toolBar1->addAction(this->action8);\\r\\n\\r\\n    this->connect(this->action1, SIGNAL(triggered()), this, SLOT(action1_triggered()));\\r\\n    this->connect(this->action2, SIGNAL(triggered()), this, SLOT(action2_triggered()));\\r\\n    this->connect(this->action3, SIGNAL(triggered()), this, SLOT(action3_triggered()));\\r\\n    this->connect(this->action4, SIGNAL(triggered()), this, SLOT(action4_triggered()));\\r\\n    this->connect(this->action5, SIGNAL(triggered()), this, SLOT(action5_triggered()));\\r\\n    this->connect(this->action6, SIGNAL(triggered()), this, SLOT(action6_triggered()));\\r\\n    this->connect(this->action7, SIGNAL(triggered()), this, SLOT(action7_triggered()));\\r\\n    this->connect(this->action8, SIGNAL(triggered()), this, SLOT(action8_triggered()));\\r\\n\\r\\n\\r\\n    QVBoxLayout *layout = new QVBoxLayout();\\r\\n    layout->addWidget(this->toolBar1);\\r\\n    this->plainTextEdit1 = new QPlainTextEdit();\\r\\n    layout->addWidget(this->plainTextEdit1);\\r\\n    this->setLayout(layout);\\r\\n}\\r\\n\\r\\nvoid QFormDoc::action1_triggered()\\r\\n{\\r\\n\\r\\n}\\r\\n\\r\\nvoid QFormDoc::action2_triggered()\\r\\n{\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\nvoid QFormDoc::action3_triggered()\\r\\n{\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\nvoid QFormDoc::action4_triggered()\\r\\n{\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\nvoid QFormDoc::action5_triggered()\\r\\n{\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\nvoid QFormDoc::action6_triggered()\\r\\n{\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\nvoid QFormDoc::action7_triggered()\\r\\n{\\r\\n\\r\\n}\\r\\n\\r\\nvoid QFormDoc::action8_triggered()\\r\\n{\\r\\n\\r\\n}\\r\\n\\r\\n```","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},"59ea31a1cc4fa39882f50bf8f28bfb7deb9e3baee93f8cb4058ba0b83e857e5f":{"title":"QT 自定义对话框","hash":"59ea31a1cc4fa39882f50bf8f28bfb7deb9e3baee93f8cb4058ba0b83e857e5f","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2022-01-13","update":"2022-01-13","content":"\\r\\n```c++\\r\\n#if _MSC_VER >= 1600\\r\\n#pragma execution_character_set(\\"utf-8\\")\\r\\n#endif\\r\\n\\r\\n#include \\"mainwindow19.h\\"\\r\\n\\r\\n#include <QDebug>\\r\\n\\r\\nMainWindow19::MainWindow19(QString title, QWidget *parent) : QMainWindow(parent)\\r\\n{\\r\\n    this->setWindowTitle(title);\\r\\n\\r\\n    this->toolBar1 = new QToolBar();\\r\\n    this->toolBar1->setWindowTitle(\\"自定义对话框操作\\");\\r\\n    this->action1 = new QAction();\\r\\n    this->action1->setText(\\"设置表头标题\\");\\r\\n    this->action2= new QAction();\\r\\n    this->action2->setText(\\"设置行数列数\\");\\r\\n    this->action3 = new QAction();\\r\\n    this->action3->setText(\\"定位单元格\\");\\r\\n    this->action4 = new QAction();\\r\\n    this->action4->setText(\\"退出\\");\\r\\n    this->toolBar1->addAction(this->action1);\\r\\n    this->toolBar1->addAction(this->action2);\\r\\n    this->toolBar1->addAction(this->action3);\\r\\n    this->toolBar1->addAction(this->action4);\\r\\n    this->addToolBar(this->toolBar1);\\r\\n\\r\\n    this->tableView1 = new QTableView();\\r\\n    this->setCentralWidget(this->tableView1);\\r\\n\\r\\n    this->statusBar1 = new QStatusBar();\\r\\n    this->label1 = new QLabel();\\r\\n    this->label2 = new QLabel();\\r\\n    this->statusBar1->addWidget(this->label1);\\r\\n    this->statusBar1->addWidget(this->label2);\\r\\n    this->setStatusBar(this->statusBar1);\\r\\n\\r\\n    this->connect(this->action1, SIGNAL(triggered()), this, SLOT(action1_triggered()));\\r\\n    this->connect(this->action2, SIGNAL(triggered()), this, SLOT(action2_triggered()));\\r\\n    this->connect(this->action3, SIGNAL(triggered()), this, SLOT(action3_triggered()));\\r\\n    this->connect(this->action4, SIGNAL(triggered()), this, SLOT(action4_triggered()));\\r\\n    this->connect(this->tableView1, SIGNAL(clicked(const QModelIndex&)), this, SLOT(tableView1_clicked(const QModelIndex&)));\\r\\n\\r\\n    this->standardItemModel1 = new QStandardItemModel(this);\\r\\n    this->itemSelectionModel1 = new QItemSelectionModel(this->standardItemModel1);\\r\\n    this->tableView1->setModel(this->standardItemModel1);\\r\\n    this->tableView1->setSelectionModel(this->itemSelectionModel1);\\r\\n}\\r\\n\\r\\n\\r\\nvoid MainWindow19::action1_triggered()\\r\\n{\\r\\n    Dialog1 *dialog1;\\r\\n    QStringList headerList;\\r\\n    if(this->standardItemModel1->columnCount() > 0)\\r\\n    {\\r\\n        for(int i=0; i<this->standardItemModel1->columnCount(); i++)\\r\\n        {\\r\\n            headerList << this->standardItemModel1->headerData(i, Qt::Horizontal, Qt::DisplayRole).toString();\\r\\n        }\\r\\n    }\\r\\n    dialog1 = new Dialog1(this->action1->text(), headerList, this);\\r\\n//    dialog1->setModal(true);\\r\\n    int result = dialog1->exec();\\r\\n    if(result == QDialog::Accepted)\\r\\n    {\\r\\n        // tableview 的数据模型的表头有删减，直接设置删减后的表头不会更新\\r\\n        this->standardItemModel1->setColumnCount(dialog1->getstringListModel1().length());\\r\\n        this->standardItemModel1->setHorizontalHeaderLabels(dialog1->getstringListModel1());\\r\\n    }\\r\\n}\\r\\n\\r\\nvoid MainWindow19::action2_triggered()\\r\\n{\\r\\n    Dialog2 *dialog2;\\r\\n    int row = this->standardItemModel1->rowCount();\\r\\n    int column = this->standardItemModel1->columnCount();\\r\\n    dialog2 = new Dialog2(this->action1->text(), row, column, this);\\r\\n    // 模态对话框 setModal(true)/exec()\\r\\n    // 非模态对话框 setModal(false)/show()\\r\\n//    dialog2->setModal(true);\\r\\n    int result = dialog2->exec();\\r\\n    if(result == QDialog::Accepted)\\r\\n    {\\r\\n        int row = dialog2->getSpintBox1Value();\\r\\n        int column = dialog2->getSpintBox2Value();\\r\\n\\r\\n        this->standardItemModel1->setRowCount(row);\\r\\n        this->standardItemModel1->setColumnCount(column);\\r\\n    }\\r\\n    delete dialog2;\\r\\n}\\r\\n\\r\\nvoid MainWindow19::action3_triggered()\\r\\n{\\r\\n    int row = this->standardItemModel1->rowCount();\\r\\n    int column = this->standardItemModel1->columnCount();\\r\\n    QModelIndex currentIndex = this->tableView1->currentIndex();\\r\\n    if(row > 0 && column > 0 && currentIndex.row() >=0 && currentIndex.column() >= 0)\\r\\n    {\\r\\n        this->dialog3 = new Dialog3(this->action1->text(), currentIndex.row(), currentIndex.column(), row, column, this);\\r\\n\\r\\n        this->connect(this->dialog3, SIGNAL(setCellTextSignal(int, int, QString)), this, SLOT(setCellTextSlot(int, int, QString)));\\r\\n        this->connect(this->dialog3, SIGNAL(dealCloseDialog3Signal(bool)), this, SLOT(dealCloseDialog3Slot(bool)));\\r\\n        this->connect(this, SIGNAL(cellIndexChanged1(int)), this->dialog3, SLOT(setCurrentRowSlot(int)));\\r\\n        this->connect(this, SIGNAL(cellIndexChanged2(int)), this->dialog3, SLOT(setCurrentColumnSlot(int)));\\r\\n        this->dialog3->show();\\r\\n    }\\r\\n}\\r\\n\\r\\nvoid MainWindow19::action4_triggered()\\r\\n{\\r\\n    this->close();\\r\\n}\\r\\n\\r\\nvoid MainWindow19::setCellText(int row, int column, QString text)\\r\\n{\\r\\n    QModelIndex currentIndex = this->standardItemModel1->index(row, column);\\r\\n    this->itemSelectionModel1->clearSelection();\\r\\n    this->itemSelectionModel1->setCurrentIndex(currentIndex, QItemSelectionModel::Select);\\r\\n    this->standardItemModel1->setData(currentIndex, text, Qt::DisplayRole);\\r\\n}\\r\\n\\r\\nvoid MainWindow19::dealCloseDialog3(bool enable)\\r\\n{\\r\\n    this->action3->setEnabled(enable);\\r\\n    this->dialog3 = NULL;\\r\\n}\\r\\n\\r\\nvoid MainWindow19::closeEvent(QCloseEvent *event)\\r\\n{\\r\\n    QMessageBox::StandardButton result = QMessageBox::question(this, \\"确认\\", \\"确认退出吗?\\", QMessageBox::Yes | QMessageBox::No | QMessageBox::Cancel, QMessageBox::No);\\r\\n    if(result == QMessageBox::Yes)\\r\\n    {\\r\\n        event->accept();\\r\\n    }\\r\\n    else\\r\\n    {\\r\\n        event->ignore();\\r\\n    }\\r\\n}\\r\\n\\r\\nvoid MainWindow19::setCellTextSlot(int row, int column, QString text)\\r\\n{\\r\\n    QModelIndex currentIndex = this->standardItemModel1->index(row, column);\\r\\n    this->itemSelectionModel1->clearSelection();\\r\\n    this->itemSelectionModel1->setCurrentIndex(currentIndex, QItemSelectionModel::Select);\\r\\n    this->standardItemModel1->setData(currentIndex, text, Qt::DisplayRole);\\r\\n}\\r\\n\\r\\nvoid MainWindow19::dealCloseDialog3Slot(bool enable)\\r\\n{\\r\\n    this->action3->setEnabled(enable);\\r\\n}\\r\\n\\r\\nvoid MainWindow19::tableView1_clicked(const QModelIndex &index)\\r\\n{\\r\\n    emit this->cellIndexChanged1(index.row());\\r\\n    emit this->cellIndexChanged2(index.column());\\r\\n}\\r\\n\\r\\nDialog1::Dialog1(QString title, const QStringList &headerList, QWidget *parent) : QDialog(parent)\\r\\n{\\r\\n    this->setWindowTitle(title);\\r\\n\\r\\n    this->groupBox1 = new QGroupBox();\\r\\n    this->groupBox1->setTitle(\\"表头标题\\");\\r\\n    this->listView1 = new QListView();\\r\\n    this->okButton = new QPushButton();\\r\\n    this->okButton->setText(\\"确定\\");\\r\\n    this->cancelButton = new QPushButton();\\r\\n    this->cancelButton->setText(\\"取消\\");\\r\\n    QGridLayout *gridLayout1 = new QGridLayout();\\r\\n    gridLayout1->addWidget(this->listView1, 0, 0, 1, 2);\\r\\n    gridLayout1->addWidget(this->okButton, 1, 0);\\r\\n    gridLayout1->addWidget(this->cancelButton, 1, 1);\\r\\n    this->groupBox1->setLayout(gridLayout1);\\r\\n    QVBoxLayout *layout = new QVBoxLayout();\\r\\n    layout->addWidget(this->groupBox1);\\r\\n    this->setLayout(layout);\\r\\n\\r\\n    this->stringListModel1 = new QStringListModel(this);\\r\\n    this->listView1->setContextMenuPolicy(Qt::CustomContextMenu);\\r\\n    this->listView1->setModel(this->stringListModel1);\\r\\n    this->setHeaderList(headerList);\\r\\n    this->stringListModel1->setStringList(this->getHeaderList());\\r\\n\\r\\n    this->action1 = new QAction();\\r\\n    this->action1->setText(\\"新增\\");\\r\\n    this->action2 = new QAction();\\r\\n    this->action2->setText(\\"修改\\");\\r\\n    this->action3 = new QAction();\\r\\n    this->action3->setText(\\"删除\\");\\r\\n\\r\\n    this->connect(this->okButton, SIGNAL(clicked()), this, SLOT(accept()));\\r\\n    this->connect(this->cancelButton, SIGNAL(clicked()), this, SLOT(reject()));\\r\\n    this->connect(this->listView1, SIGNAL(customContextMenuRequested(const QPoint&)), this, SLOT(tableView1_customContextMenuRequested(const QPoint&)));\\r\\n    this->connect(this->action1, SIGNAL(triggered()), this, SLOT(action1_triggered()));\\r\\n    this->connect(this->action2, SIGNAL(triggered()), this, SLOT(action2_triggered()));\\r\\n    this->connect(this->action3, SIGNAL(triggered()), this, SLOT(action3_triggered()));\\r\\n}\\r\\n\\r\\nDialog1::~Dialog1()\\r\\n{\\r\\n\\r\\n}\\r\\n\\r\\nconst QStringList &Dialog1::getHeaderList() const\\r\\n{\\r\\n    return headerList;\\r\\n}\\r\\n\\r\\nvoid Dialog1::setHeaderList(const QStringList &newHeaderList)\\r\\n{\\r\\n    headerList = newHeaderList;\\r\\n}\\r\\n\\r\\nconst QStringList &Dialog1::getstringListModel1()\\r\\n{\\r\\n    this->setHeaderList(this->stringListModel1->stringList());\\r\\n    return this->getHeaderList();\\r\\n}\\r\\n\\r\\nvoid Dialog1::tableView1_customContextMenuRequested(const QPoint &pos)\\r\\n{\\r\\n    Q_UNUSED(pos);\\r\\n    QMenu *menu = new QMenu(this->listView1);\\r\\n    menu->addAction(this->action1);\\r\\n//    menu->addAction(this->action2);\\r\\n    menu->addAction(this->action3);\\r\\n    menu->exec(QCursor::pos());\\r\\n    delete menu;\\r\\n}\\r\\n\\r\\nvoid Dialog1::action1_triggered()\\r\\n{\\r\\n\\r\\n    this->stringListModel1->insertRow(this->stringListModel1->rowCount());\\r\\n    QModelIndex index = this->stringListModel1->index(this->stringListModel1->rowCount() -  1, 0, QModelIndex());\\r\\n    this->stringListModel1->setData(index, \\"new item\\", Qt::DisplayRole);\\r\\n\\r\\n}\\r\\n\\r\\nvoid Dialog1::action2_triggered()\\r\\n{\\r\\n\\r\\n}\\r\\n\\r\\nvoid Dialog1::action3_triggered()\\r\\n{\\r\\n    QModelIndex currentIndex = this->listView1->currentIndex();\\r\\n    this->stringListModel1->removeRow(currentIndex.row());\\r\\n}\\r\\n\\r\\n\\r\\nDialog2::Dialog2(QString title, int row, int column, QWidget *parent) : QDialog(parent)\\r\\n{\\r\\n    this->setWindowTitle(title);\\r\\n\\r\\n    this->groupBox1 = new QGroupBox();\\r\\n    this->label1 = new QLabel();\\r\\n    this->label1->setText(\\"行数:\\");\\r\\n    this->spinBox1 = new QSpinBox();\\r\\n    this->label2 = new QLabel();\\r\\n    this->label2->setText(\\"列数:\\");\\r\\n    this->spinBox2 = new QSpinBox();\\r\\n    this->okButton = new QPushButton();\\r\\n    this->okButton->setText(\\"确定\\");\\r\\n    this->cancelButton = new QPushButton();\\r\\n    this->cancelButton->setText(\\"取消\\");\\r\\n    QGridLayout *gridLayout1 = new QGridLayout();\\r\\n    gridLayout1->addWidget(this->label1, 0, 0);\\r\\n    gridLayout1->addWidget(this->spinBox1, 0, 1);\\r\\n    gridLayout1->addWidget(this->label2, 1, 0);\\r\\n    gridLayout1->addWidget(this->spinBox2, 1, 1);\\r\\n    gridLayout1->addWidget(this->okButton, 2, 0);\\r\\n    gridLayout1->addWidget(this->cancelButton, 2, 1);\\r\\n    this->groupBox1->setLayout(gridLayout1);\\r\\n    QVBoxLayout *layout = new QVBoxLayout();\\r\\n    layout->addWidget(this->groupBox1);\\r\\n    this->setLayout(layout);\\r\\n\\r\\n    this->connect(this->okButton, SIGNAL(clicked()), this, SLOT(accept()));\\r\\n    this->connect(this->cancelButton, SIGNAL(clicked()), this, SLOT(reject()));\\r\\n\\r\\n    this->setRow(row);\\r\\n    this->setColumn(column);\\r\\n    this->spinBox1->setValue(this->getRow());\\r\\n    this->spinBox2->setValue(this->getColumn());\\r\\n}\\r\\n\\r\\nDialog2::~Dialog2()\\r\\n{\\r\\n\\r\\n}\\r\\n\\r\\nint Dialog2::getRow() const\\r\\n{\\r\\n    return row;\\r\\n}\\r\\n\\r\\nvoid Dialog2::setRow(int newRow)\\r\\n{\\r\\n    row = newRow;\\r\\n}\\r\\n\\r\\nint Dialog2::getColumn() const\\r\\n{\\r\\n    return column;\\r\\n}\\r\\n\\r\\nvoid Dialog2::setColumn(int newColumn)\\r\\n{\\r\\n    column = newColumn;\\r\\n}\\r\\n\\r\\nint Dialog2::getSpintBox1Value()\\r\\n{\\r\\n    this->setRow(this->spinBox1->value());\\r\\n    return this->getRow();\\r\\n}\\r\\n\\r\\nint Dialog2::getSpintBox2Value()\\r\\n{\\r\\n    this->setColumn(this->spinBox2->value());\\r\\n    return this->getColumn();\\r\\n}\\r\\n\\r\\nDialog3::Dialog3(QString title, int currentRow, int currentColumn, int maxRow, int maxColumn, QWidget *parent) : QDialog(parent)\\r\\n{\\r\\n    this->setWindowTitle(title);\\r\\n\\r\\n    this->groupBox1 = new QGroupBox();\\r\\n    this->label1 = new QLabel();\\r\\n    this->label1->setText(\\"行数:\\");\\r\\n    this->spinBox1 = new QSpinBox();\\r\\n    this->spinBox1->setMinimum(0);\\r\\n    this->spinBox1->setMaximum(maxRow - 1);\\r\\n    this->spinBox1->setValue(currentRow);\\r\\n    this->checkBox1 = new QCheckBox();\\r\\n    this->checkBox1->setText(\\"行增\\");\\r\\n    if(maxRow - 1 == 0)\\r\\n    {\\r\\n        this->checkBox1->setEnabled(false);\\r\\n    }\\r\\n\\r\\n    this->label2 = new QLabel();\\r\\n    this->label2->setText(\\"列数:\\");\\r\\n    this->spinBox2 = new QSpinBox();\\r\\n    this->spinBox2->setMinimum(0);\\r\\n    this->spinBox2->setMaximum(maxColumn - 1);\\r\\n    this->spinBox2->setValue(currentColumn);\\r\\n    this->checkBox2 = new QCheckBox();\\r\\n    this->checkBox2->setText(\\"列增\\");\\r\\n    if(maxColumn - 1 == 0)\\r\\n    {\\r\\n        this->checkBox2->setEnabled(false);\\r\\n    }\\r\\n\\r\\n    this->label3 = new QLabel();\\r\\n    this->label3->setText(\\"内容:\\");\\r\\n    this->lineEdit1 = new QLineEdit();\\r\\n    this->setCellButton = new QPushButton();\\r\\n    this->setCellButton->setText(\\"设置内容\\");\\r\\n\\r\\n    this->okButton = new QPushButton();\\r\\n    this->okButton->setText(\\"确定\\");\\r\\n    this->cancelButton = new QPushButton();\\r\\n    this->cancelButton->setText(\\"取消\\");\\r\\n    QGridLayout *gridLayout1 = new QGridLayout();\\r\\n    gridLayout1->addWidget(this->label1, 0, 0);\\r\\n    gridLayout1->addWidget(this->spinBox1, 0, 1);\\r\\n    gridLayout1->addWidget(this->checkBox1, 0, 2);\\r\\n    gridLayout1->addWidget(this->label2, 1, 0);\\r\\n    gridLayout1->addWidget(this->spinBox2, 1, 1);\\r\\n    gridLayout1->addWidget(this->checkBox2, 1, 2);\\r\\n    gridLayout1->addWidget(this->label3, 2, 0);\\r\\n    gridLayout1->addWidget(this->lineEdit1, 2, 1);\\r\\n    gridLayout1->addWidget(this->setCellButton, 2, 2);\\r\\n    gridLayout1->addWidget(this->okButton, 3, 0);\\r\\n    gridLayout1->addWidget(this->cancelButton, 3, 2);\\r\\n    this->groupBox1->setLayout(gridLayout1);\\r\\n    QVBoxLayout *layout = new QVBoxLayout();\\r\\n    layout->addWidget(this->groupBox1);\\r\\n    this->setLayout(layout);\\r\\n\\r\\n    this->connect(this->okButton, SIGNAL(clicked()), this, SLOT(accept()));\\r\\n    this->connect(this->cancelButton, SIGNAL(clicked()), this, SLOT(reject()));\\r\\n    this->connect(this->setCellButton, SIGNAL(clicked()), this, SLOT(setCellButton_clicked()));\\r\\n\\r\\n    this->setCurrentRow(currentRow);\\r\\n    this->setCurrentColumn(currentColumn);\\r\\n    this->setMaxRow(maxRow);\\r\\n    this->setMaxColumn(maxColumn);\\r\\n}\\r\\n\\r\\nDialog3::~Dialog3()\\r\\n{\\r\\n\\r\\n}\\r\\n\\r\\nint Dialog3::getCurrentRow() const\\r\\n{\\r\\n    return currentRow;\\r\\n}\\r\\n\\r\\nvoid Dialog3::setCurrentRow(int newCurrentRow)\\r\\n{\\r\\n    currentRow = newCurrentRow;\\r\\n}\\r\\n\\r\\nvoid Dialog3::setCurrentRowSlot(int newCurrentRow)\\r\\n{\\r\\n    currentRow = newCurrentRow;\\r\\n}\\r\\n\\r\\nint Dialog3::getCurrentColumn() const\\r\\n{\\r\\n    return currentColumn;\\r\\n}\\r\\n\\r\\nvoid Dialog3::setCurrentColumn(int newCurrentColumn)\\r\\n{\\r\\n    currentColumn = newCurrentColumn;\\r\\n}\\r\\n\\r\\nvoid Dialog3::setCurrentColumnSlot(int newCurrentColumn)\\r\\n{\\r\\n    currentColumn = newCurrentColumn;\\r\\n}\\r\\n\\r\\n\\r\\nint Dialog3::getMaxRow() const\\r\\n{\\r\\n    return maxRow;\\r\\n}\\r\\n\\r\\nvoid Dialog3::setMaxRow(int newMaxRow)\\r\\n{\\r\\n    maxRow = newMaxRow;\\r\\n}\\r\\n\\r\\nint Dialog3::getMaxColumn() const\\r\\n{\\r\\n    return maxColumn;\\r\\n}\\r\\n\\r\\nvoid Dialog3::setMaxColumn(int newMaxColumn)\\r\\n{\\r\\n    maxColumn = newMaxColumn;\\r\\n}\\r\\n\\r\\nvoid Dialog3::setCellButton_clicked()\\r\\n{\\r\\n    this->setCurrentRow(this->spinBox1->value());\\r\\n    this->setCurrentColumn(this->spinBox2->value());\\r\\n\\r\\n    // 获取主窗口\\r\\n//    MainWindow19 *parentMainWindow = qobject_cast<MainWindow19 *>(parentWidget());\\r\\n//    parentMainWindow->setCellText(this->getCurrentRow(), this->getCurrentColumn(), this->lineEdit1->text());\\r\\n    emit this->setCellTextSignal(this->getCurrentRow(), this->getCurrentColumn(), this->lineEdit1->text());\\r\\n\\r\\n    if(this->checkBox1->isChecked())\\r\\n    {\\r\\n        this->spinBox1->setValue(this->getCurrentRow() + 1);\\r\\n    }\\r\\n    if(this->checkBox2->isChecked())\\r\\n    {\\r\\n        this->spinBox2->setValue(this->getCurrentColumn() + 1);\\r\\n    }\\r\\n}\\r\\n\\r\\nvoid Dialog3::showEvent(QShowEvent *event)\\r\\n{\\r\\n    Q_UNUSED(event);\\r\\n    emit this->dealCloseDialog3Signal(false);\\r\\n}\\r\\n\\r\\nvoid Dialog3::closeEvent(QCloseEvent *event)\\r\\n{\\r\\n    Q_UNUSED(event);\\r\\n//    MainWindow19 *parentMainWindow = qobject_cast<MainWindow19*>(parentWidget());\\r\\n//    parentMainWindow->dealCloseDialog3(true);\\r\\n    emit this->dealCloseDialog3Signal(true);\\r\\n}\\r\\n\\r\\n```","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},"2fd1196d3dbf8bac688fb53fd63c7692b29e7948cdee4263a6ce9e6a68811fd7":{"title":"QT 对话框","hash":"2fd1196d3dbf8bac688fb53fd63c7692b29e7948cdee4263a6ce9e6a68811fd7","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2022-01-12","update":"2022-01-12","content":"\\r\\n```c++\\r\\n#if _MSC_VER >= 1600\\r\\n#pragma execution_character_set(\\"utf-8\\")\\r\\n#endif\\r\\n\\r\\n#include \\"mainwindow18.h\\"\\r\\n\\r\\nMainWindow18::MainWindow18(QString title, QWidget *parent) : QMainWindow(parent)\\r\\n{\\r\\n    this->setWindowTitle(title);\\r\\n\\r\\n    this->groupBox1 = new QGroupBox();\\r\\n    this->groupBox1->setTitle(\\"文件对话框\\");\\r\\n    this->button1 = new QPushButton();\\r\\n    this->button1->setText(\\"打开一个文件\\");\\r\\n    this->button2 = new QPushButton();\\r\\n    this->button2->setText(\\"打开多个文件\\");\\r\\n    this->button3 = new QPushButton();\\r\\n    this->button3->setText(\\"选择已存在目录\\");\\r\\n    this->button4 = new QPushButton();\\r\\n    this->button4->setText(\\"保存文件\\");\\r\\n    QGridLayout *gridLayout1 = new QGridLayout();\\r\\n    gridLayout1->addWidget(this->button1, 0, 0);\\r\\n    gridLayout1->addWidget(this->button2, 0, 1);\\r\\n    gridLayout1->addWidget(this->button3, 1, 0);\\r\\n    gridLayout1->addWidget(this->button4, 1, 1);\\r\\n    this->groupBox1->setLayout(gridLayout1);\\r\\n\\r\\n    this->groupBox2 = new QGroupBox();\\r\\n    this->groupBox2->setTitle(\\"颜色对话框\\");\\r\\n    this->button5 = new QPushButton();\\r\\n    this->button5->setText(\\"选择颜色\\");\\r\\n    this->label1 = new QLabel();\\r\\n    this->label1->setText(\\"111\\");\\r\\n    QGridLayout *gridLayout2 = new QGridLayout();\\r\\n    gridLayout2->addWidget(this->button5, 0, 0);\\r\\n    gridLayout2->addWidget(this->label1, 0, 1);\\r\\n    this->groupBox2->setLayout(gridLayout2);\\r\\n\\r\\n    this->groupBox3 = new QGroupBox();\\r\\n    this->groupBox3->setTitle(\\"字体对话框\\");\\r\\n    this->button6 = new QPushButton();\\r\\n    this->button6->setText(\\"选择字体\\");\\r\\n    this->label2 = new QLabel();\\r\\n    this->label2->setText(\\"222\\");\\r\\n    QGridLayout *gridLayout3 = new QGridLayout();\\r\\n    gridLayout3->addWidget(this->button6, 0, 0);\\r\\n    gridLayout3->addWidget(this->label2, 0, 1);\\r\\n    this->groupBox3->setLayout(gridLayout3);\\r\\n\\r\\n    this->groupBox4 = new QGroupBox();\\r\\n    this->groupBox4->setTitle(\\"输入对话框\\");\\r\\n    this->button7 = new QPushButton();\\r\\n    this->button7->setText(\\"输入字符串\\");\\r\\n    this->button8 = new QPushButton();\\r\\n    this->button8->setText(\\"输入整数\\");\\r\\n    this->button9 = new QPushButton();\\r\\n    this->button9->setText(\\"输入浮点数\\");\\r\\n    this->button10 = new QPushButton();\\r\\n    this->button10->setText(\\"条目选择输入\\");\\r\\n    QGridLayout *gridLayout4 = new QGridLayout();\\r\\n    gridLayout4->addWidget(this->button7, 0, 0);\\r\\n    gridLayout4->addWidget(this->button8, 0, 1);\\r\\n    gridLayout4->addWidget(this->button9, 1, 0);\\r\\n    gridLayout4->addWidget(this->button10, 1, 1);\\r\\n    this->groupBox4->setLayout(gridLayout4);\\r\\n\\r\\n    this->groupBox5 = new QGroupBox();\\r\\n    this->groupBox5->setTitle(\\"消息对话框\\");\\r\\n    this->button11 = new QPushButton();\\r\\n    this->button11->setText(\\"information\\");\\r\\n    this->button12 = new QPushButton();\\r\\n    this->button12->setText(\\"question\\");\\r\\n    this->button13 = new QPushButton();\\r\\n    this->button13->setText(\\"warning\\");\\r\\n    this->button14 = new QPushButton();\\r\\n    this->button14->setText(\\"critical\\");\\r\\n    this->button15 = new QPushButton();\\r\\n    this->button15->setText(\\"about\\");\\r\\n    this->button16 = new QPushButton();\\r\\n    this->button16->setText(\\"aboutQt\\");\\r\\n    QGridLayout *gridLayout5 = new QGridLayout();\\r\\n    gridLayout5->addWidget(this->button11, 0, 0);\\r\\n    gridLayout5->addWidget(this->button12, 0, 1);\\r\\n    gridLayout5->addWidget(this->button13, 0, 2);\\r\\n    gridLayout5->addWidget(this->button14, 1, 0);\\r\\n    gridLayout5->addWidget(this->button15, 1, 1);\\r\\n    gridLayout5->addWidget(this->button16, 1, 2);\\r\\n    this->groupBox5->setLayout(gridLayout5);\\r\\n\\r\\n    QVBoxLayout *layout6 = new QVBoxLayout();\\r\\n    layout6->addWidget(this->groupBox1);\\r\\n    layout6->addWidget(this->groupBox2);\\r\\n    layout6->addWidget(this->groupBox3);\\r\\n    layout6->addWidget(this->groupBox4);\\r\\n    layout6->addWidget(this->groupBox5);\\r\\n    QWidget *widget = new QWidget();\\r\\n    widget->setLayout(layout6);\\r\\n    this->setCentralWidget(widget);\\r\\n\\r\\n    this->connect(this->button1, SIGNAL(clicked()), this, SLOT(button1_clicked()));\\r\\n    this->connect(this->button2, SIGNAL(clicked()), this, SLOT(button2_clicked()));\\r\\n    this->connect(this->button3, SIGNAL(clicked()), this, SLOT(button3_clicked()));\\r\\n    this->connect(this->button4, SIGNAL(clicked()), this, SLOT(button4_clicked()));\\r\\n    this->connect(this->button5, SIGNAL(clicked()), this, SLOT(button5_clicked()));\\r\\n    this->connect(this->button6, SIGNAL(clicked()), this, SLOT(button6_clicked()));\\r\\n    this->connect(this->button7, SIGNAL(clicked()), this, SLOT(button7_clicked()));\\r\\n    this->connect(this->button8, SIGNAL(clicked()), this, SLOT(button8_clicked()));\\r\\n    this->connect(this->button9, SIGNAL(clicked()), this, SLOT(button9_clicked()));\\r\\n    this->connect(this->button10, SIGNAL(clicked()), this, SLOT(button10_clicked()));\\r\\n    this->connect(this->button11, SIGNAL(clicked()), this, SLOT(button11_clicked()));\\r\\n    this->connect(this->button12, SIGNAL(clicked()), this, SLOT(button12_clicked()));\\r\\n    this->connect(this->button13, SIGNAL(clicked()), this, SLOT(button13_clicked()));\\r\\n    this->connect(this->button14, SIGNAL(clicked()), this, SLOT(button14_clicked()));\\r\\n    this->connect(this->button15, SIGNAL(clicked()), this, SLOT(button15_clicked()));\\r\\n    this->connect(this->button16, SIGNAL(clicked()), this, SLOT(button16_clicked()));\\r\\n}\\r\\n\\r\\nvoid MainWindow18::button1_clicked()\\r\\n{\\r\\n    QString currentPath = QDir::currentPath();\\r\\n    QString fileName = QFileDialog::getOpenFileName(this, \\"选择一个文件\\", currentPath, \\"文本文件(*.txt);;所有文件(*.*)\\");\\r\\n    if(!fileName.isEmpty())\\r\\n    {\\r\\n        QMessageBox::information(this, \\"提示\\", QString(\\"选择的文件是:%1\\").arg(fileName), QMessageBox::Ok);\\r\\n    }\\r\\n}\\r\\n\\r\\nvoid MainWindow18::button2_clicked()\\r\\n{\\r\\n    QString currentPath = QDir::currentPath();\\r\\n    QStringList fileNames = QFileDialog::getOpenFileNames(this, \\"选择多个文件\\", currentPath, \\"文本文件(*.txt);;所有文件(*.*)\\");\\r\\n    if(fileNames.length() > 0)\\r\\n    {\\r\\n        QString str1;\\r\\n        foreach(QString str, fileNames)\\r\\n        {\\r\\n            str1 += str + \\"\\\\n\\";\\r\\n        }\\r\\n        QMessageBox::information(this, \\"提示\\", str1, QMessageBox::Ok);\\r\\n    }\\r\\n}\\r\\n\\r\\nvoid MainWindow18::button3_clicked()\\r\\n{\\r\\n    QString currentPath = QDir::currentPath();\\r\\n    QString selectedDir = QFileDialog::getExistingDirectory(this, \\"选择一个目录\\", currentPath, QFileDialog::ShowDirsOnly);\\r\\n    if(!selectedDir.isEmpty())\\r\\n    {\\r\\n        QMessageBox::information(this, \\"提示\\", selectedDir, QMessageBox::Ok);\\r\\n    }\\r\\n}\\r\\n\\r\\nvoid MainWindow18::button4_clicked()\\r\\n{\\r\\n    QString currentPath = QDir::currentPath();\\r\\n    QString fileName = QFileDialog::getSaveFileName(this, \\"保存文件\\", currentPath, \\"文本文件(*.txt);;所有文件(*.*)\\");\\r\\n    if(!fileName.isEmpty())\\r\\n    {\\r\\n        QMessageBox::information(this, \\"提示\\", fileName, QMessageBox::Ok);\\r\\n    }\\r\\n}\\r\\n\\r\\nvoid MainWindow18::button5_clicked()\\r\\n{\\r\\n    QPalette palette = this->label1->palette();\\r\\n    QColor currentColor = palette.color(QPalette::Text);\\r\\n    QColor color = QColorDialog::getColor(currentColor, this, \\"选择颜色\\");\\r\\n    if(color.isValid())\\r\\n    {\\r\\n        palette.setColor(QPalette::WindowText, color);\\r\\n        // palette.setColor(QPalette::Text, color);\\r\\n        this->label1->setPalette(palette);\\r\\n    }\\r\\n}\\r\\n\\r\\nvoid MainWindow18::button6_clicked()\\r\\n{\\r\\n    QFont currentFont = this->label2->font();\\r\\n    bool ok = false;\\r\\n    QFont font = QFontDialog::getFont(&ok, currentFont);\\r\\n    if(ok)\\r\\n    {\\r\\n        this->label2->setFont(font);\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\nvoid MainWindow18::button7_clicked()\\r\\n{\\r\\n    bool ok = false;\\r\\n    QString text = QInputDialog::getText(this, \\"输入文字对话框\\", \\"名称:\\", QLineEdit::Normal, \\"默认输入\\", &ok);\\r\\n    // QString text = QInputDialog::getText(this, \\"输入文字对话框\\", \\"名称:\\", QLineEdit::Password, \\"默认输入\\", &ok);\\r\\n    if(ok && !text.isEmpty())\\r\\n    {\\r\\n        QMessageBox::information(this, \\"提示\\", text, QMessageBox::Ok);\\r\\n    }\\r\\n}\\r\\n\\r\\nvoid MainWindow18::button8_clicked()\\r\\n{\\r\\n    bool ok = false;\\r\\n    int value = QInputDialog::getInt(this, \\"输入整数对话框\\", \\"名称:\\", 0, 0, 100, 1, &ok);\\r\\n    if(ok)\\r\\n    {\\r\\n        QMessageBox::information(this, \\"提示\\", QString(\\"%1\\").arg(value), QMessageBox::Ok);\\r\\n    }\\r\\n}\\r\\n\\r\\nvoid MainWindow18::button9_clicked()\\r\\n{\\r\\n    bool ok = false;\\r\\n    float value = QInputDialog::getDouble(this, \\"输入浮点数对话框\\", \\"名称:\\", 0.111, 0, 100, 3, &ok);\\r\\n    if(ok)\\r\\n    {\\r\\n        QMessageBox::information(this, \\"提示\\", QString(\\"%1\\").arg(value), QMessageBox::Ok);\\r\\n    }\\r\\n}\\r\\n\\r\\nvoid MainWindow18::button10_clicked()\\r\\n{\\r\\n    QStringList item;\\r\\n    item << \\"aaa\\" << \\"bbb\\" << \\"ccc\\";\\r\\n    bool ok = false;\\r\\n    QString text = QInputDialog::getItem(this, \\"条目选择对话框\\", \\"名称:\\", item, 0, true, &ok);\\r\\n    if(ok && !text.isEmpty())\\r\\n    {\\r\\n        QMessageBox::information(this, \\"提示\\", QString(\\"%1\\").arg(text), QMessageBox::Ok);\\r\\n    }\\r\\n}\\r\\n\\r\\nvoid MainWindow18::button11_clicked()\\r\\n{\\r\\n    QMessageBox::information(this, \\"提示\\", \\"aaa\\", QMessageBox::Ok, QMessageBox::NoButton);\\r\\n}\\r\\n\\r\\nvoid MainWindow18::button12_clicked()\\r\\n{\\r\\n    QMessageBox::StandardButton result = QMessageBox::question(this, \\"提示\\", \\"aaa\\", QMessageBox::Yes | QMessageBox::No, QMessageBox::NoButton);\\r\\n    if(result == QMessageBox::Yes)\\r\\n    {\\r\\n        QMessageBox::information(this, \\"提示\\", \\"Yes\\", QMessageBox::Ok, QMessageBox::NoButton);\\r\\n    }\\r\\n    else if(result == QMessageBox::No)\\r\\n    {\\r\\n        QMessageBox::information(this, \\"提示\\", \\"No\\", QMessageBox::Ok, QMessageBox::NoButton);\\r\\n    }\\r\\n    else\\r\\n    {\\r\\n        // 不会执行这里\\r\\n        QMessageBox::information(this, \\"提示\\", \\"无选择\\", QMessageBox::Ok, QMessageBox::NoButton);\\r\\n    }\\r\\n}\\r\\n\\r\\nvoid MainWindow18::button13_clicked()\\r\\n{\\r\\n    QMessageBox::warning(this, \\"提示\\", \\"aaa\\", QMessageBox::Ok);\\r\\n}\\r\\n\\r\\nvoid MainWindow18::button14_clicked()\\r\\n{\\r\\n    QMessageBox::critical(this, \\"提示\\", \\"aaa\\", QMessageBox::Ok);\\r\\n}\\r\\n\\r\\nvoid MainWindow18::button15_clicked()\\r\\n{\\r\\n    QMessageBox::about(this, \\"提示\\", \\"aaa\\");\\r\\n}\\r\\n\\r\\nvoid MainWindow18::button16_clicked()\\r\\n{\\r\\n    QMessageBox::aboutQt(this, \\"aaa\\");\\r\\n}\\r\\n\\r\\n```","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},"51f66c981a1d3c58ea8241382ae5c66ec4c5d6124d153a3de6bfa15410f03679":{"title":"QStandardItmeModel","hash":"51f66c981a1d3c58ea8241382ae5c66ec4c5d6124d153a3de6bfa15410f03679","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2022-01-11","update":"2022-01-11","content":"\\r\\n```c++\\r\\n#if _MSC_VER >= 1600\\r\\n#pragma execution_character_set(\\"utf-8\\")\\r\\n#endif\\r\\n\\r\\n#include \\"mainwindow17.h\\"\\r\\n\\r\\n#include <QDebug>\\r\\n\\r\\nMainWindow17::MainWindow17(QString title, QWidget *parent) : QMainWindow(parent)\\r\\n{\\r\\n    this->setWindowTitle(title);\\r\\n\\r\\n    this->toolBar1 = new QToolBar();\\r\\n    this->toolBar1->setWindowTitle(\\"QTableView 操作\\");\\r\\n    this->action1 = new QAction();\\r\\n    this->action1->setText(\\"打开文件\\");\\r\\n    this->action2 = new QAction();\\r\\n    this->action2->setText(\\"另存文件\\");\\r\\n    this->action3 = new QAction();\\r\\n    this->action3->setText(\\"模型数据预览\\");\\r\\n    this->action4 = new QAction();\\r\\n    this->action4->setText(\\"添加行\\");\\r\\n    this->action5 = new QAction();\\r\\n    this->action5->setText(\\"插入行\\");\\r\\n    this->action6 = new QAction();\\r\\n    this->action6->setText(\\"删除行\\");\\r\\n    this->action7 = new QAction();\\r\\n    this->action7->setCheckable(true);\\r\\n    this->action7->setText(\\"居左\\");\\r\\n    this->action8 = new QAction();\\r\\n    this->action8->setCheckable(true);\\r\\n    this->action8->setText(\\"居中\\");\\r\\n    this->action9 = new QAction();\\r\\n    this->action9->setCheckable(true);\\r\\n    this->action9->setText(\\"居右\\");\\r\\n    this->action10 = new QAction();\\r\\n    this->action10->setCheckable(true);\\r\\n    this->action10->setText(\\"粗体\\");\\r\\n    this->action11 = new QAction();\\r\\n    this->action11->setText(\\"退出\\");\\r\\n\\r\\n    this->toolBar1->addAction(this->action1);\\r\\n    this->toolBar1->addAction(this->action2);\\r\\n    this->toolBar1->addAction(this->action3);\\r\\n    this->toolBar1->addSeparator();\\r\\n    this->toolBar1->addAction(this->action4);\\r\\n    this->toolBar1->addAction(this->action5);\\r\\n    this->toolBar1->addAction(this->action6);\\r\\n    this->toolBar1->addSeparator();\\r\\n    this->toolBar1->addAction(this->action7);\\r\\n    this->toolBar1->addAction(this->action8);\\r\\n    this->toolBar1->addAction(this->action9);\\r\\n    this->toolBar1->addAction(this->action10);\\r\\n    this->toolBar1->addSeparator();\\r\\n    this->toolBar1->addAction(this->action11);\\r\\n    this->addToolBar(this->toolBar1);\\r\\n\\r\\n    this->tableView1 = new QTableView();\\r\\n    this->plainTextEdit1 = new QPlainTextEdit();\\r\\n    this->splitter1 = new QSplitter();\\r\\n    this->splitter1->setOrientation(Qt::Horizontal);\\r\\n    this->splitter1->addWidget(this->tableView1);\\r\\n    this->splitter1->addWidget(this->plainTextEdit1);\\r\\n    this->setCentralWidget(this->splitter1);\\r\\n\\r\\n    this->label1 = new QLabel();\\r\\n    this->label2 = new QLabel();\\r\\n    this->label3 = new QLabel();\\r\\n    this->statusBar1 = new QStatusBar();\\r\\n    this->statusBar1->addWidget(this->label1);\\r\\n    this->statusBar1->addWidget(this->label2);\\r\\n    this->statusBar1->addWidget(this->label3);\\r\\n    this->setStatusBar(this->statusBar1);\\r\\n\\r\\n    this->connect(this->action1, SIGNAL(triggered()), this, SLOT(action1_triggered()));\\r\\n    this->connect(this->action2, SIGNAL(triggered()), this, SLOT(action2_triggered()));\\r\\n    this->connect(this->action3, SIGNAL(triggered()), this, SLOT(action3_triggered()));\\r\\n    this->connect(this->action4, SIGNAL(triggered()), this, SLOT(action4_triggered()));\\r\\n    this->connect(this->action5, SIGNAL(triggered()), this, SLOT(action5_triggered()));\\r\\n    this->connect(this->action6, SIGNAL(triggered()), this, SLOT(action6_triggered()));\\r\\n    this->connect(this->action7, SIGNAL(triggered()), this, SLOT(action7_triggered()));\\r\\n    this->connect(this->action8, SIGNAL(triggered()), this, SLOT(action8_triggered()));\\r\\n    this->connect(this->action9, SIGNAL(triggered()), this, SLOT(action9_triggered()));\\r\\n    this->connect(this->action10, SIGNAL(triggered(bool)), this, SLOT(action10_triggered(bool)));\\r\\n    this->connect(this->action11, SIGNAL(triggered()), this, SLOT(action11_triggered()));\\r\\n\\r\\n    this->standardItemModel1 = new QStandardItemModel(2, 6);\\r\\n    this->itemSelectionModel1 = new QItemSelectionModel(this->standardItemModel1);\\r\\n    this->connect(this->itemSelectionModel1, SIGNAL(currentChanged(QModelIndex, QModelIndex)), this, SLOT(itemSelectionModel1_currentChanged(QModelIndex, QModelIndex)));\\r\\n\\r\\n    this->tableView1->setModel(this->standardItemModel1);\\r\\n    this->tableView1->setSelectionModel(this->itemSelectionModel1);\\r\\n    this->tableView1->setSelectionMode(QAbstractItemView::ExtendedSelection);\\r\\n    this->tableView1->setSelectionBehavior(QAbstractItemView::SelectItems);\\r\\n\\r\\n    this->tableView1->setItemDelegateForColumn(0, &this->spinBoxDelegate);\\r\\n    this->tableView1->setItemDelegateForColumn(1, &this->doubleSpinBoxDelegate);\\r\\n    this->tableView1->setItemDelegateForColumn(2, &this->doubleSpinBoxDelegate);\\r\\n    this->tableView1->setItemDelegateForColumn(3, &this->doubleSpinBoxDelegate);\\r\\n    this->tableView1->setItemDelegateForColumn(4, &this->comboBoxDelegate);\\r\\n}\\r\\n\\r\\nvoid MainWindow17::action1_triggered()\\r\\n{\\r\\n    // 打开文件\\r\\n    QString cuurentPath = QCoreApplication::applicationDirPath();\\r\\n    QString fileName = QFileDialog::getOpenFileName(this, \\"打开文件\\", cuurentPath, \\"文本文件(*.txt);;所有文件(*.*)\\");\\r\\n    if(fileName.isEmpty())\\r\\n        return;\\r\\n\\r\\n    QStringList fileContent;\\r\\n    QFile file(fileName);\\r\\n    if(file.open(QIODevice::ReadOnly | QIODevice::Text))\\r\\n    {\\r\\n        this->plainTextEdit1->clear();\\r\\n        QTextStream textStream(&file);\\r\\n        while(!textStream.atEnd())\\r\\n        {\\r\\n            QString str = textStream.readLine();\\r\\n            this->plainTextEdit1->appendPlainText(str);\\r\\n            fileContent.append(str);\\r\\n        }\\r\\n        file.close();\\r\\n        this->label1->setText(QString(\\"当前文件:%1\\").arg(fileName));\\r\\n        this->initOneLineData(fileContent);\\r\\n    }\\r\\n}\\r\\n\\r\\nvoid MainWindow17::initOneLineData(QStringList &fileContent)\\r\\n{\\r\\n    // 处理文本内容\\r\\n    int rowRount = fileContent.count();\\r\\n    this->standardItemModel1->setRowCount(rowRount - 1);\\r\\n\\r\\n    QString header = fileContent.at(0);\\r\\n    QStringList headerList = header.split(QRegExp(\\"\\\\\\\\s+\\"), QString::SkipEmptyParts);\\r\\n    this->standardItemModel1->setHorizontalHeaderLabels(headerList);\\r\\n\\r\\n    for(int i=1; i<rowRount; i++)\\r\\n    {\\r\\n        QString lineText = fileContent.at(i);\\r\\n        QStringList lineTextList = lineText.split(QRegExp(\\"\\\\\\\\s+\\"), QString::SkipEmptyParts);\\r\\n        int columnCount = lineTextList.count();\\r\\n        for(int j=0; j<columnCount - 1; j++)\\r\\n        {\\r\\n            QStandardItem *item = new QStandardItem(lineTextList.at(j));\\r\\n            this->standardItemModel1->setItem(i - 1, j, item);\\r\\n        }\\r\\n        // 最后一列用可选框显示\\r\\n        QStandardItem *item = new QStandardItem(headerList.at(columnCount - 1));\\r\\n        item->setCheckable(true);\\r\\n        if(lineTextList.at(columnCount - 1) == \\"0\\")\\r\\n        {\\r\\n            item->setCheckState(Qt::Unchecked);\\r\\n        }\\r\\n        else\\r\\n        {\\r\\n            item->setCheckState(Qt::Checked);\\r\\n        }\\r\\n        this->standardItemModel1->setItem(i - 1, columnCount - 1, item);\\r\\n    }\\r\\n}\\r\\n\\r\\nvoid MainWindow17::action2_triggered()\\r\\n{\\r\\n    // 另存文件\\r\\n    QString currentPath = QCoreApplication::applicationDirPath();\\r\\n    QString fileName = QFileDialog::getSaveFileName(this, \\"选择文件\\", currentPath, \\"文本文件(*.txt);;所有文件(*.*)\\");\\r\\n    if(fileName.isEmpty())\\r\\n        return;\\r\\n\\r\\n    QFile file(fileName);\\r\\n    QTextStream textStream(&file);\\r\\n    if(file.open(QIODevice::ReadWrite | QIODevice::Text | QIODevice::Truncate))\\r\\n    {\\r\\n        int rowCount = this->standardItemModel1->rowCount();\\r\\n        int columnCount = this->standardItemModel1->columnCount();\\r\\n\\r\\n\\r\\n        for(int i=0; i<columnCount; i++)\\r\\n        {\\r\\n            QStandardItem *item = this->standardItemModel1->horizontalHeaderItem(i);\\r\\n            textStream << item->text() + \\"\\\\t\\";\\r\\n        }\\r\\n        textStream << \\"\\\\n\\";\\r\\n\\r\\n        for(int r=0; r<rowCount; r++)\\r\\n        {\\r\\n            for(int c=0; c<columnCount - 1; c++)\\r\\n            {\\r\\n                QStandardItem *item = this->standardItemModel1->item(r, c);\\r\\n                textStream << item->text() + \\"\\\\t\\";\\r\\n            }\\r\\n            QStandardItem *item = this->standardItemModel1->item(r, columnCount - 1);\\r\\n            if(item->checkState() == Qt::Checked)\\r\\n            {\\r\\n                textStream << \\"1\\";\\r\\n            }\\r\\n            else\\r\\n            {\\r\\n                textStream << \\"0\\";\\r\\n            }\\r\\n            textStream << \\"\\\\n\\";\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nvoid MainWindow17::action3_triggered()\\r\\n{\\r\\n    // 模型数据预览\\r\\n    this->plainTextEdit1->clear();\\r\\n    QString str = \\"\\";\\r\\n    int rowCount = this->standardItemModel1->rowCount();\\r\\n    int columnCount = this->standardItemModel1->columnCount();\\r\\n\\r\\n\\r\\n    for(int i=0; i<columnCount; i++)\\r\\n    {\\r\\n        QStandardItem *item = this->standardItemModel1->horizontalHeaderItem(i);\\r\\n        str += item->text() + \\"\\\\t\\";\\r\\n    }\\r\\n    this->plainTextEdit1->appendPlainText(str);\\r\\n\\r\\n    for(int r=0; r<rowCount; r++)\\r\\n    {\\r\\n        str = \\"\\";\\r\\n        for(int c=0; c<columnCount - 1; c++)\\r\\n        {\\r\\n            QStandardItem *item = this->standardItemModel1->item(r, c);\\r\\n            str += item->text() + \\"\\\\t\\";\\r\\n        }\\r\\n        QStandardItem *item = this->standardItemModel1->item(r, columnCount - 1);\\r\\n        if(item->checkState() == Qt::Checked)\\r\\n        {\\r\\n            str += \\"1\\";\\r\\n        }\\r\\n        else\\r\\n        {\\r\\n            str += \\"0\\";\\r\\n        }\\r\\n        this->plainTextEdit1->appendPlainText(str);\\r\\n    }\\r\\n}\\r\\n\\r\\nvoid MainWindow17::action4_triggered()\\r\\n{\\r\\n    // 添加行\\r\\n    QList<QStandardItem*> itemList;\\r\\n    int columnCount = this->standardItemModel1->columnCount();\\r\\n    for(int c=0; c<columnCount - 1; c++)\\r\\n    {\\r\\n        QStandardItem *item = new QStandardItem(\\" \\");\\r\\n        itemList << item;\\r\\n    }\\r\\n    QString str = this->standardItemModel1->headerData(columnCount - 1, Qt::Horizontal, Qt::DisplayRole).toString();\\r\\n    QStandardItem *item = new QStandardItem(str);\\r\\n    item->setCheckable(true);\\r\\n    itemList << item;\\r\\n\\r\\n    this->standardItemModel1->insertRow(this->standardItemModel1->rowCount(), itemList);\\r\\n    QModelIndex currentIndex = this->standardItemModel1->index(this->standardItemModel1->rowCount() - 1, 0);\\r\\n    this->itemSelectionModel1->clearSelection();\\r\\n    this->itemSelectionModel1->setCurrentIndex(currentIndex, QItemSelectionModel::Select);\\r\\n}\\r\\n\\r\\nvoid MainWindow17::action5_triggered()\\r\\n{\\r\\n    // 插入行\\r\\n    QList<QStandardItem*> itemList;\\r\\n    int columnCount = this->standardItemModel1->columnCount();\\r\\n    for(int c=0; c<columnCount - 1; c++)\\r\\n    {\\r\\n        QStandardItem *item = new QStandardItem(\\" \\");\\r\\n        itemList << item;\\r\\n    }\\r\\n    QString str = this->standardItemModel1->headerData(columnCount - 1, Qt::Horizontal, Qt::DisplayRole).toString();\\r\\n    QStandardItem *item = new QStandardItem(str);\\r\\n    item->setCheckable(true);\\r\\n    itemList << item;\\r\\n\\r\\n    QModelIndex currentIdnex = this->itemSelectionModel1->currentIndex();\\r\\n    this->standardItemModel1->insertRow(currentIdnex.row(), itemList);\\r\\n}\\r\\n\\r\\nvoid MainWindow17::action6_triggered()\\r\\n{\\r\\n    // 删除行\\r\\n    QModelIndex currentIndex = this->itemSelectionModel1->currentIndex();\\r\\n    if(currentIndex.row() == this->standardItemModel1->rowCount() - 1)\\r\\n    {\\r\\n        this->standardItemModel1->removeRow(currentIndex.row());\\r\\n    }\\r\\n    else\\r\\n    {\\r\\n        this->standardItemModel1->removeRow(currentIndex.row());\\r\\n        this->itemSelectionModel1->setCurrentIndex(currentIndex, QItemSelectionModel::Select);\\r\\n    }\\r\\n}\\r\\n\\r\\nvoid MainWindow17::action7_triggered()\\r\\n{\\r\\n    // 居左\\r\\n    if(!this->itemSelectionModel1->hasSelection())\\r\\n        return;\\r\\n\\r\\n    QModelIndexList selectedIndexs = this->itemSelectionModel1->selectedIndexes();\\r\\n    for(int i=0; i<selectedIndexs.count(); i++)\\r\\n    {\\r\\n        QModelIndex index = selectedIndexs.at(i);\\r\\n        QStandardItem *item = this->standardItemModel1->itemFromIndex(index);\\r\\n        item->setTextAlignment(Qt::AlignLeft);\\r\\n    }\\r\\n}\\r\\n\\r\\nvoid MainWindow17::action8_triggered()\\r\\n{\\r\\n    // 居中\\r\\n    if(!this->itemSelectionModel1->hasSelection())\\r\\n        return;\\r\\n\\r\\n    QModelIndexList selectedIndexs = this->itemSelectionModel1->selectedIndexes();\\r\\n    for(int i=0; i<selectedIndexs.count(); i++)\\r\\n    {\\r\\n        QModelIndex index = selectedIndexs.at(i);\\r\\n        QStandardItem *item = this->standardItemModel1->itemFromIndex(index);\\r\\n        item->setTextAlignment(Qt::AlignCenter);\\r\\n    }\\r\\n}\\r\\n\\r\\nvoid MainWindow17::action9_triggered()\\r\\n{\\r\\n    // 居右\\r\\n    if(!this->itemSelectionModel1->hasSelection())\\r\\n        return;\\r\\n\\r\\n    QModelIndexList selectedIndexs = this->itemSelectionModel1->selectedIndexes();\\r\\n    for(int i=0; i<selectedIndexs.count(); i++)\\r\\n    {\\r\\n        QModelIndex index = selectedIndexs.at(i);\\r\\n        QStandardItem *item = this->standardItemModel1->itemFromIndex(index);\\r\\n        item->setTextAlignment(Qt::AlignRight);\\r\\n    }\\r\\n}\\r\\n\\r\\nvoid MainWindow17::action10_triggered(bool checked)\\r\\n{\\r\\n    // 粗体\\r\\n    if(!this->itemSelectionModel1->hasSelection())\\r\\n        return;\\r\\n\\r\\n    QModelIndexList selectedIndexs = this->itemSelectionModel1->selectedIndexes();\\r\\n    for(int i=0; i<selectedIndexs.count(); i++)\\r\\n    {\\r\\n        QModelIndex index = selectedIndexs.at(i);\\r\\n        QStandardItem *item = this->standardItemModel1->itemFromIndex(index);\\r\\n        QFont font = item->font();\\r\\n        font.setBold(checked);\\r\\n        item->setFont(font);\\r\\n    }\\r\\n}\\r\\n\\r\\nvoid MainWindow17::action11_triggered()\\r\\n{\\r\\n    // 退出\\r\\n    this->close();\\r\\n}\\r\\n\\r\\nvoid MainWindow17::itemSelectionModel1_currentChanged(const QModelIndex &current, const QModelIndex &previous)\\r\\n{\\r\\n    if(current.isValid())\\r\\n    {\\r\\n        this->label2->setText(QString(\\"行:%1,列:%2\\").arg(current.row()).arg(current.column()));\\r\\n        QStandardItem *item = this->standardItemModel1->itemFromIndex(current);\\r\\n        this->label3->setText(QString(\\"单元格内容:%1\\").arg(item->text()));\\r\\n        QFont font = item->font();\\r\\n        this->action10->setChecked(font.bold());\\r\\n    }\\r\\n}\\r\\n\\r\\nQSpinBoxDelegate::QSpinBoxDelegate(QObject *parent) : QStyledItemDelegate(parent)\\r\\n{\\r\\n\\r\\n}\\r\\n\\r\\nQWidget* QSpinBoxDelegate::createEditor(QWidget *parent, const QStyleOptionViewItem &option, const QModelIndex &index) const\\r\\n{\\r\\n    QSpinBox *spinBox = new QSpinBox(parent);\\r\\n    spinBox->setFrame(false);\\r\\n    spinBox->setMinimum(0);\\r\\n    spinBox->setMaximum(100);\\r\\n    return spinBox;\\r\\n}\\r\\n\\r\\nvoid QSpinBoxDelegate::setEditorData(QWidget *editor, const QModelIndex &index) const\\r\\n{\\r\\n    int value = index.model()->data(index, Qt::EditRole).toInt();\\r\\n    QSpinBox *spinBox = static_cast<QSpinBox*>(editor);\\r\\n    spinBox->setValue(value);\\r\\n}\\r\\n\\r\\nvoid QSpinBoxDelegate::setModelData(QWidget *editor, QAbstractItemModel *model, const QModelIndex &index) const\\r\\n{\\r\\n    QSpinBox *spinBox = static_cast<QSpinBox*>(editor);\\r\\n    spinBox->interpretText();\\r\\n    int value = spinBox->value();\\r\\n    model->setData(index, value, Qt::EditRole);\\r\\n}\\r\\n\\r\\nvoid QSpinBoxDelegate::updateEditorGeometry(QWidget *editor, const QStyleOptionViewItem &option, const QModelIndex &index) const\\r\\n{\\r\\n    editor->setGeometry(option.rect);\\r\\n}\\r\\n\\r\\nQDoubleSpinBoxDelegate::QDoubleSpinBoxDelegate(QObject *parent) : QStyledItemDelegate(parent)\\r\\n{\\r\\n\\r\\n}\\r\\n\\r\\nQWidget* QDoubleSpinBoxDelegate::createEditor(QWidget *parent, const QStyleOptionViewItem &option, const QModelIndex &index) const\\r\\n{\\r\\n    QDoubleSpinBox *doubleSpinBox = new QDoubleSpinBox(parent);\\r\\n    doubleSpinBox->setFrame(false);\\r\\n    doubleSpinBox->setMinimum(0);\\r\\n    doubleSpinBox->setMaximum(100);\\r\\n    return doubleSpinBox;\\r\\n}\\r\\n\\r\\nvoid QDoubleSpinBoxDelegate::setEditorData(QWidget *editor, const QModelIndex &index) const\\r\\n{\\r\\n    int value = index.model()->data(index, Qt::EditRole).toInt();\\r\\n    QDoubleSpinBox *doubleSpinBox = static_cast<QDoubleSpinBox*>(editor);\\r\\n    doubleSpinBox->setValue(value);\\r\\n}\\r\\n\\r\\nvoid QDoubleSpinBoxDelegate::setModelData(QWidget *editor, QAbstractItemModel *model, const QModelIndex &index) const\\r\\n{\\r\\n    QDoubleSpinBox *doubleSpinBox = static_cast<QDoubleSpinBox*>(editor);\\r\\n    doubleSpinBox->interpretText();\\r\\n    int value = doubleSpinBox->value();\\r\\n    model->setData(index, value, Qt::EditRole);\\r\\n}\\r\\n\\r\\nvoid QDoubleSpinBoxDelegate::updateEditorGeometry(QWidget *editor, const QStyleOptionViewItem &option, const QModelIndex &index) const\\r\\n{\\r\\n    editor->setGeometry(option.rect);\\r\\n}\\r\\n\\r\\nQComboBoxDelegate::QComboBoxDelegate(QObject *parent) : QStyledItemDelegate(parent)\\r\\n{\\r\\n\\r\\n}\\r\\n\\r\\nQWidget* QComboBoxDelegate::createEditor(QWidget *parent, const QStyleOptionViewItem &option, const QModelIndex &index) const\\r\\n{\\r\\n    QComboBox *comboBox = new QComboBox(parent);\\r\\n    comboBox->setFrame(false);\\r\\n//    QStringList strList;\\r\\n//    strList << \\"111\\" << \\"222\\" << \\"333\\";\\r\\n//    comboBox->insertItems(0, strList);\\r\\n    comboBox->addItems(this->data);\\r\\n    comboBox->setEditable(this->isEditable);\\r\\n    return comboBox;\\r\\n}\\r\\n\\r\\nvoid QComboBoxDelegate::setEditorData(QWidget *editor, const QModelIndex &index) const\\r\\n{\\r\\n    QString value = index.model()->data(index, Qt::EditRole).toString();\\r\\n    QComboBox *comboBox = static_cast<QComboBox*>(editor);\\r\\n    comboBox->setCurrentText(value);\\r\\n}\\r\\n\\r\\nvoid QComboBoxDelegate::setModelData(QWidget *editor, QAbstractItemModel *model, const QModelIndex &index) const\\r\\n{\\r\\n    QComboBox *comboBox = static_cast<QComboBox*>(editor);\\r\\n    QString value = comboBox->currentText();\\r\\n    model->setData(index, value, Qt::EditRole);\\r\\n}\\r\\n\\r\\nvoid QComboBoxDelegate::updateEditorGeometry(QWidget *editor, const QStyleOptionViewItem &option, const QModelIndex &index) const\\r\\n{\\r\\n    editor->setGeometry(option.rect);\\r\\n}\\r\\n\\r\\nvoid QComboBoxDelegate::setItems(QStringList data, bool isEditable)\\r\\n{\\r\\n    this->data = data;\\r\\n    this->isEditable = isEditable;\\r\\n}\\r\\n\\r\\n```","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},"1e1ecb1869e43399905dafa495f07c4b3b5ac7a6bdb5320472267237f93022b8":{"title":"QStringListModel","hash":"1e1ecb1869e43399905dafa495f07c4b3b5ac7a6bdb5320472267237f93022b8","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2022-01-10","update":"2022-01-10","content":"\\r\\n```c++\\r\\n#if _MSC_VER >= 1600\\r\\n#pragma execution_character_set(\\"utf-8\\")\\r\\n#endif\\r\\n\\r\\n#include \\"mainwindow16.h\\"\\r\\n\\r\\nMainWindow16::MainWindow16(QString title, QWidget *parent) : QMainWindow(parent)\\r\\n{\\r\\n    this->setWindowTitle(title);\\r\\n\\r\\n    this->button1 = new QPushButton();\\r\\n    this->button1->setText(\\"恢复列表\\");\\r\\n    this->button2 = new QPushButton();\\r\\n    this->button2->setText(\\"添加项\\");\\r\\n    this->button3 = new QPushButton();\\r\\n    this->button3->setText(\\"插入项\\");\\r\\n    this->button4 = new QPushButton();\\r\\n    this->button4->setText(\\"删除当前项\\");\\r\\n    this->button5 = new QPushButton();\\r\\n    this->button5->setText(\\"清除列表\\");\\r\\n    this->button6 = new QPushButton();\\r\\n    this->button6->setText(\\"清空文本\\");\\r\\n    this->button7 = new QPushButton();\\r\\n    this->button7->setText(\\"显示 QStringList 数据\\");\\r\\n    this->listView1 = new QListView();\\r\\n    this->plainTextEdit1 = new QPlainTextEdit();\\r\\n\\r\\n    this->groupBox1 = new QGroupBox();\\r\\n    QVBoxLayout *layout1 = new QVBoxLayout();\\r\\n    layout1->addWidget(this->button1);\\r\\n    layout1->addWidget(this->button2);\\r\\n    layout1->addWidget(this->button3);\\r\\n    layout1->addWidget(this->button4);\\r\\n    layout1->addWidget(this->button5);\\r\\n    layout1->addWidget(this->listView1);\\r\\n    this->groupBox1->setLayout(layout1);\\r\\n\\r\\n    this->groupBox2 = new QGroupBox();\\r\\n    QVBoxLayout *layout2 = new QVBoxLayout();\\r\\n    layout2->addWidget(this->button6);\\r\\n    layout2->addWidget(this->button7);\\r\\n    layout2->addWidget(this->plainTextEdit1);\\r\\n    this->groupBox2->setLayout(layout2);\\r\\n\\r\\n    QWidget *widget1 = new QWidget();\\r\\n    QHBoxLayout *layout3 = new QHBoxLayout();\\r\\n    layout3->addWidget(this->groupBox1);\\r\\n    layout3->addWidget(this->groupBox2);\\r\\n    widget1->setLayout(layout3);\\r\\n    this->setCentralWidget(widget1);\\r\\n\\r\\n    this->label1 = new QLabel();\\r\\n    this->statusBar1 = new QStatusBar();\\r\\n    this->statusBar1->addWidget(this->label1);\\r\\n    this->setStatusBar(this->statusBar1);\\r\\n\\r\\n    this->connect(this->button1, SIGNAL(clicked()), this, SLOT(button1_clicked()));\\r\\n    this->connect(this->button2, SIGNAL(clicked()), this, SLOT(button2_clicked()));\\r\\n    this->connect(this->button3, SIGNAL(clicked()), this, SLOT(button3_clicked()));\\r\\n    this->connect(this->button4, SIGNAL(clicked()), this, SLOT(button4_clicked()));\\r\\n    this->connect(this->button5, SIGNAL(clicked()), this, SLOT(button5_clicked()));\\r\\n    this->connect(this->button6, SIGNAL(clicked()), this, SLOT(button6_clicked()));\\r\\n    this->connect(this->button7, SIGNAL(clicked()), this, SLOT(button7_clicked()));\\r\\n    this->connect(this->listView1, SIGNAL(clicked(const QModelIndex&)), this, SLOT(listView1_clicked(const QModelIndex&)));\\r\\n\\r\\n    this->strList1 << \\"111\\" << \\"222\\" << \\"333\\" << \\"444\\" << \\"555\\";\\r\\n    this->stringListModel1 = new QStringListModel();\\r\\n    this->stringListModel1->setStringList(this->strList1);\\r\\n    this->listView1->setModel(this->stringListModel1);\\r\\n}\\r\\n\\r\\nvoid MainWindow16::button1_clicked()\\r\\n{\\r\\n    // 恢复列表\\r\\n    this->listView1->setModel(this->stringListModel1);\\r\\n}\\r\\n\\r\\nvoid MainWindow16::button2_clicked()\\r\\n{\\r\\n    // 添加项\\r\\n    this->stringListModel1->insertRow(this->stringListModel1->rowCount());\\r\\n    QModelIndex index = this->stringListModel1->index(this->stringListModel1->rowCount() - 1, 0, QModelIndex());\\r\\n    this->stringListModel1->setData(index, \\"new item\\", Qt::DisplayRole);\\r\\n    this->listView1->setCurrentIndex(index);\\r\\n}\\r\\n\\r\\nvoid MainWindow16::button3_clicked()\\r\\n{\\r\\n    // 插入项;\\r\\n    QModelIndex index = this->listView1->currentIndex();\\r\\n    this->stringListModel1->setData(index, \\"new item\\", Qt::DisplayRole);\\r\\n    this->listView1->setCurrentIndex(index);\\r\\n}\\r\\n\\r\\nvoid MainWindow16::button4_clicked()\\r\\n{\\r\\n    // 删除当前项\\r\\n    QModelIndex index = this->listView1->currentIndex();\\r\\n    this->stringListModel1->removeRow(index.row());\\r\\n}\\r\\n\\r\\nvoid MainWindow16::button5_clicked()\\r\\n{\\r\\n    // 清空列表\\r\\n    this->stringListModel1->removeRows(0, this->stringListModel1->rowCount());\\r\\n}\\r\\n\\r\\nvoid MainWindow16::button6_clicked()\\r\\n{\\r\\n    // 清空文本\\r\\n    this->plainTextEdit1->clear();\\r\\n}\\r\\n\\r\\nvoid MainWindow16::button7_clicked()\\r\\n{\\r\\n    // 显示 QStringList 数据\\r\\n    this->plainTextEdit1->clear();\\r\\n    foreach(QString str1, this->stringListModel1->stringList())\\r\\n    {\\r\\n        this->plainTextEdit1->appendPlainText(str1);\\r\\n    }\\r\\n}\\r\\n\\r\\nvoid MainWindow16::listView1_clicked(const QModelIndex &index)\\r\\n{\\r\\n    this->label1->setText(QString(\\"行:%1,列:%2\\").arg(index.row()).arg(index.column()));\\r\\n}\\r\\n\\r\\n```","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},"7723af9ef08750e22fe429efa017257d2e3b8305ae25767236dee1dc78cb8894":{"title":"文件系统 Model 和 View","hash":"7723af9ef08750e22fe429efa017257d2e3b8305ae25767236dee1dc78cb8894","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2022-01-09","update":"2022-01-09","content":"\\r\\n```c++\\r\\n#if _MSC_VER >= 1600\\r\\n#pragma execution_character_set(\\"utf-8\\")\\r\\n#endif\\r\\n\\r\\n#include \\"mainwindow15.h\\"\\r\\n\\r\\nMainWindow15::MainWindow15(QString title, QWidget *parent) : QMainWindow(parent)\\r\\n{\\r\\n    this->setWindowTitle(title);\\r\\n\\r\\n    this->treeView1 = new QTreeView();\\r\\n    QVBoxLayout *layout1 = new QVBoxLayout();\\r\\n    layout1->addWidget(this->treeView1);\\r\\n    this->groupBox1 = new QGroupBox();\\r\\n    this->groupBox1->setLayout(layout1);\\r\\n\\r\\n    this->listView1 = new QListView();\\r\\n    QVBoxLayout *layout2 = new QVBoxLayout();\\r\\n    layout2->addWidget(this->listView1);\\r\\n    this->groupBox2 = new QGroupBox();\\r\\n    this->groupBox2->setLayout(layout2);\\r\\n\\r\\n    this->tableView1 = new QTableView();\\r\\n    QVBoxLayout *layout3 = new QVBoxLayout();\\r\\n    layout3->addWidget(this->tableView1);\\r\\n    this->groupBox3 = new QGroupBox();\\r\\n    this->groupBox3->setLayout(layout3);\\r\\n\\r\\n    this->splitter1 = new QSplitter();\\r\\n    this->splitter1->setOrientation(Qt::Vertical);\\r\\n    this->splitter1->addWidget(this->groupBox2);\\r\\n    this->splitter1->addWidget(this->groupBox3);\\r\\n    this->splitter2 = new QSplitter();\\r\\n    this->splitter2->setOrientation(Qt::Horizontal);\\r\\n    this->splitter2->addWidget(this->groupBox1);\\r\\n    this->splitter2->addWidget(this->splitter1);\\r\\n    this->setCentralWidget(this->splitter2);\\r\\n\\r\\n    this->connect(this->treeView1, SIGNAL(clicked(QModelIndex)), this, SLOT(treeView1_clicked_setRootIndex(QModelIndex)));\\r\\n\\r\\n    this->fileSystemModel1 = new QFileSystemModel();\\r\\n    this->fileSystemModel1->setRootPath(QDir::currentPath());\\r\\n    this->treeView1->setModel(this->fileSystemModel1);\\r\\n    this->listView1->setModel(this->fileSystemModel1);\\r\\n    this->tableView1->setModel(this->fileSystemModel1);\\r\\n}\\r\\n\\r\\nvoid MainWindow15::treeView1_clicked_setRootIndex(const QModelIndex &index)\\r\\n{\\r\\n    this->listView1->setRootIndex(index);\\r\\n    this->tableView1->setRootIndex(index);\\r\\n\\r\\n    QString str1 = \\"\\";\\r\\n    this->fileSystemModel1->isDir(index);\\r\\n    str1 += QString(\\"是否为目录:%1\\\\n\\").arg(this->fileSystemModel1->isDir(index));\\r\\n    str1 += \\"文件路径:\\" + this->fileSystemModel1->filePath(index) + \\"\\\\n\\";\\r\\n    str1 += \\"文件类型:\\" + this->fileSystemModel1->type(index) + \\"\\\\n\\";\\r\\n    str1 += \\"文件名称:\\" + this->fileSystemModel1->fileName(index) + \\"\\\\n\\";\\r\\n    int s = this->fileSystemModel1->size(index);\\r\\n    if(s/1024 < 1024)\\r\\n    {\\r\\n        str1 += \\"文件大小:\\" + QString(\\"%1 KB \\").arg(s/1024);\\r\\n    }\\r\\n    else\\r\\n    {\\r\\n        str1 += \\"文件大小:\\" + QString(\\"%1 MB\\").arg(s/1024/1024);\\r\\n    }\\r\\n\\r\\n    this->messageBox1->information(this, \\"提示\\", str1, QMessageBox::Ok);\\r\\n}\\r\\n\\r\\n```","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},"222137b183bf4820900bce92c86bef9726754fa42ec9e8ca8b6e51bf0c990b90":{"title":"QTableWidget","hash":"222137b183bf4820900bce92c86bef9726754fa42ec9e8ca8b6e51bf0c990b90","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2022-01-08","update":"2022-01-08","content":"\\r\\n```c++\\r\\n#if _MSC_VER >= 1600\\r\\n#pragma execution_character_set(\\"utf-8\\")\\r\\n#endif\\r\\n\\r\\n#include \\"mainwindow14.h\\"\\r\\n\\r\\n#include <QStringList>\\r\\n#include <QFont>\\r\\n#include <QColor>\\r\\n#include <QDate>\\r\\n#include <QAbstractItemView>\\r\\n#include <QHeaderView>\\r\\n#include <QDebug>\\r\\n\\r\\nMainWindow14::MainWindow14(QString title, QWidget *parent) : QMainWindow(parent)\\r\\n{\\r\\n    this->setWindowTitle(title);\\r\\n\\r\\n    this->button1 = new QPushButton();\\r\\n    this->button1->setText(\\"设置表头\\");\\r\\n    this->button2 = new QPushButton();\\r\\n    this->button2->setText(\\"设置行数\\");\\r\\n    this->spinBox1 = new QSpinBox();\\r\\n    this->button3 = new QPushButton();\\r\\n    this->button3->setText(\\"初始化表格数据\\");\\r\\n    this->button4 = new QPushButton();\\r\\n    this->button4->setText(\\"插入行\\");\\r\\n    this->button5 = new QPushButton();\\r\\n    this->button5->setText(\\"添加行\\");\\r\\n    this->button6 = new QPushButton();\\r\\n    this->button6->setText(\\"删除当前行\\");\\r\\n    this->button7 = new QPushButton();\\r\\n    this->button7->setText(\\"自动调节行高\\");\\r\\n    this->button8 = new QPushButton();\\r\\n    this->button8->setText(\\"自动调节列宽\\");\\r\\n    this->button9 = new QPushButton();\\r\\n    this->button9->setText(\\"读取表格内容到文本\\");\\r\\n    this->checkBox1 = new QCheckBox();\\r\\n    this->checkBox1->setText(\\"表格可编辑\\");\\r\\n    this->checkBox2 = new QCheckBox();\\r\\n    this->checkBox2->setText(\\"间隔行底色\\");\\r\\n    this->checkBox3 = new QCheckBox();\\r\\n    this->checkBox3->setText(\\"显示行表头\\");\\r\\n    this->checkBox4 = new QCheckBox();\\r\\n    this->checkBox4->setText(\\"显示列表头\\");\\r\\n    this->radioButton1 = new QRadioButton();\\r\\n    this->radioButton1->setText(\\"行选择\\");\\r\\n    this->radioButton2 = new QRadioButton();\\r\\n    this->radioButton2->setText(\\"单元格选择\\");\\r\\n\\r\\n    QGridLayout *gridLayout1 = new QGridLayout();\\r\\n    gridLayout1->addWidget(this->button1, 0, 0, 1, 2);\\r\\n    gridLayout1->addWidget(this->button2, 1, 0);\\r\\n    gridLayout1->addWidget(this->spinBox1, 1, 1);\\r\\n    gridLayout1->addWidget(this->button3, 2, 0, 1, 2);\\r\\n    gridLayout1->addWidget(this->button4, 3, 0);\\r\\n    gridLayout1->addWidget(this->button5, 3, 1);\\r\\n    gridLayout1->addWidget(this->button6, 4, 0, 1, 2);\\r\\n    gridLayout1->addWidget(this->button7, 5, 0);\\r\\n    gridLayout1->addWidget(this->button8, 5, 1);\\r\\n    gridLayout1->addWidget(this->button9, 6, 0, 1, 2);\\r\\n    gridLayout1->addWidget(this->checkBox1, 7, 0);\\r\\n    gridLayout1->addWidget(this->checkBox2, 7, 1);\\r\\n    gridLayout1->addWidget(this->checkBox3, 8, 0);\\r\\n    gridLayout1->addWidget(this->checkBox4, 8, 1);\\r\\n    gridLayout1->addWidget(this->radioButton1, 9, 0);\\r\\n    gridLayout1->addWidget(this->radioButton2, 9, 1);\\r\\n    this->groupBox1 = new QGroupBox();\\r\\n    this->groupBox1->setLayout(gridLayout1);\\r\\n\\r\\n    this->tableWidget1 = new QTableWidget();\\r\\n    this->plainTextEdit1 = new QPlainTextEdit();\\r\\n\\r\\n    this->splitter1 = new QSplitter();\\r\\n    this->splitter1->setOrientation(Qt::Vertical);\\r\\n    this->splitter1->addWidget(this->tableWidget1);\\r\\n    this->splitter1->addWidget(this->plainTextEdit1);\\r\\n\\r\\n    this->splitter2 = new QSplitter();\\r\\n    this->splitter2->setOrientation(Qt::Horizontal);\\r\\n    this->splitter2->addWidget(this->groupBox1);\\r\\n    this->splitter2->addWidget(this->splitter1);\\r\\n\\r\\n    this->setCentralWidget(this->splitter2);\\r\\n\\r\\n    this->label1 = new QLabel();\\r\\n    this->label2 = new QLabel();\\r\\n    this->label3 = new QLabel();\\r\\n    this->statusBar1 = new QStatusBar();\\r\\n    this->statusBar1->addWidget(this->label1);\\r\\n    this->statusBar1->addWidget(this->label2);\\r\\n    this->statusBar1->addWidget(this->label3);\\r\\n    this->setStatusBar(this->statusBar1);\\r\\n\\r\\n    this->connect(this->button1, SIGNAL(clicked()), this, SLOT(button1_clicked()));\\r\\n    this->connect(this->button2, SIGNAL(clicked()), this, SLOT(button2_clicked()));\\r\\n    this->connect(this->button3, SIGNAL(clicked()), this, SLOT(button3_clicked()));\\r\\n    this->connect(this->button4, SIGNAL(clicked()), this, SLOT(button4_clicked()));\\r\\n    this->connect(this->button5, SIGNAL(clicked()), this, SLOT(button5_clicked()));\\r\\n    this->connect(this->button6, SIGNAL(clicked()), this, SLOT(button6_clicked()));\\r\\n    this->connect(this->button7, SIGNAL(clicked()), this, SLOT(button7_clicked()));\\r\\n    this->connect(this->button8, SIGNAL(clicked()), this, SLOT(button8_clicked()));\\r\\n    this->connect(this->button9, SIGNAL(clicked()), this, SLOT(button9_clicked()));\\r\\n    this->connect(this->checkBox1, SIGNAL(clicked(bool)), this, SLOT(checkBox1_clicked(bool)));\\r\\n    this->connect(this->checkBox2, SIGNAL(clicked(bool)), this, SLOT(checkBox2_clicked(bool)));\\r\\n    this->connect(this->checkBox3, SIGNAL(clicked(bool)), this, SLOT(checkBox3_clicked(bool)));\\r\\n    this->connect(this->checkBox4, SIGNAL(clicked(bool)), this, SLOT(checkBox4_clicked(bool)));\\r\\n    this->connect(this->radioButton1, SIGNAL(clicked(bool)), this, SLOT(radioButton1_clicked(bool)));\\r\\n    this->connect(this->radioButton2, SIGNAL(clicked(bool)), this, SLOT(radioButton2_clicked(bool)));\\r\\n    this->connect(this->tableWidget1, SIGNAL(currentCellChanged(int, int, int, int)), this, SLOT(tableWidget1_currentCellChanged(int, int, int, int)));\\r\\n}\\r\\n\\r\\nvoid MainWindow14::button1_clicked()\\r\\n{\\r\\n    // 设置表头\\r\\n    QStringList headerText;\\r\\n    headerText << \\"姓名\\" << \\"性别\\" << \\"出生日期\\" << \\"民族\\" << \\"分数\\" << \\"是否党员\\";\\r\\n    this->tableWidget1->setHorizontalHeaderLabels(headerText);\\r\\n    this->tableWidget1->setColumnCount(6);\\r\\n    this->tableWidget1->setShowGrid(true);\\r\\n    for(int i=0; i<this->tableWidget1->columnCount(); i++)\\r\\n    {\\r\\n        QTableWidgetItem *headerItem = new QTableWidgetItem(headerText.at(i));\\r\\n        QFont font = headerItem->font();\\r\\n        font.setBold(true);\\r\\n        font.setPointSize(12);\\r\\n        font.setFamily(\\"hack\\");\\r\\n        headerItem->setFont(font);\\r\\n        headerItem->setTextColor(QColor(\\"#800080\\"));\\r\\n        this->tableWidget1->setHorizontalHeaderItem(i, headerItem);\\r\\n    }\\r\\n}\\r\\n\\r\\nvoid MainWindow14::addOneRowToTableWidget1(int row, QString name, QString sex, QDate *birth, QString nation, QString score, bool isParty)\\r\\n{\\r\\n    QTableWidgetItem *nameItem = new QTableWidgetItem(name, MainWindow14::nameCellType);\\r\\n    nameItem->setTextAlignment(Qt::AlignHCenter | Qt::AlignVCenter);\\r\\n    nameItem->setData(Qt::UserRole, QVariant(name));\\r\\n    this->tableWidget1->setItem(row, MainWindow14::nameColumnNum, nameItem);\\r\\n\\r\\n    QTableWidgetItem *sexItem = new QTableWidgetItem(sex, MainWindow14::sexCellType);\\r\\n    sexItem->setTextAlignment(Qt::AlignHCenter | Qt::AlignVCenter);\\r\\n    sexItem->setData(Qt::UserRole, QVariant(sex));\\r\\n    this->tableWidget1->setItem(row, MainWindow14::sexColumnNum, sexItem);\\r\\n\\r\\n    QTableWidgetItem *birthItem = new QTableWidgetItem(birth->toString(\\"yyyy年MM月dd日\\"), MainWindow14::birthCellType);\\r\\n    birthItem->setTextAlignment(Qt::AlignHCenter | Qt::AlignVCenter);\\r\\n    birthItem->setData(Qt::UserRole, QVariant(birth->toString(\\"yyyy年MM月dd日\\")));\\r\\n    this->tableWidget1->setItem(row, MainWindow14::birthColumnNum, birthItem);\\r\\n\\r\\n    QTableWidgetItem *nationItem = new QTableWidgetItem(nation, MainWindow14::nationCellType);\\r\\n    nationItem->setTextAlignment(Qt::AlignHCenter | Qt::AlignVCenter);\\r\\n    nationItem->setData(Qt::UserRole, QVariant(nation));\\r\\n    this->tableWidget1->setItem(row, MainWindow14::nationColumnNum, nationItem);\\r\\n\\r\\n    QTableWidgetItem *scoreItem = new QTableWidgetItem(score, MainWindow14::scoreCellType);\\r\\n    scoreItem->setTextAlignment(Qt::AlignHCenter | Qt::AlignVCenter);\\r\\n    scoreItem->setData(Qt::UserRole, QVariant(score));\\r\\n    this->tableWidget1->setItem(row, MainWindow14::scoreColumnNum, scoreItem);\\r\\n\\r\\n    QTableWidgetItem *partyItem = new QTableWidgetItem(\\"党员\\", MainWindow14::partyCellType);\\r\\n    partyItem->setTextAlignment(Qt::AlignHCenter | Qt::AlignVCenter);\\r\\n    partyItem->setData(Qt::UserRole, QVariant(isParty));\\r\\n    if(isParty)\\r\\n    {\\r\\n        partyItem->setCheckState(Qt::Checked);\\r\\n    }\\r\\n    else\\r\\n    {\\r\\n        partyItem->setCheckState(Qt::Unchecked);\\r\\n    }\\r\\n    this->tableWidget1->setItem(row, MainWindow14::partyColumnNum, partyItem);\\r\\n}\\r\\n\\r\\nvoid MainWindow14::button2_clicked()\\r\\n{\\r\\n    // 设置行数\\r\\n    int count = this->spinBox1->value();\\r\\n    this->tableWidget1->setRowCount(count);\\r\\n}\\r\\n\\r\\nvoid MainWindow14::button3_clicked()\\r\\n{\\r\\n    // 初始化表格数据\\r\\n\\r\\n    // 清除工作区，不清除表头\\r\\n    this->tableWidget1->clearContents();\\r\\n    int row = this->tableWidget1->rowCount();\\r\\n    if(row == 0)\\r\\n    {\\r\\n        row = 10;\\r\\n    }\\r\\n    for(int i=0; i<row; i++)\\r\\n    {\\r\\n        QString name = QString::asprintf(\\"name_%d\\", i);\\r\\n\\r\\n        QString sex;\\r\\n        if(i % 2 == 0)\\r\\n        {\\r\\n            sex = \\"男\\";\\r\\n        }\\r\\n        else\\r\\n        {\\r\\n            sex = \\"女\\";\\r\\n        }\\r\\n\\r\\n        QDate *birth = new QDate(2000, 1 ,1);\\r\\n\\r\\n        QString nation = \\"汉族\\";\\r\\n\\r\\n        QString score;\\r\\n        score.setNum(100);\\r\\n\\r\\n        bool isParty = false;\\r\\n        if(i % 2 == 0)\\r\\n        {\\r\\n            isParty = true;\\r\\n        }\\r\\n\\r\\n        this->addOneRowToTableWidget1(i, name, sex, birth, nation, score, isParty);\\r\\n    }\\r\\n}\\r\\n\\r\\nvoid MainWindow14::button4_clicked()\\r\\n{\\r\\n    // 插入行\\r\\n    int currentRow = this->tableWidget1->currentRow();\\r\\n    QString name = QString::asprintf(\\"name_%d\\", currentRow);\\r\\n\\r\\n    QString sex = \\"男\\";\\r\\n\\r\\n    QDate *birth = new QDate(2000, 1 ,1);\\r\\n\\r\\n    QString nation = \\"汉族\\";\\r\\n\\r\\n    QString score;\\r\\n    score.setNum(100);\\r\\n\\r\\n    bool isParty = false;\\r\\n    this->addOneRowToTableWidget1(currentRow, name, sex, birth, nation, score, isParty);\\r\\n}\\r\\n\\r\\nvoid MainWindow14::button5_clicked()\\r\\n{\\r\\n    // 添加行\\r\\n    int row = this->tableWidget1->rowCount();\\r\\n    QString name = QString::asprintf(\\"name_%d\\", row);\\r\\n\\r\\n    QString sex = \\"男\\";\\r\\n\\r\\n    QDate *birth = new QDate(2000, 1 ,1);\\r\\n\\r\\n    QString nation = \\"汉族\\";\\r\\n\\r\\n    QString score;\\r\\n    score.setNum(100);\\r\\n\\r\\n    bool isParty = false;\\r\\n    this->addOneRowToTableWidget1(row, name, sex, birth, nation, score, isParty);\\r\\n}\\r\\n\\r\\nvoid MainWindow14::button6_clicked()\\r\\n{\\r\\n    // 删除当前行\\r\\n    int currentRow = this->tableWidget1->currentRow();\\r\\n    this->tableWidget1->removeRow(currentRow);\\r\\n}\\r\\n\\r\\nvoid MainWindow14::button7_clicked()\\r\\n{\\r\\n    // 自动调节行高\\r\\n    this->tableWidget1->resizeRowsToContents();\\r\\n}\\r\\n\\r\\nvoid MainWindow14::button8_clicked()\\r\\n{\\r\\n    // 自动调节列宽\\r\\n    this->tableWidget1->resizeColumnsToContents();\\r\\n}\\r\\n\\r\\nvoid MainWindow14::button9_clicked()\\r\\n{\\r\\n    // 读取表格内容到文本\\r\\n    int row = this->tableWidget1->rowCount();\\r\\n    int column = this->tableWidget1->columnCount();\\r\\n\\r\\n    QString str1 = \\"\\";\\r\\n\\r\\n    for(int r=0; r<row; r++)\\r\\n    {\\r\\n        str1 = QString::asprintf(\\"第 %d 行\\", r);\\r\\n        for(int c=0; c<column; c++)\\r\\n        {\\r\\n            if(c == 5)\\r\\n            {\\r\\n                if(this->tableWidget1->item(r, c)->checkState() == Qt::Checked)\\r\\n                {\\r\\n                    str1 += \\"党员\\";\\r\\n                }\\r\\n                else\\r\\n                {\\r\\n                    str1 += \\"非党员\\";\\r\\n                }\\r\\n            }\\r\\n            else\\r\\n            {\\r\\n                str1 += this->tableWidget1->item(r, c)->text();\\r\\n            }\\r\\n        }\\r\\n        this->plainTextEdit1->appendPlainText(str1);\\r\\n    }\\r\\n}\\r\\n\\r\\nvoid MainWindow14::checkBox1_clicked(bool checked)\\r\\n{\\r\\n    // 表格可编辑\\r\\n    if(checked)\\r\\n    {\\r\\n        this->tableWidget1->setEditTriggers(QAbstractItemView::DoubleClicked | QAbstractItemView::SelectedClicked);\\r\\n    }\\r\\n    else\\r\\n    {\\r\\n        this->tableWidget1->setEditTriggers(QAbstractItemView::NoEditTriggers);\\r\\n    }\\r\\n}\\r\\n\\r\\nvoid MainWindow14::checkBox2_clicked(bool checked)\\r\\n{\\r\\n    // 间隔行底色\\r\\n    this->tableWidget1->setAlternatingRowColors(checked);\\r\\n}\\r\\n\\r\\nvoid MainWindow14::checkBox3_clicked(bool checked)\\r\\n{\\r\\n    // 显示行表头\\r\\n    this->tableWidget1->horizontalHeader()->setVisible(checked);\\r\\n}\\r\\n\\r\\nvoid MainWindow14::checkBox4_clicked(bool checked)\\r\\n{\\r\\n    // 显示列表头\\r\\n    this->tableWidget1->verticalHeader()->setVisible(checked);\\r\\n}\\r\\n\\r\\nvoid MainWindow14::radioButton1_clicked(bool checked)\\r\\n{\\r\\n    // 行选择\\r\\n    Q_UNUSED(checked);\\r\\n    this->tableWidget1->setSelectionBehavior(QAbstractItemView::SelectRows);\\r\\n}\\r\\n\\r\\nvoid MainWindow14::radioButton2_clicked(bool checked)\\r\\n{\\r\\n    // 单元格选择\\r\\n    Q_UNUSED(checked);\\r\\n    this->tableWidget1->setSelectionBehavior(QAbstractItemView::SelectItems);\\r\\n}\\r\\n\\r\\nvoid MainWindow14::tableWidget1_currentCellChanged(int currentRow, int currentColumn, int previousRow, int previousColumn)\\r\\n{\\r\\n    Q_UNUSED(previousColumn);\\r\\n    Q_UNUSED(previousRow);\\r\\n    QTableWidgetItem *item = this->tableWidget1->item(currentRow, currentColumn);\\r\\n    if(!item)\\r\\n        return;\\r\\n    this->label1->setText(QString::asprintf(\\"当前单元格坐标:第 %d 行第 %d 列\\", currentRow + 1, currentColumn + 1));\\r\\n    this->label2->setText(QString::asprintf(\\"当前单元格类型:%d\\", item->type()));\\r\\n    if(currentColumn == 5)\\r\\n    {\\r\\n        if(item->checkState() == Qt::Checked)\\r\\n        {\\r\\n            this->label3->setText(\\"当前单元格数据:党员\\");\\r\\n        }\\r\\n        else\\r\\n        {\\r\\n            this->label3->setText(\\"当前单元格数据:非党员\\");\\r\\n        }\\r\\n    }\\r\\n    else\\r\\n    {\\r\\n        this->label3->setText(\\"当前单元格数据:\\" + item->text());\\r\\n    }\\r\\n}\\r\\n\\r\\n```","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},"0f2819e64af807ce5f59b7e050f0628a8d1367f03262fe4c3d6f305c15d7258f":{"title":"QTreeWidget 和 QDockWidget","hash":"0f2819e64af807ce5f59b7e050f0628a8d1367f03262fe4c3d6f305c15d7258f","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2022-01-07","update":"2022-01-07","content":"\\r\\n```c++\\r\\n#if _MSC_VER >= 1600\\r\\n#pragma execution_character_set(\\"utf-8\\")\\r\\n#endif\\r\\n\\r\\n#include \\"mainwindow13.h\\"\\r\\n\\r\\n#include <QList>\\r\\n#include <QStringList>\\r\\n#include <QFileDialog>\\r\\n#include <QDir>\\r\\n#include <QFile>\\r\\n#include <QFileInfoList>\\r\\n#include <QDebug>\\r\\n#include <QDateTime>\\r\\n\\r\\nMainWindow13::MainWindow13(QString title, QWidget *parent) : QMainWindow(parent)\\r\\n{\\r\\n    this->setWindowTitle(title);\\r\\n\\r\\n    this->menuBar1 = new QMenuBar();\\r\\n    this->menu1 = new QMenu();\\r\\n    this->menu1->setTitle(\\"目录树\\");\\r\\n    this->menu2 = new QMenu();\\r\\n    this->menu2->setTitle(\\"视图\\");\\r\\n    this->menuBar1->addMenu(this->menu1);\\r\\n    this->menuBar1->addMenu(this->menu2);\\r\\n    this->setMenuBar(this->menuBar1);\\r\\n\\r\\n    this->toolBar1 = new QToolBar();\\r\\n    this->toolBar1->setWindowTitle(\\"QTreeWidget 操作\\");\\r\\n    this->action1 = new QAction();\\r\\n    this->action1->setText(\\"添加目录\\");\\r\\n    this->action2 = new QAction();\\r\\n    this->action2->setText(\\"添加文件\\");\\r\\n    this->action3 = new QAction();\\r\\n    this->action3->setText(\\"删除节点\\");\\r\\n    this->action4 = new QAction();\\r\\n    this->action4->setText(\\"遍历节点\\");\\r\\n    this->action5 = new QAction();\\r\\n    this->action5->setText(\\"放大\\");\\r\\n    this->action6 = new QAction();\\r\\n    this->action6->setText(\\"缩小\\");\\r\\n    this->action7 = new QAction();\\r\\n    this->action7->setText(\\"实际大小\\");\\r\\n    this->action8 = new QAction();\\r\\n    this->action8->setText(\\"适合宽度\\");\\r\\n    this->action9 = new QAction();\\r\\n    this->action9->setText(\\"适合高度\\");\\r\\n    this->action10 = new QAction();\\r\\n    // QAction 是否可选\\r\\n    this->action10->setCheckable(true);\\r\\n    this->action10->setText(\\"窗口浮动\\");\\r\\n    this->action11 = new QAction();\\r\\n    this->action11->setCheckable(true);\\r\\n    this->action11->setText(\\"窗体可见\\");\\r\\n    this->action12 = new QAction();\\r\\n    this->action12->setText(\\"退出\\");\\r\\n    this->toolBar1->addAction(this->action1);\\r\\n    this->toolBar1->addAction(this->action2);\\r\\n    this->toolBar1->addAction(this->action3);\\r\\n    this->toolBar1->addAction(this->action4);\\r\\n    this->toolBar1->addSeparator();\\r\\n    this->toolBar1->addAction(this->action5);\\r\\n    this->toolBar1->addAction(this->action6);\\r\\n    this->toolBar1->addAction(this->action7);\\r\\n    this->toolBar1->addAction(this->action8);\\r\\n    this->toolBar1->addSeparator();\\r\\n    this->toolBar1->addAction(this->action9);\\r\\n    this->toolBar1->addAction(this->action10);\\r\\n    this->toolBar1->addAction(this->action11);\\r\\n    this->toolBar1->addAction(this->action12);\\r\\n    this->toolBar1->addSeparator();\\r\\n    this->addToolBar(this->toolBar1);\\r\\n\\r\\n    this->dockWidge1 = new QDockWidget();\\r\\n    this->dockWidge1->setWindowTitle(\\"图片目录树\\");\\r\\n    this->dockWidge1->setFeatures(QDockWidget::DockWidgetMovable | QDockWidget::DockWidgetFloatable);\\r\\n    this->treeWidget1 = new QTreeWidget();\\r\\n    this->dockWidge1->setWidget(this->treeWidget1);\\r\\n    this->addDockWidget(Qt::LeftDockWidgetArea, this->dockWidge1);\\r\\n\\r\\n    this->scrollArea1 = new QScrollArea();\\r\\n    QHBoxLayout *layout1 = new QHBoxLayout();\\r\\n    this->label1 = new QLabel();\\r\\n    layout1->addWidget(this->label1);\\r\\n    this->scrollArea1->setLayout(layout1);\\r\\n    this->setCentralWidget(this->scrollArea1);\\r\\n\\r\\n    this->statusBar1 = new QStatusBar();\\r\\n    this->label2 = new QLabel();\\r\\n    this->statusBar1->addWidget(this->label2);\\r\\n    this->setStatusBar(this->statusBar1);\\r\\n\\r\\n    this->connect(this->action1, SIGNAL(triggered()), this, SLOT(action1_triggered()));\\r\\n    this->connect(this->action2, SIGNAL(triggered()), this, SLOT(action2_triggered()));\\r\\n    this->connect(this->action3, SIGNAL(triggered()), this, SLOT(action3_triggered()));\\r\\n    this->connect(this->action4, SIGNAL(triggered()), this, SLOT(action4_triggered()));\\r\\n    this->connect(this->action5, SIGNAL(triggered()), this, SLOT(action5_triggered()));\\r\\n    this->connect(this->action6, SIGNAL(triggered()), this, SLOT(action6_triggered()));\\r\\n    this->connect(this->action7, SIGNAL(triggered()), this, SLOT(action7_triggered()));\\r\\n    this->connect(this->action8, SIGNAL(triggered()), this, SLOT(action8_triggered()));\\r\\n    this->connect(this->action9, SIGNAL(triggered()), this, SLOT(action9_triggered()));\\r\\n    this->connect(this->action10, SIGNAL(triggered(bool)), this, SLOT(action10_triggered(bool)));\\r\\n    this->connect(this->action11, SIGNAL(triggered(bool)), this, SLOT(action11_triggered(bool)));\\r\\n    this->connect(this->action12, SIGNAL(triggered()), this, SLOT(action12_triggered()));\\r\\n    this->connect(this->treeWidget1, SIGNAL(currentItemChanged(QTreeWidgetItem*, QTreeWidgetItem*)), this, SLOT(treeWidget1_currentItemChanged(QTreeWidgetItem*, QTreeWidgetItem*)));\\r\\n    this->connect(this->dockWidge1, SIGNAL(visibilityChanged(bool)), this, SLOT(dockWidget1_visibilityChanged(bool)));\\r\\n    this->connect(this->dockWidge1, SIGNAL(topLevelChanged(bool)), this, SLOT(dockWidget1_topLevelChanged(bool)));\\r\\n\\r\\n    this->initTreeWidget1();\\r\\n}\\r\\n\\r\\nvoid MainWindow13::action1_triggered()\\r\\n{\\r\\n    // 添加目录\\r\\n    // 添加组节点\\r\\n    QString dir = QFileDialog::getExistingDirectory();\\r\\n    if(!dir.isEmpty())\\r\\n    {\\r\\n        QTreeWidgetItem *currentItem = this->treeWidget1->currentItem();\\r\\n        this->addFolderItem(currentItem, dir, MainWindow13::groupItem1);\\r\\n    }\\r\\n}\\r\\n\\r\\nvoid MainWindow13::action2_triggered()\\r\\n{\\r\\n    // 添加文件\\r\\n    QStringList files = QFileDialog::getOpenFileNames(this, \\"选择文件\\", \\"\\", \\"Images(*.jpg)\\");\\r\\n    if(files.isEmpty())\\r\\n    {\\r\\n        return;\\r\\n    }\\r\\n    QTreeWidgetItem *parentItem, *item;\\r\\n    item = this->treeWidget1->currentItem();\\r\\n    if(item->type() == MainWindow13::imageItem)\\r\\n    {\\r\\n        parentItem = item->parent();\\r\\n    }\\r\\n    else if(item->type() == MainWindow13::groupItem1 || item->type() == MainWindow13::groupItem2)\\r\\n    {\\r\\n        parentItem = item;\\r\\n    }\\r\\n    else\\r\\n    {\\r\\n        parentItem = item;\\r\\n    }\\r\\n\\r\\n    for(int i=0; i<files.length(); i++)\\r\\n    {\\r\\n        QString fileName = files.at(i);\\r\\n        this->addImageItem(parentItem, fileName);\\r\\n    }\\r\\n}\\r\\n\\r\\nvoid MainWindow13::action3_triggered()\\r\\n{\\r\\n    // 删除节点\\r\\n    QTreeWidgetItem *item = this->treeWidget1->currentItem();\\r\\n    QTreeWidgetItem *parentItem = item->parent();\\r\\n    if(parentItem)\\r\\n    {\\r\\n        parentItem->removeChild(item);\\r\\n        delete item;\\r\\n    }\\r\\n}\\r\\n\\r\\nvoid MainWindow13::action4_triggered()\\r\\n{\\r\\n    // 遍历节点\\r\\n    for(int i=0; i<this->treeWidget1->topLevelItemCount(); i++)\\r\\n    {\\r\\n        QTreeWidgetItem *item = this->treeWidget1->topLevelItem(i);\\r\\n        this->changeItemCaption(item);\\r\\n    }\\r\\n}\\r\\n\\r\\nvoid MainWindow13::action5_triggered()\\r\\n{\\r\\n    // 放大\\r\\n    this->pixmapRatio = this->pixmapRatio * 1.2;\\r\\n    int width = this->pixmapRatio * this->currentPixmap.width();\\r\\n    int height = this->pixmapRatio * this->currentPixmap.height();\\r\\n    QPixmap pixmap = this->currentPixmap.scaled(width, height);\\r\\n    this->label1->setPixmap(pixmap);\\r\\n}\\r\\n\\r\\nvoid MainWindow13::action6_triggered()\\r\\n{\\r\\n    // 缩小\\r\\n    this->pixmapRatio = this->pixmapRatio * 0.8;\\r\\n    int width = this->pixmapRatio * this->currentPixmap.width();\\r\\n    int height = this->pixmapRatio * this->currentPixmap.height();\\r\\n    QPixmap pixmap = this->currentPixmap.scaled(width, height);\\r\\n    this->label1->setPixmap(pixmap);\\r\\n}\\r\\n\\r\\nvoid MainWindow13::action7_triggered()\\r\\n{\\r\\n    // 实际大小\\r\\n    this->pixmapRatio = 1;\\r\\n    this->label1->setPixmap(this->currentPixmap);\\r\\n}\\r\\n\\r\\nvoid MainWindow13::action8_triggered()\\r\\n{\\r\\n    // 适合宽度\\r\\n    int width = this->scrollArea1->width();\\r\\n    int realWidth = this->currentPixmap.width();\\r\\n    this->pixmapRatio = float(width) / realWidth;\\r\\n    QPixmap pixmap = this->currentPixmap.scaledToHeight(width - 30);\\r\\n    this->label1->setPixmap(pixmap);\\r\\n}\\r\\n\\r\\nvoid MainWindow13::action9_triggered()\\r\\n{\\r\\n    // 适合高度\\r\\n    int height = this->scrollArea1->height();\\r\\n    int realHeight = this->currentPixmap.height();\\r\\n    this->pixmapRatio = float(height) / realHeight;\\r\\n    QPixmap pixmap = this->currentPixmap.scaledToWidth(height - 30);\\r\\n    this->label1->setPixmap(pixmap);\\r\\n}\\r\\n\\r\\nvoid MainWindow13::action10_triggered(bool arg1)\\r\\n{\\r\\n    // 窗体浮动\\r\\n    this->dockWidge1->setFloating(arg1);\\r\\n}\\r\\n\\r\\nvoid MainWindow13::action11_triggered(bool arg1)\\r\\n{\\r\\n    // 窗体可见\\r\\n    this->dockWidge1->setVisible(arg1);\\r\\n}\\r\\n\\r\\nvoid MainWindow13::action12_triggered()\\r\\n{\\r\\n    // 退出\\r\\n    this->close();\\r\\n}\\r\\n\\r\\nvoid MainWindow13::initTreeWidget1()\\r\\n{\\r\\n    this->treeWidget1->clear();\\r\\n    this->treeWidget1->setColumnCount(2);\\r\\n    QStringList a;\\r\\n    a.append(\\"名称\\");\\r\\n    a.append(\\"类型\\");\\r\\n    this->treeWidget1->setHeaderLabels(a);\\r\\n\\r\\n    QTreeWidgetItem *treeWidgetItem1 = new QTreeWidgetItem(MainWindow13::topItem);\\r\\n    treeWidgetItem1->setText(0, \\"图片文件\\");\\r\\n    treeWidgetItem1->setText(1, \\"type=topItem\\");\\r\\n    treeWidgetItem1->setFlags(Qt::ItemIsSelectable | Qt::ItemIsUserCheckable | Qt::ItemIsEnabled | Qt::ItemIsAutoTristate);\\r\\n    treeWidgetItem1->setCheckState(0, Qt::Checked);\\r\\n    treeWidgetItem1->setData(0, Qt::UserRole, QVariant(\\"\\"));\\r\\n    this->treeWidget1->addTopLevelItem(treeWidgetItem1);\\r\\n    QDir *initDir = new QDir(\\"./images\\");\\r\\n    QString initDirName = initDir->absolutePath();\\r\\n    QDir *initDir1 = new QDir(initDirName);\\r\\n    QTreeWidgetItem *newItem = this->addFolderItem(treeWidgetItem1, initDirName, MainWindow13::groupItem1);\\r\\n\\r\\n    QStringList fileFilters;\\r\\n    fileFilters << \\"*.jpg\\";\\r\\n    initDir1->setNameFilters(fileFilters);\\r\\n    QFileInfoList fileInfoList = initDir1->entryInfoList();\\r\\n    for(int i=0; i<fileInfoList.size(); i++)\\r\\n    {\\r\\n        this->initImages(newItem, fileInfoList.at(i).absoluteFilePath());\\r\\n    }\\r\\n}\\r\\n\\r\\nvoid MainWindow13::initImages(QTreeWidgetItem *grandParentItem, QString fileName)\\r\\n{\\r\\n    QTreeWidgetItem *parentItem;\\r\\n    QString finalFileName = this->getFinalFolderName(fileName);\\r\\n    if(finalFileName.contains(\'_\'))\\r\\n    {\\r\\n        finalFileName = finalFileName.left(finalFileName.indexOf(\'_\'));\\r\\n    }\\r\\n    else\\r\\n    {\\r\\n        finalFileName = finalFileName.left(finalFileName.indexOf(\'.\'));\\r\\n    }\\r\\n    QDateTime dateTime = QDateTime::fromString(finalFileName, \\"yyyyMMdd\\");\\r\\n    bool isHasDateTimeItem = false;\\r\\n    for(int i=0; i<grandParentItem->childCount(); i++)\\r\\n    {\\r\\n        if(grandParentItem->child(i)->text(0) == dateTime.toString(\\"yyyy年MM月\\"))\\r\\n        {\\r\\n            isHasDateTimeItem = true;\\r\\n            parentItem = grandParentItem->child(i);\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n    if(!isHasDateTimeItem)\\r\\n    {\\r\\n        QTreeWidgetItem *newParentItem = this->addFolderItem(grandParentItem, dateTime.toString(\\"yyyy年MM月\\"),  MainWindow13::groupItem2);\\r\\n        this->addImageItem(newParentItem, fileName);\\r\\n    }\\r\\n    else\\r\\n    {\\r\\n        this->addImageItem(parentItem, fileName);\\r\\n    }\\r\\n}\\r\\n\\r\\nQTreeWidgetItem* MainWindow13::addFolderItem(QTreeWidgetItem *item, QString name, treeItemType typeVariable)\\r\\n{\\r\\n    if(name.contains(\'/\'))\\r\\n    {\\r\\n        name = this->getFinalFolderName(name);\\r\\n    }\\r\\n\\r\\n    QTreeWidgetItem *newItem = new QTreeWidgetItem(typeVariable);\\r\\n    newItem->setText(0, name);\\r\\n    newItem->setText(1, \\"type=groupItem1\\");\\r\\n    newItem->setFlags(Qt::ItemIsSelectable | Qt::ItemIsUserCheckable | Qt::ItemIsEnabled | Qt::ItemIsAutoTristate);\\r\\n    newItem->setCheckState(0, Qt::Checked);\\r\\n    newItem->setData(0, Qt::UserRole, QVariant(\\"dirName\\"));\\r\\n    item->addChild(newItem);\\r\\n    return newItem;\\r\\n}\\r\\n\\r\\nQString MainWindow13::getFinalFolderName(const QString &fullPathName)\\r\\n{\\r\\n    int length = fullPathName.length();\\r\\n    int i = fullPathName.lastIndexOf(\\"/\\");\\r\\n    QString str = fullPathName.right(length - i - 1);\\r\\n    return str;\\r\\n}\\r\\n\\r\\nQString MainWindow13::getFolderName(const QString &fullPathName)\\r\\n{\\r\\n    int length = fullPathName.length();\\r\\n    int i = fullPathName.lastIndexOf(\\"/\\");\\r\\n    QString str = fullPathName.left(length - i - 1);\\r\\n    return str;\\r\\n}\\r\\n\\r\\nvoid MainWindow13::addImageItem(QTreeWidgetItem *item, QString fileName)\\r\\n{\\r\\n    QString finalFileName = this->getFinalFolderName(fileName);\\r\\n\\r\\n    QTreeWidgetItem *newItem = new QTreeWidgetItem(MainWindow13::imageItem);\\r\\n    newItem->setText(0, finalFileName);\\r\\n    newItem->setText(1, \\"type=imageItem\\");\\r\\n    newItem->setFlags(Qt::ItemIsSelectable | Qt::ItemIsUserCheckable | Qt::ItemIsEnabled | Qt::ItemIsAutoTristate);\\r\\n    newItem->setCheckState(0, Qt::Checked);\\r\\n    newItem->setData(0, Qt::UserRole, QVariant(fileName));\\r\\n    item->addChild(newItem);\\r\\n}\\r\\n\\r\\nvoid MainWindow13::displayImage(QTreeWidgetItem *item)\\r\\n{\\r\\n    QString fileName = item->data(0, Qt::UserRole).toString();\\r\\n    this->label2->setText(fileName);\\r\\n    this->currentPixmap.load(fileName);\\r\\n    this->action8_triggered();\\r\\n}\\r\\n\\r\\nvoid MainWindow13::changeItemCaption(QTreeWidgetItem *item)\\r\\n{\\r\\n    QString str = \\"*\\" + item->text(0);\\r\\n    item->setText(0, str);\\r\\n    for(int i=0; i<item->childCount(); i++)\\r\\n    {\\r\\n        this->changeItemCaption(item->child(i));\\r\\n    }\\r\\n}\\r\\n\\r\\nvoid MainWindow13::treeWidget1_currentItemChanged(QTreeWidgetItem *current, QTreeWidgetItem *previous)\\r\\n{\\r\\n    Q_UNUSED(previous);\\r\\n\\r\\n    if(!current)\\r\\n        return;\\r\\n\\r\\n    int typeVariable = current->type();\\r\\n    if(typeVariable == MainWindow13::topItem)\\r\\n    {\\r\\n        this->action1->setEnabled(true);\\r\\n        this->action2->setEnabled(true);\\r\\n        this->action3->setEnabled(false);\\r\\n    }\\r\\n    else if(typeVariable == MainWindow13::groupItem1 || typeVariable == MainWindow13::groupItem2)\\r\\n    {\\r\\n        this->action1->setEnabled(true);\\r\\n        this->action2->setEnabled(true);\\r\\n        this->action3->setEnabled(true);\\r\\n    }\\r\\n    else if(typeVariable == MainWindow13::imageItem)\\r\\n    {\\r\\n        this->action1->setEnabled(false);\\r\\n        this->action2->setEnabled(true);\\r\\n        this->action3->setEnabled(true);\\r\\n        this->displayImage(current);\\r\\n    }\\r\\n}\\r\\nvoid MainWindow13::dockWidget1_visibilityChanged(bool arg1)\\r\\n{\\r\\n    this->action11->setChecked(arg1);\\r\\n}\\r\\n\\r\\nvoid MainWindow13::dockWidget1_topLevelChanged(bool arg1)\\r\\n{\\r\\n    this->action10->setChecked(arg1);\\r\\n}\\r\\n\\r\\n```","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},"6e44336e6d3176bafe097c03c8b4fa1b4720238d35450c44b72f7e3177370a57":{"title":"QListWidget","hash":"6e44336e6d3176bafe097c03c8b4fa1b4720238d35450c44b72f7e3177370a57","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2022-01-06","update":"2022-01-06","content":"\\r\\n```c++\\r\\n#if _MSC_VER >= 1600\\r\\n#pragma execution_character_set(\\"utf-8\\")\\r\\n#endif\\r\\n\\r\\n#include \\"mainwindow12.h\\"\\r\\n#include <QList>\\r\\n\\r\\nMainWindow12::MainWindow12(QString title, QWidget *parent) : QMainWindow(parent)\\r\\n{\\r\\n    this->setWindowTitle(title);\\r\\n\\r\\n    this->action1 = new QAction();\\r\\n    this->action1->setText(\\"初始化列表\\");\\r\\n    this->toolButton1 = new QToolButton();\\r\\n    this->toolButton1->setText(this->action1->text());\\r\\n    this->toolButton1->setDefaultAction(this->action1);\\r\\n\\r\\n    this->action2 = new QAction();\\r\\n    this->action2->setText(\\"清除列表\\");\\r\\n    this->toolButton2 = new QToolButton();\\r\\n    this->toolButton2->setText(this->action2->text());\\r\\n    this->toolButton2->setDefaultAction(this->action2);\\r\\n\\r\\n    this->action3 = new QAction();\\r\\n    this->action3->setText(\\"插入项\\");\\r\\n    this->toolButton3 = new QToolButton();\\r\\n    this->toolButton3->setText(this->action3->text());\\r\\n    this->toolButton3->setDefaultAction(this->action3);\\r\\n\\r\\n    this->action4 = new QAction();\\r\\n    this->action4->setText(\\"添加项\\");\\r\\n    this->toolButton4 = new QToolButton();\\r\\n    this->toolButton4->setText(this->action4->text());\\r\\n    this->toolButton4->setDefaultAction(this->action4);\\r\\n\\r\\n    this->action5 = new QAction();\\r\\n    this->action5->setText(\\"删除当前项\\");\\r\\n    this->toolButton5 = new QToolButton();\\r\\n    this->toolButton5->setText(this->action5->text());\\r\\n    this->toolButton5->setDefaultAction(this->action5);\\r\\n\\r\\n    this->setToolButton6();\\r\\n\\r\\n    this->action7 = new QAction();\\r\\n    this->action7->setText(\\"退出\\");\\r\\n\\r\\n    this->toolBar1 = new QToolBar();\\r\\n    this->toolBar1->setWindowTitle(\\"QListWidget 操作\\");\\r\\n    QList<QAction* > actions;\\r\\n    actions.append(this->action1);\\r\\n    actions.append(this->action2);\\r\\n    actions.append(this->action3);\\r\\n    actions.append(this->action4);\\r\\n    actions.append(this->action5);\\r\\n    actions.append(this->action6);\\r\\n    actions.append(this->action7);\\r\\n    this->toolBar1->addActions(actions);\\r\\n    this->addToolBar(this->toolBar1);\\r\\n    // 取消工具栏的右键菜单\\r\\n    this->setContextMenuPolicy(Qt::NoContextMenu);\\r\\n\\r\\n    this->toolBox1 = new QToolBox();\\r\\n    this->toolBox1->addItem(this->setToolBox1ItemWidget1(), \\"QListWidget 操作\\");\\r\\n    this->toolBox1->addItem(this->setToolBox1ItemWidget2(), \\"QTreeWidget 操作\\");\\r\\n    this->toolBox1->addItem(this->setToolBox1ItemWidget3(), \\"QTableWidget 操作\\");\\r\\n\\r\\n    this->tabWidget1 = new QTabWidget();\\r\\n    this->tabWidget1->addTab(this->setTabWidget1ItemWidget1(), \\"QListWidget\\");\\r\\n    // 设置右键菜单策略\\r\\n    this->listWidget1->setContextMenuPolicy(Qt::CustomContextMenu);\\r\\n    this->tabWidget1->addTab(this->setTabWidget1ItemWidget2(), \\"QTreeWidget\\");\\r\\n    this->tabWidget1->addTab(this->setTabWidget1ItemWidget3(), \\"QTableWidget\\");\\r\\n\\r\\n    this->splitter1 = new QSplitter();\\r\\n    this->splitter1->setOrientation(Qt::Horizontal);\\r\\n    this->splitter1->addWidget(this->toolBox1);\\r\\n    this->splitter1->addWidget(this->tabWidget1);\\r\\n    this->splitter1->show();\\r\\n\\r\\n//    QHBoxLayout *layout1 = new QHBoxLayout();\\r\\n////    layout1->addWidget(this->toolBox1);\\r\\n//    layout1->addWidget(this->splitter1);\\r\\n////    layout1->addWidget(this->tabWidget1);\\r\\n//    QVBoxLayout *layout2 = new QVBoxLayout();\\r\\n////    layout2->addWidget(this->toolBar1);\\r\\n//    layout2->addLayout(layout1);\\r\\n//    QWidget* mainWindowWidget = new QWidget();\\r\\n//    mainWindowWidget->setLayout(layout2);\\r\\n    this->setCentralWidget(this->splitter1);\\r\\n\\r\\n    this->connect(this->action1, SIGNAL(triggered()), this, SLOT(action1_triggered()));\\r\\n    this->connect(this->action2, SIGNAL(triggered()), this, SLOT(action2_triggered()));\\r\\n    this->connect(this->action3, SIGNAL(triggered()), this, SLOT(action3_triggered()));\\r\\n    this->connect(this->action4, SIGNAL(triggered()), this, SLOT(action4_triggered()));\\r\\n    this->connect(this->action5, SIGNAL(triggered()), this, SLOT(action5_triggered()));\\r\\n    this->connect(this->action6, SIGNAL(triggered()), this, SLOT(action6_triggered()));\\r\\n    this->connect(this->action7, SIGNAL(triggered()), this, SLOT(action7_triggered()));\\r\\n    this->connect(this->selectAllAction, SIGNAL(triggered()), this, SLOT(selectAllAction_triggered()));\\r\\n    this->connect(this->selectNoneAction, SIGNAL(triggered()), this, SLOT(selectNoneAction_triggered()));\\r\\n    this->connect(this->selectReverseAction, SIGNAL(triggered()), this, SLOT(selectReverseAction_triggered()));\\r\\n    this->connect(this->checkBox1, SIGNAL(clicked(bool)), this, SLOT(checkBox1_clicked(bool)));\\r\\n    this->connect(this->listWidget1, SIGNAL(currentItemChanged(QListWidgetItem*, QListWidgetItem*)), this, SLOT(listWidget1_currentItemChanged(QListWidgetItem*, QListWidgetItem*)));\\r\\n    this->connect(this->listWidget1, SIGNAL(customContextMenuRequested(const QPoint)), this, SLOT(listWidget1_customContextMenuRequested(const QPoint)));\\r\\n\\r\\n}\\r\\n\\r\\nvoid MainWindow12::setToolButton6()\\r\\n{\\r\\n    this->action6 = new QAction();\\r\\n    this->action6->setText(\\"项选择\\");\\r\\n    this->toolButton6 = new QToolButton();\\r\\n    this->toolButton6->setText(this->action6->text());\\r\\n    this->toolButton6->setDefaultAction(this->action6);\\r\\n    QMenu *menu1 = new QMenu();\\r\\n\\r\\n    this->selectAllAction = new QAction();\\r\\n    this->selectAllAction->setText(\\"全选\\");\\r\\n    this->selectAllToolButton = new QToolButton();\\r\\n    this->selectAllToolButton->setText(this->selectAllAction->text());\\r\\n    this->selectAllToolButton->setDefaultAction(this->selectAllAction);\\r\\n    menu1->addAction(this->selectAllAction);\\r\\n\\r\\n    this->selectNoneAction = new QAction();\\r\\n    this->selectNoneAction->setText(\\"全不选\\");\\r\\n    this->selectNoneToolButton = new QToolButton();\\r\\n    this->selectNoneToolButton->setText(this->selectNoneAction->text());\\r\\n    this->selectNoneToolButton->setDefaultAction(this->selectNoneAction);\\r\\n    menu1->addAction(this->selectNoneAction);\\r\\n\\r\\n    this->selectReverseAction = new QAction();\\r\\n    this->selectReverseAction->setText(\\"反选\\");\\r\\n    this->selectReverseToolButton = new QToolButton();\\r\\n    this->selectReverseToolButton->setText(this->selectReverseAction->text());\\r\\n    this->selectReverseToolButton->setDefaultAction(this->selectReverseAction);\\r\\n    menu1->addAction(this->selectReverseAction);\\r\\n    this->action6->setMenu(menu1);\\r\\n//    this->toolButton6->setMenu(menu1);\\r\\n    // QToolButton::DelayedPopup 不会弹出菜单\\r\\n//    this->toolButton6->setPopupMode(QToolButton::DelayedPopup);\\r\\n    this->toolButton6->setPopupMode(QToolButton::MenuButtonPopup);\\r\\n//    this->toolButton6->setPopupMode(QToolButton::InstantPopup);\\r\\n}\\r\\n\\r\\nQWidget* MainWindow12::setToolBox1ItemWidget1()\\r\\n{\\r\\n    QWidget *toolBox1ItemWidget1 = new QWidget(this->toolBox1);\\r\\n    QGridLayout *layout1 = new QGridLayout();\\r\\n    layout1->addWidget(this->toolButton1, 0, 0);\\r\\n    layout1->addWidget(this->toolButton2, 1, 0);\\r\\n    layout1->addWidget(this->toolButton3, 2, 0);\\r\\n    layout1->addWidget(this->toolButton4, 4, 0);\\r\\n    layout1->addWidget(this->toolButton5, 5, 0);\\r\\n    toolBox1ItemWidget1->setLayout(layout1);\\r\\n    return toolBox1ItemWidget1;\\r\\n}\\r\\n\\r\\nQWidget* MainWindow12::setToolBox1ItemWidget2()\\r\\n{\\r\\n    QWidget *toolBox1ItemWidget2 = new QWidget(this->toolBox1);\\r\\n    return toolBox1ItemWidget2;\\r\\n}\\r\\n\\r\\nQWidget* MainWindow12::setToolBox1ItemWidget3()\\r\\n{\\r\\n    QWidget *toolBox1ItemWidget3 = new QWidget(this->toolBox1);\\r\\n    return toolBox1ItemWidget3;\\r\\n}\\r\\n\\r\\nQWidget* MainWindow12::setTabWidget1ItemWidget1()\\r\\n{\\r\\n    QWidget *tabWidget1ItemWidget1 = new QWidget(this->tabWidget1);\\r\\n\\r\\n    this->label1 = new QLabel();\\r\\n    this->label1->setText(\\"当前项变化\\");\\r\\n    this->lineEdit1 = new QLineEdit();\\r\\n    this->checkBox1 = new QCheckBox();\\r\\n    this->checkBox1->setText(\\"可编辑\\");\\r\\n    QHBoxLayout *layout1 = new QHBoxLayout();\\r\\n    layout1->addWidget(this->label1);\\r\\n    layout1->addWidget(this->lineEdit1);\\r\\n    layout1->addWidget(this->checkBox1);\\r\\n\\r\\n    QHBoxLayout *layout2 = new QHBoxLayout();\\r\\n    layout2->addWidget(this->toolButton6);\\r\\n    layout2->addWidget(this->selectAllToolButton);\\r\\n    layout2->addWidget(this->selectNoneToolButton);\\r\\n    layout2->addWidget(this->selectReverseToolButton);\\r\\n\\r\\n    this->listWidget1 = new QListWidget();\\r\\n    this->initListWidget1();\\r\\n\\r\\n    QVBoxLayout *layout3 = new QVBoxLayout();\\r\\n    layout3->addLayout(layout1);\\r\\n    layout3->addLayout(layout2);\\r\\n    layout3->addWidget(this->listWidget1);\\r\\n\\r\\n    tabWidget1ItemWidget1->setLayout(layout3);\\r\\n    return tabWidget1ItemWidget1;\\r\\n}\\r\\n\\r\\nQWidget* MainWindow12::setTabWidget1ItemWidget2()\\r\\n{\\r\\n    QWidget *tabWidget1ItemWidget2 = new QWidget(this->tabWidget1);\\r\\n    return tabWidget1ItemWidget2;\\r\\n}\\r\\n\\r\\nQWidget* MainWindow12::setTabWidget1ItemWidget3()\\r\\n{\\r\\n    QWidget *tabWidget1ItemWidget3 = new QWidget(this->tabWidget1);\\r\\n    return tabWidget1ItemWidget3;\\r\\n}\\r\\n\\r\\nvoid MainWindow12::initListWidget1()\\r\\n{\\r\\n    this->listWidget1->clear();\\r\\n    bool check1 = this->checkBox1->isChecked();\\r\\n    for(int i=0; i<10; i++)\\r\\n    {\\r\\n        QListWidgetItem *item = new QListWidgetItem();\\r\\n        item->setText(QString::asprintf(\\"Item_%d\\", i));\\r\\n        item->setCheckState(Qt::Checked);\\r\\n        if(check1)\\r\\n        {\\r\\n            item->setFlags(Qt::ItemIsSelectable | Qt::ItemIsEditable | Qt::ItemIsUserCheckable | Qt::ItemIsEnabled);\\r\\n            this->listWidget1->addItem(item);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nvoid MainWindow12::action1_triggered()\\r\\n{\\r\\n    this->initListWidget1();\\r\\n}\\r\\n\\r\\nvoid MainWindow12::action2_triggered()\\r\\n{\\r\\n    this->listWidget1->clear();\\r\\n}\\r\\n\\r\\nvoid MainWindow12::action3_triggered()\\r\\n{\\r\\n    bool check = this->checkBox1->isChecked();\\r\\n    if(check)\\r\\n    {\\r\\n        QListWidgetItem *item = new QListWidgetItem();\\r\\n        item->setFlags(Qt::ItemIsSelectable | Qt::ItemIsEditable | Qt::ItemIsUserCheckable | Qt::ItemIsEnabled);\\r\\n        item->setText(\\"new inserted item\\");\\r\\n        item->setCheckState(Qt::Checked);\\r\\n        this->listWidget1->insertItem(this->listWidget1->currentRow(), item);\\r\\n    }\\r\\n}\\r\\n\\r\\nvoid MainWindow12::action4_triggered()\\r\\n{\\r\\n    bool check = this->checkBox1->isChecked();\\r\\n    if(check && this->listWidget1->currentRow())\\r\\n    {\\r\\n        QListWidgetItem *item = new QListWidgetItem();\\r\\n        item->setFlags(Qt::ItemIsSelectable | Qt::ItemIsEditable | Qt::ItemIsUserCheckable | Qt::ItemIsEnabled);\\r\\n        item->setText(\\"new inserted item\\");\\r\\n        item->setCheckState(Qt::Checked);\\r\\n        this->listWidget1->insertItem(this->listWidget1->count(), item);\\r\\n    }\\r\\n}\\r\\n\\r\\nvoid MainWindow12::action5_triggered()\\r\\n{\\r\\n    QListWidgetItem* item = this->listWidget1->currentItem();\\r\\n    this->listWidget1->removeItemWidget(item);\\r\\n    delete item;\\r\\n\\r\\n//    int row = this->listWidget1->currentRow();\\r\\n//    QListWidgetItem* item = this->listWidget1->takeItem(row);\\r\\n//    delete item;\\r\\n}\\r\\n\\r\\nvoid MainWindow12::action6_triggered()\\r\\n{\\r\\n\\r\\n}\\r\\n\\r\\nvoid MainWindow12::action7_triggered()\\r\\n{\\r\\n    this->close();\\r\\n}\\r\\n\\r\\nvoid MainWindow12::selectAllAction_triggered()\\r\\n{\\r\\n    int count = this->listWidget1->count();\\r\\n    for(int i=0; i<count; i++)\\r\\n    {\\r\\n        this->listWidget1->item(i)->setCheckState(Qt::Checked);\\r\\n    }\\r\\n}\\r\\n\\r\\nvoid MainWindow12::selectNoneAction_triggered()\\r\\n{\\r\\n    int count = this->listWidget1->count();\\r\\n    for(int i=0; i<count; i++)\\r\\n    {\\r\\n        this->listWidget1->item(i)->setCheckState(Qt::Unchecked);\\r\\n    }\\r\\n}\\r\\n\\r\\nvoid MainWindow12::selectReverseAction_triggered()\\r\\n{\\r\\n    int count = this->listWidget1->count();\\r\\n    for(int i=0; i<count; i++)\\r\\n    {\\r\\n        bool check = this->listWidget1->item(i)->checkState();\\r\\n        if(check)\\r\\n        {\\r\\n            this->listWidget1->item(i)->setCheckState(Qt::Unchecked);\\r\\n        }\\r\\n        else\\r\\n        {\\r\\n            this->listWidget1->item(i)->setCheckState(Qt::Checked);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nvoid MainWindow12::checkBox1_clicked(bool checked)\\r\\n{\\r\\n    if(checked)\\r\\n    {\\r\\n        this->initListWidget1();\\r\\n    }\\r\\n}\\r\\n\\r\\nvoid MainWindow12::listWidget1_currentItemChanged(QListWidgetItem* current, QListWidgetItem* previous)\\r\\n{\\r\\n    this->lineEdit1->clear();\\r\\n    if(current)\\r\\n    {\\r\\n        if(previous)\\r\\n        {\\r\\n            this->lineEdit1->setText(\\"前一项:\\" + previous->text() + \\"当前项:\\" + current->text());\\r\\n        }\\r\\n        else\\r\\n        {\\r\\n            this->lineEdit1->setText(\\"当前项:\\" + current->text());\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nvoid MainWindow12::listWidget1_customContextMenuRequested(const QPoint &pos)\\r\\n{\\r\\n    Q_UNUSED(pos);\\r\\n    QMenu* menu1 = new QMenu(this);\\r\\n    menu1->addAction(this->action1);\\r\\n    menu1->addAction(this->action2);\\r\\n    menu1->addAction(this->action3);\\r\\n    menu1->addAction(this->action4);\\r\\n    menu1->addAction(this->action5);\\r\\n    menu1->addAction(this->selectAllAction);\\r\\n    menu1->addAction(this->selectNoneAction);\\r\\n    menu1->addAction(this->selectReverseAction);\\r\\n    // 在鼠标光标位置显示右键快捷菜单\\r\\n    menu1->exec(QCursor::pos());\\r\\n    delete menu1;\\r\\n\\r\\n}\\r\\n\\r\\n```","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},"9ffb95c55f457c59b13eb3830359a9ffb88bc697f86dfba172b1c403a2fca547":{"title":"QComboBox 与 QPlainTextEdit","hash":"9ffb95c55f457c59b13eb3830359a9ffb88bc697f86dfba172b1c403a2fca547","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2021-12-11","update":"2021-12-11","content":"\\r\\n```c++\\r\\n#if _MSC_VER >= 1600\\r\\n#pragma execution_character_set(\\"utf-8\\")\\r\\n#endif\\r\\n\\r\\n#include \\"widget11.h\\"\\r\\n\\r\\n#include <QMap>\\r\\n#include <QTextDocument>\\r\\n#include <QTextBlock>\\r\\n\\r\\nWidget11::Widget11(QString title, QWidget *parent) : QWidget(parent)\\r\\n{\\r\\n    this->setWindowTitle(title);\\r\\n\\r\\n    this->initSimpleComboBoxButton = new QPushButton();\\r\\n    this->initSimpleComboBoxButton->setText(\\"初始化列表\\");\\r\\n    this->clearSimpleComboBoxButton = new QPushButton();\\r\\n    this->clearSimpleComboBoxButton->setText(\\"清空列表\\");\\r\\n    this->simpleComboBox = new QComboBox();\\r\\n\\r\\n    QHBoxLayout *layout1 = new QHBoxLayout();\\r\\n    layout1->addWidget(this->initSimpleComboBoxButton);\\r\\n    layout1->addWidget(this->clearSimpleComboBoxButton);\\r\\n    QVBoxLayout *layout2 = new QVBoxLayout();\\r\\n    layout2->addLayout(layout1);\\r\\n    layout2->addWidget(this->simpleComboBox);\\r\\n    this->groupBox1 = new QGroupBox();\\r\\n    this->groupBox1->setTitle(\\"simple combobox\\");\\r\\n    this->groupBox1->setLayout(layout2);\\r\\n\\r\\n    this->initWithUserDataComboBoxButton = new QPushButton();\\r\\n    this->initWithUserDataComboBoxButton->setText(\\"初始化城市+区号\\");\\r\\n    this->withUserDataComboBox = new QComboBox();\\r\\n    QVBoxLayout *layout3 = new QVBoxLayout();\\r\\n    layout3->addWidget(this->initWithUserDataComboBoxButton);\\r\\n    layout3->addWidget(this->withUserDataComboBox);\\r\\n    this->groupBox2 = new QGroupBox();\\r\\n    this->groupBox2->setTitle(\\"with userdata combobox\\");\\r\\n    this->groupBox2->setLayout(layout3);\\r\\n\\r\\n    this->addContentToComboBoxButton = new QPushButton();\\r\\n    this->addContentToComboBoxButton->setText(\\"文本框内容添加到 combobox\\");\\r\\n    this->clearPLainTextEditButton = new QPushButton();\\r\\n    this->clearPLainTextEditButton->setText(\\"清空文本内容\\");\\r\\n    this->comboBox1 = new QComboBox();\\r\\n    this->plainTextEdit1 = new QPlainTextEdit();\\r\\n\\r\\n    QHBoxLayout *layout4 = new QHBoxLayout();\\r\\n    layout4->addWidget(this->addContentToComboBoxButton);\\r\\n    layout4->addWidget(this->clearPLainTextEditButton);\\r\\n    QVBoxLayout *layout5 = new QVBoxLayout();\\r\\n    layout5->addLayout(layout4);\\r\\n    layout5->addWidget(this->comboBox1);\\r\\n    layout5->addWidget(this->plainTextEdit1);\\r\\n    this->groupBox3 = new QGroupBox();\\r\\n    this->groupBox3->setTitle(\\"QPlainTextEdit(具有标准快捷菜单)\\");\\r\\n    this->groupBox3->setLayout(layout5);\\r\\n\\r\\n    QHBoxLayout *layout6 = new QHBoxLayout();\\r\\n    layout6->addWidget(this->groupBox1);\\r\\n    layout6->addWidget(this->groupBox2);\\r\\n    QVBoxLayout *layout7 = new QVBoxLayout();\\r\\n    layout7->addLayout(layout6);\\r\\n    layout7->addWidget(this->groupBox3);\\r\\n    this->setLayout(layout7);\\r\\n\\r\\n    this->connect(this->initSimpleComboBoxButton, SIGNAL(clicked()), this, SLOT(initSimpleComboBoxButton_clicked()));\\r\\n    this->connect(this->clearSimpleComboBoxButton, SIGNAL(clicked()), this, SLOT(clearSimpleComboBoxButton_clicked()));\\r\\n    this->connect(this->initWithUserDataComboBoxButton, SIGNAL(clicked()), this, SLOT(initWithUserDataComboBoxButton_clicked()));\\r\\n    this->connect(this->addContentToComboBoxButton, SIGNAL(clicked()), this, SLOT(addContentToComboBoxButton_clicked()));\\r\\n    this->connect(this->clearPLainTextEditButton, SIGNAL(clicked()), this, SLOT(clearPLainTextEditButton_clicked()));\\r\\n\\r\\n    this->connect(this->simpleComboBox, SIGNAL(currentIndexChanged(const QString)), this, SLOT(simpleComboBox_currentIndexChanged(const QString)));\\r\\n    this->connect(this->withUserDataComboBox, SIGNAL(currentIndexChanged(const QString)), this, SLOT(withUserDataComboBox_currentIndexChanged(const QString)));\\r\\n    this->connect(this->plainTextEdit1, SIGNAL(customContextMenuRequested(const QPoint)), this, SLOT(plainTextEdit1_customContextMenuRequested(const QPoint)));\\r\\n}\\r\\n\\r\\nvoid Widget11::initSimpleComboBoxButton_clicked()\\r\\n{\\r\\n    this->simpleComboBox->clear();\\r\\n    for(int i=0; i<10; i++)\\r\\n    {\\r\\n        this->simpleComboBox->addItem(QString::asprintf(\\"Item %d\\", i));\\r\\n    }\\r\\n}\\r\\n\\r\\nvoid Widget11::clearSimpleComboBoxButton_clicked()\\r\\n{\\r\\n    this->simpleComboBox->clear();\\r\\n}\\r\\n\\r\\nvoid Widget11::initWithUserDataComboBoxButton_clicked()\\r\\n{\\r\\n    QMap<int, QString> cityZone;\\r\\n    cityZone.insert(1, \\"北京\\");\\r\\n    cityZone.insert(2, \\"上海\\");\\r\\n    cityZone.insert(3, \\"广州\\");\\r\\n    cityZone.insert(4, \\"深圳\\");\\r\\n    cityZone.insert(5, \\"南京\\");\\r\\n    cityZone.insert(6, \\"合肥\\");\\r\\n\\r\\n    foreach(const int cityZontKey, cityZone.keys())\\r\\n    {\\r\\n        this->withUserDataComboBox->addItem(cityZone.value(cityZontKey), cityZontKey);\\r\\n    }\\r\\n}\\r\\n\\r\\nvoid Widget11::simpleComboBox_currentIndexChanged(const QString &arg1)\\r\\n{\\r\\n    this->plainTextEdit1->appendPlainText(arg1);\\r\\n}\\r\\n\\r\\nvoid Widget11::withUserDataComboBox_currentIndexChanged(const QString &arg1)\\r\\n{\\r\\n    // 获取 combobox 项的 userdata\\r\\n    QString str1 = this->withUserDataComboBox->currentData().toString();\\r\\n    this->plainTextEdit1->appendPlainText(str1 + \\":\\" +arg1);\\r\\n}\\r\\n\\r\\nvoid Widget11::addContentToComboBoxButton_clicked()\\r\\n{\\r\\n    // 文本对象\\r\\n    QTextDocument *doc = this->plainTextEdit1->document();\\r\\n    // 回车符是一个 block\\r\\n    int count = doc->blockCount();\\r\\n\\r\\n    for(int i=0; i<count; i++)\\r\\n    {\\r\\n        QTextBlock textLine = doc->findBlockByNumber(i);\\r\\n        QString str1 = textLine.text();\\r\\n        this->comboBox1->addItem(str1);\\r\\n    }\\r\\n}\\r\\n\\r\\nvoid Widget11::clearPLainTextEditButton_clicked()\\r\\n{\\r\\n    this->plainTextEdit1->clear();\\r\\n}\\r\\n\\r\\nvoid Widget11::plainTextEdit1_customContextMenuRequested(const QPoint &pos)\\r\\n{\\r\\n    QMenu *menu1 = this->plainTextEdit1->createStandardContextMenu();\\r\\n    menu1->exec(pos);\\r\\n}\\r\\n\\r\\n```","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},"433f4907bfc0355f5d83ffa8fb35c5c1f9f5071760204594286ed2850f98ae07":{"title":"定时器","hash":"433f4907bfc0355f5d83ffa8fb35c5c1f9f5071760204594286ed2850f98ae07","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2021-12-10","update":"2021-12-10","content":"\\r\\n```c++\\r\\n#if _MSC_VER >= 1600\\r\\n#pragma execution_character_set(\\"utf-8\\")\\r\\n#endif\\r\\n\\r\\n#include \\"widget10.h\\"\\r\\n\\r\\nWidget10::Widget10(QString title, QWidget *parent) : QWidget(parent)\\r\\n{\\r\\n    this->setWindowTitle(title);\\r\\n\\r\\n    this->label1 = new QLabel();\\r\\n    this->label1->setText(\\"周期:\\");\\r\\n    this->spinBox1 = new QSpinBox();\\r\\n    this->spinBox1->setSuffix(\\" s\\");\\r\\n    QHBoxLayout *layout1 = new QHBoxLayout();\\r\\n    layout1->addWidget(this->label1);\\r\\n    layout1->addWidget(this->spinBox1);\\r\\n\\r\\n    this->startButton = new QPushButton();\\r\\n    this->startButton->setText(\\"开始\\");\\r\\n    this->endButton = new QPushButton();\\r\\n    this->endButton->setText(\\"结束\\");\\r\\n    QHBoxLayout *layout2 = new QHBoxLayout();\\r\\n    layout2->addWidget(this->startButton);\\r\\n    layout2->addWidget(this->endButton);\\r\\n\\r\\n    this->label2 = new QLabel();\\r\\n\\r\\n    this->lcdNumber1 = new QLCDNumber();\\r\\n    this->lcdNumber1->setDigitCount(2);\\r\\n    this->lcdNumber2 = new QLCDNumber();\\r\\n    this->lcdNumber2->setDigitCount(2);\\r\\n    this->lcdNumber3 = new QLCDNumber();\\r\\n    this->lcdNumber3->setDigitCount(2);\\r\\n    QHBoxLayout *layout3 = new QHBoxLayout();\\r\\n    layout3->addWidget(this->lcdNumber1);\\r\\n    layout3->addWidget(this->lcdNumber2);\\r\\n    layout3->addWidget(this->lcdNumber3);\\r\\n\\r\\n    this->progressBar1 = new QProgressBar();\\r\\n    this->progressBar1->setMinimum(0);\\r\\n    this->progressBar1->setMaximum(100);\\r\\n    this->progressBar1->setValue(0);\\r\\n\\r\\n    QVBoxLayout *layout4 = new QVBoxLayout();\\r\\n    layout4->addLayout(layout1);\\r\\n    layout4->addLayout(layout2);\\r\\n    layout4->addWidget(this->label2);\\r\\n    layout4->addLayout(layout3);\\r\\n    layout4->addWidget(this->progressBar1);\\r\\n\\r\\n    this->setLayout(layout4);\\r\\n\\r\\n    this->timer1 = new QTimer(this);\\r\\n    this->timer1->stop();\\r\\n\\r\\n    this->time1 = new QTime();\\r\\n\\r\\n    this->connect(this->timer1, SIGNAL(timeout()), this, SLOT(timer1_timeout()));\\r\\n    this->connect(this->startButton, SIGNAL(clicked()), this, SLOT(startButton_clicked()));\\r\\n    this->connect(this->endButton, SIGNAL(clicked()), this, SLOT(endButton_clicked()));\\r\\n}\\r\\n\\r\\nvoid Widget10::timer1_timeout()\\r\\n{\\r\\n    // 定时器中断响应\\r\\n    QTime currentTime = QTime::currentTime();\\r\\n    this->lcdNumber1->display(currentTime.toString(\\"hh\\"));\\r\\n    this->lcdNumber2->display(currentTime.toString(\\"mm\\"));\\r\\n    this->lcdNumber3->display(currentTime.toString(\\"ss\\"));\\r\\n\\r\\n    int value = this->progressBar1->value();\\r\\n    value ++;\\r\\n    if(value > 100)\\r\\n    {\\r\\n        value = 0;\\r\\n    }\\r\\n    this->progressBar1->setValue(value);\\r\\n}\\r\\n\\r\\nvoid Widget10::startButton_clicked()\\r\\n{\\r\\n    int value = this->spinBox1->value();\\r\\n    this->timer1->setInterval(value * 1000);\\r\\n    this->timer1->start();\\r\\n    this->time1->start();\\r\\n\\r\\n    this->startButton->setEnabled(false);\\r\\n    this->endButton->setEnabled(true);\\r\\n}\\r\\n\\r\\nvoid Widget10::endButton_clicked()\\r\\n{\\r\\n    this->timer1->stop();\\r\\n\\r\\n    int time_micro_second = this->time1->elapsed();\\r\\n    int micro_second = time_micro_second % 1000;\\r\\n    int second = time_micro_second / 1000;\\r\\n    QString str1 = QString::asprintf(\\"流逝时间: %d 秒，%d 毫秒\\", second, micro_second);\\r\\n    this->label2->setText(str1);\\r\\n\\r\\n    this->startButton->setEnabled(true);\\r\\n    this->endButton->setEnabled(false);\\r\\n}\\r\\n\\r\\n```","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},"5a044901d20d03b5ca5c87123f084c8403b08064b937f1b8a0ee0bdb4287fe5a":{"title":"日历","hash":"5a044901d20d03b5ca5c87123f084c8403b08064b937f1b8a0ee0bdb4287fe5a","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2021-12-09","update":"2021-12-09","content":"\\r\\n```c++\\r\\n#if _MSC_VER >= 1600\\r\\n#pragma execution_character_set(\\"utf-8\\")\\r\\n#endif\\r\\n\\r\\n#include \\"widget9.h\\"\\r\\n\\r\\nWidget9::Widget9(QString title, QWidget *parent) : QWidget(parent)\\r\\n{\\r\\n    this->setWindowTitle(title);\\r\\n\\r\\n    this->calendarWidget1 = new QCalendarWidget();\\r\\n\\r\\n    QVBoxLayout *layout1 = new QVBoxLayout();\\r\\n    layout1->addWidget(this->calendarWidget1);\\r\\n    this->setLayout(layout1);\\r\\n\\r\\n    this->connect(this->calendarWidget1, SIGNAL(selectionChanged()), this, SLOT(calendarWidget_selectionChanged()));\\r\\n}\\r\\n\\r\\nvoid Widget9::calendarWidget_selectionChanged()\\r\\n{\\r\\n    QDate date1 = this->calendarWidget1->selectedDate();\\r\\n    QMessageBox *messageBox1 = new QMessageBox();\\r\\n    messageBox1->information(this, \\"提示\\", date1.toString(\\"yyyy/MM/dd\\"), QMessageBox::Ok);\\r\\n}\\r\\n\\r\\n```","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},"c7b7c6856d0c994e79e83db768d39c88f8e09f56c04f1595777dd16fb71d996f":{"title":"日期时间","hash":"c7b7c6856d0c994e79e83db768d39c88f8e09f56c04f1595777dd16fb71d996f","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2021-12-08","update":"2021-12-08","content":"\\r\\n```c++\\r\\n#if _MSC_VER >= 1600\\r\\n#pragma execution_character_set(\\"utf-8\\")\\r\\n#endif\\r\\n\\r\\n#include \\"widget8.h\\"\\r\\n\\r\\nWidget8::Widget8(QString title, QWidget *parent) : QWidget(parent)\\r\\n{\\r\\n    this->setWindowTitle(title);\\r\\n\\r\\n    this->button1 = new QPushButton();\\r\\n    this->button1->setText(\\"获取当前日期时间\\");\\r\\n\\r\\n    QLabel *label1 = new QLabel();\\r\\n    label1->setText(\\"时间\\");\\r\\n    this->timeEdit1 = new QTimeEdit();\\r\\n    this->timeEdit1->setDisplayFormat(\\"hh:mm:ss:zzz\\");\\r\\n    this->button2 = new QPushButton();\\r\\n    this->button2->setText(\\"获取时间\\");\\r\\n    QHBoxLayout *layout1 = new QHBoxLayout();\\r\\n    layout1->addWidget(label1);\\r\\n    layout1->addWidget(this->timeEdit1);\\r\\n    layout1->addWidget(this->button2);\\r\\n\\r\\n    QLabel *label2 = new QLabel();\\r\\n    label2->setText(\\"日期\\");\\r\\n    this->dateEdit1 = new QDateEdit();\\r\\n    this->dateEdit1->setDisplayFormat(\\"yyyy/MM/dd\\");\\r\\n    this->button3 = new QPushButton();\\r\\n    this->button3->setText(\\"获取日期\\");\\r\\n    QHBoxLayout *layout2 = new QHBoxLayout();\\r\\n    layout2->addWidget(label2);\\r\\n    layout2->addWidget(this->dateEdit1);\\r\\n    layout2->addWidget(this->button3);\\r\\n\\r\\n    QLabel *label3 = new QLabel();\\r\\n    label3->setText(\\"日期时间\\");\\r\\n    this->dateTimeEdit1 = new QDateTimeEdit();\\r\\n    this->dateTimeEdit1->setDisplayFormat(\\"yyyy/MM/dd hh:mm:ss:zzz\\");\\r\\n    this->button4 = new QPushButton();\\r\\n    this->button4->setText(\\"获取日期时间\\");\\r\\n    QHBoxLayout *layout3 = new QHBoxLayout();\\r\\n    layout3->addWidget(label3);\\r\\n    layout3->addWidget(this->dateTimeEdit1);\\r\\n    layout3->addWidget(this->button4);\\r\\n\\r\\n    QVBoxLayout *layout4 = new QVBoxLayout();\\r\\n    layout4->addWidget(this->button1);\\r\\n    layout4->addLayout(layout1);\\r\\n    layout4->addLayout(layout2);\\r\\n    layout4->addLayout(layout3);\\r\\n\\r\\n    this->setLayout(layout4);\\r\\n\\r\\n    this->connect(this->button1, SIGNAL(clicked()), this, SLOT(button1_clicked()));\\r\\n    this->connect(this->button2, SIGNAL(clicked()), this, SLOT(button2_clicked()));\\r\\n    this->connect(this->button3, SIGNAL(clicked()), this, SLOT(button3_clicked()));\\r\\n    this->connect(this->button4, SIGNAL(clicked()), this, SLOT(button4_clicked()));\\r\\n\\r\\n    this->button1_clicked();\\r\\n}\\r\\n\\r\\nvoid Widget8::button1_clicked()\\r\\n{\\r\\n    QDateTime currentDateTime = QDateTime::currentDateTime();\\r\\n    this->timeEdit1->setTime(currentDateTime.time());\\r\\n    this->dateEdit1->setDate(currentDateTime.date());\\r\\n    this->dateTimeEdit1->setDateTime(currentDateTime);\\r\\n}\\r\\n\\r\\nvoid Widget8::button2_clicked()\\r\\n{\\r\\n    QTime time1 = this->timeEdit1->time();\\r\\n    QMessageBox *messageBox1 = new QMessageBox();\\r\\n    messageBox1->information(this, \\"提示\\", time1.toString(\\"hh:mm:ss\\"), QMessageBox::Ok);\\r\\n}\\r\\n\\r\\nvoid Widget8::button3_clicked()\\r\\n{\\r\\n    QDate date1 = this->dateEdit1->date();\\r\\n    QMessageBox *messageBox1 = new QMessageBox();\\r\\n    messageBox1->information(this, \\"提示\\", date1.toString(\\"yyyy/MM/dd\\"), QMessageBox::Ok);\\r\\n}\\r\\n\\r\\nvoid Widget8::button4_clicked()\\r\\n{\\r\\n    QDateTime dateTime1 = this->dateTimeEdit1->dateTime();\\r\\n    QMessageBox *messageBox1 = new QMessageBox();\\r\\n    messageBox1->information(this, \\"提示\\", dateTime1.toString(\\"yyyy/MM/dd hh:mm:ss\\"), QMessageBox::Ok);\\r\\n}\\r\\n\\r\\n```","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},"36f0a938aa1bfa69dfe45d6f1b31085c8ec61a3b824026d1f5e2ff915be923fd":{"title":"QDial 与 QLCDNumber 使用","hash":"36f0a938aa1bfa69dfe45d6f1b31085c8ec61a3b824026d1f5e2ff915be923fd","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2021-12-07","update":"2021-12-07","content":"\\r\\n```c++\\r\\n#if _MSC_VER >= 1600\\r\\n#pragma execution_character_set(\\"utf-8\\")\\r\\n#endif\\r\\n\\r\\n#include \\"widget7.h\\"\\r\\n\\r\\nWidget7::Widget7(QString title, QWidget *parent) : QWidget(parent)\\r\\n{\\r\\n    this->setWindowTitle(title);\\r\\n\\r\\n    this->dial1 = new QDial();\\r\\n    this->dial1->setNotchesVisible(true);\\r\\n    this->dial1->setNotchTarget(1);\\r\\n    this->lcdNumber1 = new QLCDNumber();\\r\\n\\r\\n    QVBoxLayout *layout2 = new QVBoxLayout();\\r\\n    this->radioButton1 = new QRadioButton();\\r\\n    this->radioButton1->setText(\\"二进制\\");\\r\\n    this->radioButton2 = new QRadioButton();\\r\\n    this->radioButton2->setText(\\"八进制\\");\\r\\n    this->radioButton3 = new QRadioButton();\\r\\n    this->radioButton3->setText(\\"十进制\\");\\r\\n    this->radioButton4 = new QRadioButton();\\r\\n    this->radioButton4->setText(\\"十六进制\\");\\r\\n    layout2->addWidget(this->radioButton1);\\r\\n    layout2->addWidget(this->radioButton2);\\r\\n    layout2->addWidget(this->radioButton3);\\r\\n    layout2->addWidget(this->radioButton4);\\r\\n\\r\\n    this->groupBox1 = new QGroupBox();\\r\\n    this->groupBox1->setTitle(\\"LCD 显示进制\\");\\r\\n    this->groupBox1->setLayout(layout2);\\r\\n\\r\\n    QHBoxLayout *layout1 = new QHBoxLayout();\\r\\n    layout1->addWidget(this->dial1);\\r\\n    layout1->addWidget(this->lcdNumber1);\\r\\n    layout1->addWidget(this->groupBox1);\\r\\n    this->setLayout(layout1);\\r\\n\\r\\n    this->connect(this->dial1, SIGNAL(valueChanged(int)), this, SLOT(dial1_valueChanged(int)));\\r\\n    this->connect(this->radioButton1, SIGNAL(clicked(bool)), this, SLOT(radioButton_clicked(bool)));\\r\\n    this->connect(this->radioButton2, SIGNAL(clicked(bool)), this, SLOT(radioButton_clicked(bool)));\\r\\n    this->connect(this->radioButton3, SIGNAL(clicked(bool)), this, SLOT(radioButton_clicked(bool)));\\r\\n    this->connect(this->radioButton4, SIGNAL(clicked(bool)), this, SLOT(radioButton_clicked(bool)));\\r\\n}\\r\\n\\r\\nvoid Widget7::dial1_valueChanged(int value)\\r\\n{\\r\\n    this->lcdNumber1->display(value);\\r\\n}\\r\\n\\r\\nvoid Widget7::radioButton_clicked(bool checked)\\r\\n{\\r\\n    QRadioButton *currentRadioButton = qobject_cast<QRadioButton *>(sender());\\r\\n    if(currentRadioButton == this->radioButton1)\\r\\n    {\\r\\n        if(checked)\\r\\n        {\\r\\n            this->lcdNumber1->setDigitCount(8);\\r\\n            this->lcdNumber1->setBinMode();\\r\\n        }\\r\\n    }\\r\\n    else if(currentRadioButton == this->radioButton2)\\r\\n    {\\r\\n        if(checked)\\r\\n        {\\r\\n            this->lcdNumber1->setDigitCount(4);\\r\\n            this->lcdNumber1->setOctMode();\\r\\n        }\\r\\n    }\\r\\n    else if(currentRadioButton == this->radioButton3)\\r\\n    {\\r\\n        if(checked)\\r\\n        {\\r\\n            this->lcdNumber1->setDigitCount(3);\\r\\n            this->lcdNumber1->setDecMode();\\r\\n        }\\r\\n    }\\r\\n    else if(currentRadioButton == this->radioButton4)\\r\\n    {\\r\\n        if(checked)\\r\\n        {\\r\\n            this->lcdNumber1->setDigitCount(3);\\r\\n            this->lcdNumber1->setHexMode();\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n```","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},"5a8408f9489b97ae187a42b7209ac8f0da05e700c73c67836dfa870ea82541e7":{"title":"QProgressBar","hash":"5a8408f9489b97ae187a42b7209ac8f0da05e700c73c67836dfa870ea82541e7","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2021-12-06","update":"2021-12-06","content":"\\r\\n```c+++\\r\\n#if _MSC_VER >= 1600\\r\\n#pragma execution_character_set(\\"utf-8\\")\\r\\n#endif\\r\\n\\r\\n#include \\"widget6.h\\"\\r\\n\\r\\nWidget6::Widget6(QString title, QWidget *parent) : QWidget(parent)\\r\\n{\\r\\n    this->setWindowTitle(title);\\r\\n\\r\\n    QVBoxLayout *layout1 = new QVBoxLayout();\\r\\n\\r\\n    this->processBar1 = new QProgressBar();\\r\\n    layout1->addWidget(this->processBar1);\\r\\n\\r\\n    this->setLayout(layout1);\\r\\n}\\r\\n```","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},"1d1a9cbd6ef9504257026be403a93f3529f94d45594243953b0f6ad1ed1f85b9":{"title":"QScrollBar","hash":"1d1a9cbd6ef9504257026be403a93f3529f94d45594243953b0f6ad1ed1f85b9","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2021-12-05","update":"2021-12-05","content":"\\r\\n```c++\\r\\n#if _MSC_VER >= 1600\\r\\n#pragma execution_character_set(\\"utf-8\\")\\r\\n#endif\\r\\n\\r\\n#include \\"widget5.h\\"\\r\\n\\r\\nWidget5::Widget5(QString title, QWidget *parent) : QWidget(parent)\\r\\n{\\r\\n    this->setWindowTitle(title);\\r\\n    this->setGeometry(100, 100, 500, 300);\\r\\n\\r\\n    QVBoxLayout *layout1 = new QVBoxLayout();\\r\\n\\r\\n    this->scrollBar1 = new QScrollBar();\\r\\n    this->scrollBar1->setOrientation(Qt::Horizontal);\\r\\n    layout1->addWidget(this->scrollBar1);\\r\\n\\r\\n    this->scrollBar2 = new QScrollBar();\\r\\n    this->scrollBar2->setOrientation(Qt::Vertical);\\r\\n    layout1->addWidget(this->scrollBar2);\\r\\n\\r\\n    this->setLayout(layout1);\\r\\n}\\r\\n```","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},"ca65ce3eacc94969c87cdbaca44ffc36ff1cd29e4231c94774ac124187b96fc8":{"title":"QSlider","hash":"ca65ce3eacc94969c87cdbaca44ffc36ff1cd29e4231c94774ac124187b96fc8","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2021-12-04","update":"2021-12-04","content":"\\r\\n```c++\\r\\n#if _MSC_VER >= 1600\\r\\n#pragma execution_character_set(\\"utf-8\\")\\r\\n#endif\\r\\n\\r\\n#include \\"widget4.h\\"\\r\\n\\r\\n#include <QColor>\\r\\n#include <QPalette>\\r\\n\\r\\nWidget4::Widget4(QString title, QWidget *parent) : QWidget(parent)\\r\\n{\\r\\n    this->setWindowTitle(title);\\r\\n\\r\\n    this->slider1 = new QSlider();\\r\\n    this->slider1->setOrientation(Qt::Horizontal);\\r\\n    this->slider1->setMinimum(0);\\r\\n    this->slider1->setMaximum(255);\\r\\n    QFormLayout *formLayout1 = new QFormLayout();\\r\\n    formLayout1->addRow(\\"Red\\", this->slider1);\\r\\n\\r\\n    this->slider2 = new QSlider();\\r\\n    this->slider2->setOrientation(Qt::Horizontal);\\r\\n    this->slider2->setMinimum(0);\\r\\n    this->slider2->setMaximum(255);\\r\\n    QFormLayout *formLayout2 = new QFormLayout();\\r\\n    formLayout2->addRow(\\"Green\\", this->slider2);\\r\\n\\r\\n    this->slider3 = new QSlider();\\r\\n    this->slider3->setOrientation(Qt::Horizontal);\\r\\n    this->slider3->setMinimum(0);\\r\\n    this->slider3->setMaximum(255);\\r\\n    QFormLayout *formLayout3 = new QFormLayout();\\r\\n    formLayout3->addRow(\\"Blue\\", this->slider3);\\r\\n\\r\\n    this->slider4 = new QSlider();\\r\\n    this->slider4->setOrientation(Qt::Horizontal);\\r\\n    this->slider4->setMinimum(0);\\r\\n    this->slider4->setMaximum(255);\\r\\n    QFormLayout *formLayout4 = new QFormLayout();\\r\\n    formLayout4->addRow(\\"Alpha\\", this->slider4);\\r\\n\\r\\n    this->textEdit = new QTextEdit();\\r\\n\\r\\n    QGridLayout *gridLayout1 = new QGridLayout();\\r\\n    gridLayout1->addLayout(formLayout1, 0, 0);\\r\\n    gridLayout1->addLayout(formLayout2, 1, 0);\\r\\n    gridLayout1->addLayout(formLayout3, 2, 0);\\r\\n    gridLayout1->addLayout(formLayout4, 3, 0);\\r\\n    gridLayout1->addWidget(this->textEdit, 0, 1, 4, 1);\\r\\n\\r\\n    this->groupBox1 = new QGroupBox();\\r\\n    this->groupBox1->setTitle(\\"QSlider\\");\\r\\n    this->groupBox1->setLayout(gridLayout1);\\r\\n\\r\\n    QVBoxLayout *layout1 = new QVBoxLayout();\\r\\n    layout1->addWidget(this->groupBox1);\\r\\n    this->setLayout(layout1);\\r\\n\\r\\n    this->connect(this->slider1, SIGNAL(valueChanged(int)), this, SLOT(slider_valueChanged(int)));\\r\\n    this->connect(this->slider2, SIGNAL(valueChanged(int)), this, SLOT(slider_valueChanged(int)));\\r\\n    this->connect(this->slider3, SIGNAL(valueChanged(int)), this, SLOT(slider_valueChanged(int)));\\r\\n    this->connect(this->slider4, SIGNAL(valueChanged(int)), this, SLOT(slider_valueChanged(int)));\\r\\n}\\r\\n\\r\\nvoid Widget4::slider_valueChanged(int value)\\r\\n{\\r\\n    Q_UNUSED(value);\\r\\n\\r\\n    QColor color;\\r\\n    int R = this->slider1->value();\\r\\n    int G = this->slider2->value();\\r\\n    int B = this->slider3->value();\\r\\n    int alpha = this->slider4->value();\\r\\n    color.setRgb(R, G, B, alpha);\\r\\n    QPalette palette = this->textEdit->palette();\\r\\n    palette.setColor(QPalette::Base, color);\\r\\n    this->textEdit->setPalette(palette);\\r\\n}\\r\\n```","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},"e1e488f407b70335b91dca4af03479960c29d68eba9bc8890b3227ea498786a8":{"title":"QSpinBox 与 QDoubleSpinBox 的使用","hash":"e1e488f407b70335b91dca4af03479960c29d68eba9bc8890b3227ea498786a8","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2021-12-03","update":"2021-12-03","content":"\\r\\n```c+++\\r\\n#if _MSC_VER >= 1600\\r\\n#pragma execution_character_set(\\"utf-8\\")\\r\\n#endif\\r\\n\\r\\n#include \\"widget3.h\\"\\r\\n\\r\\nWidget3::Widget3(QString title, QWidget *parent) : QWidget(parent)\\r\\n{\\r\\n    this->setWindowTitle(title);\\r\\n\\r\\n    this->label1 = new QLabel();\\r\\n    this->label1->setText(\\"数量\\");\\r\\n    this->spinBox1 = new QSpinBox();\\r\\n    this->spinBox1->setSuffix(\\" kg\\");\\r\\n\\r\\n    this->label2 = new QLabel();\\r\\n    this->label2->setText(\\"单价\\");\\r\\n    this->doubleSpinBox2 = new QDoubleSpinBox();\\r\\n    this->doubleSpinBox2->setPrefix(\\"￥\\");\\r\\n\\r\\n    this->label3 = new QLabel();\\r\\n    this->label3->setText(\\"总价\\");\\r\\n    this->doubleSpinBox3 = new QDoubleSpinBox();\\r\\n    this->doubleSpinBox3->setPrefix(\\"￥\\");\\r\\n    this->doubleSpinBox3->setEnabled(false);\\r\\n\\r\\n    this->buttonCalc = new QPushButton();\\r\\n    this->buttonCalc->setText(\\"计算\\");\\r\\n\\r\\n    this->gridLayout1 = new QGridLayout();\\r\\n    this->gridLayout1->addWidget(this->label1, 0, 0);\\r\\n    this->gridLayout1->addWidget(this->spinBox1, 0, 1);\\r\\n    this->gridLayout1->addWidget(this->label2, 1, 0);\\r\\n    this->gridLayout1->addWidget(this->doubleSpinBox2, 1, 1);\\r\\n    this->gridLayout1->addWidget(this->buttonCalc, 2, 1);\\r\\n    this->gridLayout1->addWidget(this->label3, 3, 0);\\r\\n    this->gridLayout1->addWidget(this->doubleSpinBox3, 3, 1);\\r\\n\\r\\n    this->label4 = new QLabel();\\r\\n    this->label4->setText(\\"二进制\\");\\r\\n    this->spinBox4 = new QSpinBox();\\r\\n    this->spinBox4->setDisplayIntegerBase(2);\\r\\n    this->buttonTranform1 = new QPushButton();\\r\\n    this->buttonTranform1->setText(\\"转换为其他进制\\");\\r\\n\\r\\n    this->label5 = new QLabel();\\r\\n    this->label5->setText(\\"八进制\\");\\r\\n    this->spinBox5 = new QSpinBox();\\r\\n    this->spinBox5->setDisplayIntegerBase(8);\\r\\n    this->buttonTranform2 = new QPushButton();\\r\\n    this->buttonTranform2->setText(\\"转换为其他进制\\");\\r\\n\\r\\n    this->label6 = new QLabel();\\r\\n    this->label6->setText(\\"十进制\\");\\r\\n    this->spinBox6 = new QSpinBox();\\r\\n    this->spinBox6->setDisplayIntegerBase(10);\\r\\n    this->buttonTranform3 = new QPushButton();\\r\\n    this->buttonTranform3->setText(\\"转换为其他进制\\");\\r\\n\\r\\n    this->label7 = new QLabel();\\r\\n    this->label7->setText(\\"十六进制\\");\\r\\n    this->spinBox7 = new QSpinBox();\\r\\n    this->spinBox7->setDisplayIntegerBase(16);\\r\\n    this->buttonTranform4 = new QPushButton();\\r\\n    this->buttonTranform4->setText(\\"转换为其他进制\\");\\r\\n\\r\\n    this->gridLayout2 = new QGridLayout();\\r\\n    this->gridLayout2->addWidget(this->label4, 0, 0);\\r\\n    this->gridLayout2->addWidget(this->spinBox4, 0, 1);\\r\\n    this->gridLayout2->addWidget(this->buttonTranform1, 0, 2);\\r\\n    this->gridLayout2->addWidget(this->label5, 1, 0);\\r\\n    this->gridLayout2->addWidget(this->spinBox5, 1, 1);\\r\\n    this->gridLayout2->addWidget(this->buttonTranform2, 1, 2);\\r\\n    this->gridLayout2->addWidget(this->label6, 2, 0);\\r\\n    this->gridLayout2->addWidget(this->spinBox6, 2, 1);\\r\\n    this->gridLayout2->addWidget(this->buttonTranform3, 2, 2);\\r\\n    this->gridLayout2->addWidget(this->label7, 3, 0);\\r\\n    this->gridLayout2->addWidget(this->spinBox7, 3, 1);\\r\\n    this->gridLayout2->addWidget(this->buttonTranform4, 3, 2);\\r\\n\\r\\n    this->verticalSpacer = new QSpacerItem(10, 100);\\r\\n    this->layout1 = new QVBoxLayout();\\r\\n    this->layout1->addLayout(this->gridLayout1);\\r\\n    this->layout1->addItem(this->verticalSpacer);\\r\\n    this->layout1->addLayout(this->gridLayout2);\\r\\n    this->setLayout(layout1);\\r\\n\\r\\n    this->connect(this->buttonCalc, SIGNAL(clicked()), this, SLOT(buttonCalc_clicked()));\\r\\n    this->connect(this->buttonTranform1, SIGNAL(clicked()), this, SLOT(buttonTranform_clicked()));\\r\\n    this->connect(this->buttonTranform2, SIGNAL(clicked()), this, SLOT(buttonTranform_clicked()));\\r\\n    this->connect(this->buttonTranform3, SIGNAL(clicked()), this, SLOT(buttonTranform_clicked()));\\r\\n    this->connect(this->buttonTranform4, SIGNAL(clicked()), this, SLOT(buttonTranform_clicked()));\\r\\n}\\r\\n\\r\\nvoid Widget3::buttonCalc_clicked()\\r\\n{\\r\\n    int num1 = this->spinBox1->value();\\r\\n    float num2 = this->doubleSpinBox2->value();\\r\\n    float num3 = num1 * num2;\\r\\n    this->doubleSpinBox3->setValue(num3);\\r\\n\\r\\n}\\r\\n\\r\\nvoid Widget3::buttonTranform_clicked()\\r\\n{\\r\\n    QPushButton *button = qobject_cast<QPushButton *>(sender());\\r\\n    if(button == this->buttonTranform1)\\r\\n    {\\r\\n        int value = this->spinBox4->value();\\r\\n        this->spinBox5->setValue(value);\\r\\n        this->spinBox6->setValue(value);\\r\\n        this->spinBox7->setValue(value);\\r\\n    }\\r\\n    else if(button == this->buttonTranform2)\\r\\n    {\\r\\n        int value = this->spinBox5->value();\\r\\n        this->spinBox4->setValue(value);\\r\\n        this->spinBox6->setValue(value);\\r\\n        this->spinBox7->setValue(value);\\r\\n    }\\r\\n    else if(button == this->buttonTranform3)\\r\\n    {\\r\\n        int value = this->spinBox6->value();\\r\\n        this->spinBox4->setValue(value);\\r\\n        this->spinBox5->setValue(value);\\r\\n        this->spinBox7->setValue(value);\\r\\n    }\\r\\n    else if(button == this->buttonTranform4)\\r\\n    {\\r\\n        int value = this->spinBox7->value();\\r\\n        this->spinBox4->setValue(value);\\r\\n        this->spinBox5->setValue(value);\\r\\n        this->spinBox6->setValue(value);\\r\\n    }\\r\\n}\\r\\n```","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},"c7977fcb1e92d746a1e3e4e785b4c032f2e8fa558d6ba3844e741196f6118377":{"title":"QString 的常用功能","hash":"c7977fcb1e92d746a1e3e4e785b4c032f2e8fa558d6ba3844e741196f6118377","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2021-12-02","update":"2021-12-02","content":"\\r\\n```c++\\r\\n#if _MSC_VER >= 1600\\r\\n#pragma execution_character_set(\\"utf-8\\")\\r\\n#endif\\r\\n\\r\\n#include \\"widget2.h\\"\\r\\n\\r\\nWidget2::Widget2(QString title, QWidget *parent) : QWidget(parent)\\r\\n{\\r\\n    this->setWindowTitle(title);\\r\\n\\r\\n    this->formLayout1 = new QFormLayout();\\r\\n    this->str1LineEdit = new QLineEdit();\\r\\n    this->formLayout1->addRow(\\"str1\\", this->str1LineEdit);\\r\\n    this->str2LineEdit = new QLineEdit();\\r\\n    this->formLayout1->addRow(\\"str2\\", this->str2LineEdit);\\r\\n\\r\\n    this->appendButton = new QPushButton();\\r\\n    this->appendButton->setText(\\"append\\");\\r\\n\\r\\n    this->prependButton = new QPushButton();\\r\\n    this->prependButton->setText(\\"prepend\\");\\r\\n\\r\\n    this->toUpperButton = new QPushButton();\\r\\n    this->toUpperButton->setText(\\"toUpper\\");\\r\\n\\r\\n    this->toLowerButton = new QPushButton();\\r\\n    this->toLowerButton->setText(\\"toLower\\");\\r\\n\\r\\n    this->leftButton = new QPushButton();\\r\\n    this->leftButton->setText(\\"left\\");\\r\\n\\r\\n    this->rightButton = new QPushButton();\\r\\n    this->rightButton->setText(\\"right\\");\\r\\n\\r\\n    this->sectionButton = new QPushButton();\\r\\n    this->sectionButton->setText(\\"section\\");\\r\\n\\r\\n    this->simplifiedButton = new QPushButton();\\r\\n    this->simplifiedButton->setText(\\"simplified\\");\\r\\n\\r\\n    this->trimmedButton9 = new QPushButton();\\r\\n    this->trimmedButton9->setText(\\"trimmed\\");\\r\\n\\r\\n    this->countButton = new QPushButton();\\r\\n    this->countButton->setText(\\"count\\");\\r\\n\\r\\n    this->sizeButton = new QPushButton();\\r\\n    this->sizeButton->setText(\\"size\\");\\r\\n\\r\\n    this->lengthButton = new QPushButton();\\r\\n    this->lengthButton->setText(\\"length\\");\\r\\n\\r\\n    this->indexOfButton = new QPushButton();\\r\\n    this->indexOfButton->setText(\\"indexOf\\");\\r\\n\\r\\n    this->lastInIndexOfButton = new QPushButton();\\r\\n    this->lastInIndexOfButton->setText(\\"lastIndexOf\\");\\r\\n\\r\\n    this->startswithButton = new QPushButton();\\r\\n    this->startswithButton->setText(\\"startswith\\");\\r\\n\\r\\n    this->endswithButton = new QPushButton();\\r\\n    this->endswithButton->setText(\\"endswith\\");\\r\\n\\r\\n    this->containsButton = new QPushButton();\\r\\n    this->containsButton->setText(\\"contains\\");\\r\\n\\r\\n    this->isNullButton = new QPushButton();\\r\\n    this->isNullButton->setText(\\"isNull\\");\\r\\n\\r\\n    this->isEmptyButton = new QPushButton();\\r\\n    this->isEmptyButton->setText(\\"isEmpty\\");\\r\\n\\r\\n    this->groupBox1 = new QGroupBox();\\r\\n    this->groupBox1->setTitle(\\"字符串\\");\\r\\n    this->gridLayout1 = new QGridLayout();\\r\\n    this->gridLayout1->addWidget(this->appendButton, 0, 0);\\r\\n    this->gridLayout1->addWidget(this->prependButton, 0, 1);\\r\\n    this->gridLayout1->addWidget(this->toUpperButton, 0, 2);\\r\\n    this->gridLayout1->addWidget(this->toLowerButton, 1, 0);\\r\\n    this->gridLayout1->addWidget(this->leftButton, 1, 1);\\r\\n    this->gridLayout1->addWidget(this->rightButton, 1, 2);\\r\\n    this->gridLayout1->addWidget(this->sectionButton, 2, 0);\\r\\n    this->gridLayout1->addWidget(this->simplifiedButton, 2, 1);\\r\\n    this->gridLayout1->addWidget(this->trimmedButton9, 2, 2);\\r\\n    this->groupBox1->setLayout(this->gridLayout1);\\r\\n\\r\\n    this->groupBox2 = new QGroupBox();\\r\\n    this->groupBox2->setTitle(\\"数字\\");\\r\\n    this->gridLayout2 = new QGridLayout();\\r\\n    this->gridLayout2->addWidget(this->countButton, 0, 0);\\r\\n    this->gridLayout2->addWidget(this->sizeButton, 0, 1);\\r\\n    this->gridLayout2->addWidget(this->lengthButton, 0, 2);\\r\\n    this->gridLayout2->addWidget(this->indexOfButton, 1, 0);\\r\\n    this->gridLayout2->addWidget(this->lastInIndexOfButton, 1, 1);\\r\\n    this->groupBox2->setLayout(this->gridLayout2);\\r\\n\\r\\n    this->groupBox3 = new QGroupBox();\\r\\n    this->groupBox3->setTitle(\\"逻辑判断\\");\\r\\n    this->gridLayout3 = new QGridLayout();\\r\\n    this->gridLayout3->addWidget(this->startswithButton, 0, 0);\\r\\n    this->gridLayout3->addWidget(this->endswithButton, 0, 1);\\r\\n    this->gridLayout3->addWidget(this->containsButton, 0, 2);\\r\\n    this->gridLayout3->addWidget(this->isNullButton, 1, 0);\\r\\n    this->gridLayout3->addWidget(this->isEmptyButton, 1, 1);\\r\\n    this->groupBox3->setLayout(this->gridLayout3);\\r\\n\\r\\n    this->layout1 = new QHBoxLayout();\\r\\n    this->layout1->addWidget(this->groupBox1);\\r\\n    this->layout1->addWidget(this->groupBox2);\\r\\n    this->layout1->addWidget(this->groupBox3);\\r\\n\\r\\n    this->formLayout2 = new QFormLayout();\\r\\n    this->resultLineEdit = new QLineEdit();\\r\\n    this->formLayout2->addRow(\\"结果\\", this->resultLineEdit);\\r\\n\\r\\n    this->layout2 = new QVBoxLayout();\\r\\n    this->layout2->addLayout(this->formLayout1);\\r\\n    this->layout2->addLayout(this->layout1);\\r\\n    this->layout2->addLayout(this->formLayout2);\\r\\n    this->setLayout(this->layout2);\\r\\n\\r\\n    this->connect(this->appendButton, SIGNAL(clicked()), this, SLOT(appendButton_clicked()));\\r\\n    this->connect(this->prependButton, SIGNAL(clicked()), this, SLOT(prependButton_clicked()));\\r\\n    this->connect(this->toUpperButton, SIGNAL(clicked()), this, SLOT(toUpperButton_clicked()));\\r\\n    this->connect(this->toLowerButton, SIGNAL(clicked()), this, SLOT(toLowerButton_clicked()));\\r\\n    this->connect(this->leftButton, SIGNAL(clicked()), this, SLOT(leftButton_clicked()));\\r\\n    this->connect(this->rightButton, SIGNAL(clicked()), this, SLOT(rightButton_clicked()));\\r\\n    this->connect(this->sectionButton, SIGNAL(clicked()), this, SLOT(sectionButton_clicked()));\\r\\n    this->connect(this->simplifiedButton, SIGNAL(clicked()), this, SLOT(simplifiedButton_clicked()));\\r\\n    this->connect(this->trimmedButton9, SIGNAL(clicked()), this, SLOT(trimmedButton9_clicked()));\\r\\n    this->connect(this->countButton, SIGNAL(clicked()), this, SLOT(countButton_clicked()));\\r\\n    this->connect(this->sizeButton, SIGNAL(clicked()), this, SLOT(sizeButton_clicked()));\\r\\n    this->connect(this->lengthButton, SIGNAL(clicked()), this, SLOT(lengthButton_clicked()));\\r\\n    this->connect(this->indexOfButton, SIGNAL(clicked()), this, SLOT(indexOfButton_clicked()));\\r\\n    this->connect(this->lastInIndexOfButton, SIGNAL(clicked()), this, SLOT(lastInIndexOfButton_clicked()));\\r\\n    this->connect(this->startswithButton, SIGNAL(clicked()), this, SLOT(startswithButton_clicked()));\\r\\n    this->connect(this->endswithButton, SIGNAL(clicked()), this, SLOT(endswithButton_clicked()));\\r\\n    this->connect(this->containsButton, SIGNAL(clicked()), this, SLOT(containsButton_clicked()));\\r\\n    this->connect(this->isNullButton, SIGNAL(clicked()), this, SLOT(isNullButton_clicked()));\\r\\n    this->connect(this->isEmptyButton, SIGNAL(clicked()), this, SLOT(isEmptyButton_clicked()));\\r\\n}\\r\\n\\r\\nvoid Widget2::appendButton_clicked()\\r\\n{\\r\\n    QString str1 = this->str1LineEdit->text();\\r\\n    QString str2 = this->str2LineEdit->text();\\r\\n    QString result = str1.append(str2);\\r\\n    this->resultLineEdit->setText(result);\\r\\n}\\r\\n\\r\\nvoid Widget2::prependButton_clicked()\\r\\n{\\r\\n    QString str1 = this->str1LineEdit->text();\\r\\n    QString str2 = this->str2LineEdit->text();\\r\\n    QString result = str1.prepend(str2);\\r\\n    this->resultLineEdit->setText(result);\\r\\n}\\r\\n\\r\\n\\r\\nvoid Widget2::toUpperButton_clicked()\\r\\n{\\r\\n    QString str1 = this->str1LineEdit->text();\\r\\n    QString result = str1.toUpper();\\r\\n    this->resultLineEdit->setText(result);\\r\\n}\\r\\n\\r\\nvoid Widget2::toLowerButton_clicked()\\r\\n{\\r\\n    QString str1 = this->str1LineEdit->text();\\r\\n    QString result = str1.toLower();\\r\\n    this->resultLineEdit->setText(result);\\r\\n}\\r\\n\\r\\nvoid Widget2::leftButton_clicked()\\r\\n{\\r\\n    QString str1 = this->str1LineEdit->text();\\r\\n    int str2 = this->str2LineEdit->text().toInt();\\r\\n    this->resultLineEdit->setText(str1.left(str2));\\r\\n}\\r\\n\\r\\nvoid Widget2::rightButton_clicked()\\r\\n{\\r\\n    QString str1 = this->str1LineEdit->text();\\r\\n    int str2 = this->str2LineEdit->text().toInt();\\r\\n    this->resultLineEdit->setText(str1.right(str2));\\r\\n}\\r\\n\\r\\nvoid Widget2::sectionButton_clicked()\\r\\n{\\r\\n    QString str1 = this->str1LineEdit->text();\\r\\n    QString str2 = this->str2LineEdit->text();\\r\\n    this->resultLineEdit->setText(str1.section(str2, 0, -1));\\r\\n}\\r\\n\\r\\nvoid Widget2::simplifiedButton_clicked()\\r\\n{\\r\\n    QString str1 = this->str1LineEdit->text();\\r\\n    this->resultLineEdit->setText(str1.simplified());\\r\\n}\\r\\n\\r\\nvoid Widget2::trimmedButton9_clicked()\\r\\n{\\r\\n    QString str1 = this->str1LineEdit->text();\\r\\n    this->resultLineEdit->setText(str1.trimmed());\\r\\n}\\r\\n\\r\\nvoid Widget2::countButton_clicked()\\r\\n{\\r\\n    QString str1 = this->str1LineEdit->text();\\r\\n    QString result;\\r\\n    this->resultLineEdit->setText(result.setNum(str1.count()));\\r\\n}\\r\\n\\r\\nvoid Widget2::sizeButton_clicked()\\r\\n{\\r\\n    QString str1 = this->str1LineEdit->text();\\r\\n    QString result;\\r\\n    this->resultLineEdit->setText(result.setNum(str1.size()));\\r\\n}\\r\\n\\r\\nvoid Widget2::lengthButton_clicked()\\r\\n{\\r\\n    QString str1 = this->str1LineEdit->text();\\r\\n    QString result;\\r\\n    this->resultLineEdit->setText(result.setNum(str1.length()));\\r\\n}\\r\\n\\r\\nvoid Widget2::indexOfButton_clicked()\\r\\n{\\r\\n    QString str1 = this->str1LineEdit->text();\\r\\n    QString str2 = this->str2LineEdit->text();\\r\\n    QString result;\\r\\n    this->resultLineEdit->setText(result.setNum(str1.indexOf(str2)));\\r\\n}\\r\\n\\r\\nvoid Widget2::lastInIndexOfButton_clicked()\\r\\n{\\r\\n    QString str1 = this->str1LineEdit->text();\\r\\n    QString str2 = this->str2LineEdit->text();\\r\\n    QString result;\\r\\n    this->resultLineEdit->setText(result.setNum(str1.lastIndexOf(str2)));\\r\\n}\\r\\n\\r\\nvoid Widget2::startswithButton_clicked()\\r\\n{\\r\\n    QString str1 = this->str1LineEdit->text();\\r\\n    QString str2 = this->str2LineEdit->text();\\r\\n    QString result;\\r\\n    // 区分大小写\\r\\n    this->resultLineEdit->setText(result.setNum(str1.startsWith(str2, Qt::CaseSensitive)));\\r\\n    // 不区分大小写\\r\\n    this->resultLineEdit->setText(result.setNum(str1.startsWith(str2, Qt::CaseInsensitive)));\\r\\n}\\r\\n\\r\\nvoid Widget2::endswithButton_clicked()\\r\\n{\\r\\n    QString str1 = this->str1LineEdit->text();\\r\\n    QString str2 = this->str2LineEdit->text();\\r\\n    QString result;\\r\\n    // 区分大小写\\r\\n    this->resultLineEdit->setText(result.setNum(str1.endsWith(str2, Qt::CaseSensitive)));\\r\\n    // 不区分大小写\\r\\n    this->resultLineEdit->setText(result.setNum(str1.endsWith(str2, Qt::CaseInsensitive)));\\r\\n}\\r\\n\\r\\nvoid Widget2::containsButton_clicked()\\r\\n{\\r\\n    QString str1 = this->str1LineEdit->text();\\r\\n    QString str2 = this->str2LineEdit->text();\\r\\n    QString result;\\r\\n    // 区分大小写\\r\\n    this->resultLineEdit->setText(result.setNum(str1.contains(str2, Qt::CaseSensitive)));\\r\\n    // 不区分大小写\\r\\n    this->resultLineEdit->setText(result.setNum(str1.contains(str2, Qt::CaseInsensitive)));\\r\\n}\\r\\n\\r\\nvoid Widget2::isNullButton_clicked()\\r\\n{\\r\\n    QString str1 = this->str1LineEdit->text();\\r\\n    QString result;\\r\\n    this->resultLineEdit->setText(result.setNum(str1.isEmpty()));\\r\\n}\\r\\n\\r\\nvoid Widget2::isEmptyButton_clicked()\\r\\n{\\r\\n    QString str1 = this->str1LineEdit->text();\\r\\n    QString result;\\r\\n    this->resultLineEdit->setText(result.setNum(str1.isNull()));\\r\\n}\\r\\n\\r\\n```","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},"82c9fd9a979cf75a24b79a98aa3f81d5edf826ea0db5b42fcfebc4987fc70582":{"title":"字符串与数值之间的转换","hash":"82c9fd9a979cf75a24b79a98aa3f81d5edf826ea0db5b42fcfebc4987fc70582","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"QT"}],"create":"2021-12-01","update":"2021-12-01","content":"\\r\\n```c++\\r\\n#if _MSC_VER >= 1600\\r\\n#pragma execution_character_set(\\"utf-8\\")\\r\\n#endif\\r\\n\\r\\n#include \\"widget1.h\\"\\r\\n\\r\\nWidget1::Widget1(QString title, QWidget *parennt) : QWidget(parennt)\\r\\n{\\r\\n    this->setWindowTitle(title);\\r\\n\\r\\n    this->label1 = new QLabel();\\r\\n    this->label1->setText(\\"数量\\");\\r\\n    this->lineEdit1 = new QLineEdit();\\r\\n\\r\\n    this->label2 = new QLabel();\\r\\n    this->label2->setText(\\"单价\\");\\r\\n    this->lineEdit2 = new QLineEdit();\\r\\n\\r\\n    this->label3 = new QLabel();\\r\\n    this->label3->setText(\\"总价\\");\\r\\n    this->lineEdit3 = new QLineEdit();\\r\\n    this->lineEdit3->setEnabled(false);\\r\\n\\r\\n    this->buttonCalc = new QPushButton();\\r\\n    this->buttonCalc->setText(\\"计算\\");\\r\\n\\r\\n    this->gridLayout1 = new QGridLayout();\\r\\n    this->gridLayout1->addWidget(this->label1, 0, 0);\\r\\n    this->gridLayout1->addWidget(this->lineEdit1, 0, 1);\\r\\n    this->gridLayout1->addWidget(this->label2, 1, 0);\\r\\n    this->gridLayout1->addWidget(this->lineEdit2, 1, 1);\\r\\n    this->gridLayout1->addWidget(this->buttonCalc, 2, 1);\\r\\n    this->gridLayout1->addWidget(this->label3, 3, 0);\\r\\n    this->gridLayout1->addWidget(this->lineEdit3, 3, 1);\\r\\n\\r\\n    this->label4 = new QLabel();\\r\\n    this->label4->setText(\\"二进制\\");\\r\\n    this->lineEdit4 = new QLineEdit();\\r\\n    this->buttonTranform1 = new QPushButton();\\r\\n    this->buttonTranform1->setText(\\"转换为其他进制\\");\\r\\n\\r\\n    this->label5 = new QLabel();\\r\\n    this->label5->setText(\\"八进制\\");\\r\\n    this->lineEdit5 = new QLineEdit();\\r\\n    this->buttonTranform2 = new QPushButton();\\r\\n    this->buttonTranform2->setText(\\"转换为其他进制\\");\\r\\n\\r\\n    this->label6 = new QLabel();\\r\\n    this->label6->setText(\\"十进制\\");\\r\\n    this->lineEdit6 = new QLineEdit();\\r\\n    this->buttonTranform3 = new QPushButton();\\r\\n    this->buttonTranform3->setText(\\"转换为其他进制\\");\\r\\n\\r\\n    this->label7 = new QLabel();\\r\\n    this->label7->setText(\\"十六进制\\");\\r\\n    this->lineEdit7 = new QLineEdit();\\r\\n    this->buttonTranform4 = new QPushButton();\\r\\n    this->buttonTranform4->setText(\\"转换为其他进制\\");\\r\\n\\r\\n    this->gridLayout2 = new QGridLayout();\\r\\n    this->gridLayout2->addWidget(this->label4, 0, 0);\\r\\n    this->gridLayout2->addWidget(this->lineEdit4, 0, 1);\\r\\n    this->gridLayout2->addWidget(this->buttonTranform1, 0, 2);\\r\\n    this->gridLayout2->addWidget(this->label5, 1, 0);\\r\\n    this->gridLayout2->addWidget(this->lineEdit5, 1, 1);\\r\\n    this->gridLayout2->addWidget(this->buttonTranform2, 1, 2);\\r\\n    this->gridLayout2->addWidget(this->label6, 2, 0);\\r\\n    this->gridLayout2->addWidget(this->lineEdit6, 2, 1);\\r\\n    this->gridLayout2->addWidget(this->buttonTranform3, 2, 2);\\r\\n    this->gridLayout2->addWidget(this->label7, 3, 0);\\r\\n    this->gridLayout2->addWidget(this->lineEdit7, 3, 1);\\r\\n    this->gridLayout2->addWidget(this->buttonTranform4, 3, 2);\\r\\n\\r\\n    this->verticalSpacer = new QSpacerItem(10, 100);\\r\\n    this->layout1 = new QVBoxLayout();\\r\\n    this->layout1->addLayout(this->gridLayout1);\\r\\n    this->layout1->addItem(this->verticalSpacer);\\r\\n    this->layout1->addLayout(this->gridLayout2);\\r\\n    this->setLayout(layout1);\\r\\n\\r\\n    this->connect(this->buttonCalc, SIGNAL(clicked()), this, SLOT(buttonCalc_clicked()));\\r\\n    this->connect(this->buttonTranform1, SIGNAL(clicked()), this, SLOT(buttonTranform_clicked()));\\r\\n    this->connect(this->buttonTranform2, SIGNAL(clicked()), this, SLOT(buttonTranform_clicked()));\\r\\n    this->connect(this->buttonTranform3, SIGNAL(clicked()), this, SLOT(buttonTranform_clicked()));\\r\\n    this->connect(this->buttonTranform4, SIGNAL(clicked()), this, SLOT(buttonTranform_clicked()));\\r\\n\\r\\n}\\r\\n\\r\\nvoid Widget1::buttonCalc_clicked()\\r\\n{\\r\\n    // QString 转整数的方法\\r\\n    // toInt()\\r\\n    // toShort()\\r\\n    // toLong()\\r\\n    // toUInt()\\r\\n    // toULong()\\r\\n    QString s1 = this->lineEdit1->text();\\r\\n    int num1 = s1.toInt();\\r\\n\\r\\n    QString s2 = this->lineEdit1->text();\\r\\n    float num2 = s2.toInt();\\r\\n\\r\\n    float num3 = num1 * num2;\\r\\n    QString s3;\\r\\n    this->lineEdit3->setText(s3.sprintf(\\"%.2f\\", num3));\\r\\n    this->lineEdit3->setText(s3.asprintf(\\"%.2f\\", num3));\\r\\n    this->lineEdit3->setText(s3.number(num3, \'f\', 2));\\r\\n    this->lineEdit3->setText(s3.setNum(num3, \'f\', 2));\\r\\n\\r\\n}\\r\\n\\r\\nvoid Widget1::buttonTranform_clicked()\\r\\n{\\r\\n    QPushButton *button = qobject_cast<QPushButton *>(sender());\\r\\n    if(button == this->buttonTranform1)\\r\\n    {\\r\\n        int n = this->lineEdit4->text().toInt(nullptr, 2);\\r\\n        QString s;\\r\\n        this->lineEdit5->setText(s.setNum(n, 8));\\r\\n        this->lineEdit6->setText(s.setNum(n, 10));\\r\\n        this->lineEdit7->setText(s.setNum(n, 16).toUpper());\\r\\n    }\\r\\n    else if(button == this->buttonTranform2)\\r\\n    {\\r\\n        int n = this->lineEdit5->text().toInt(nullptr, 8);\\r\\n        QString s;\\r\\n        this->lineEdit4->setText(s.setNum(n, 2));\\r\\n        this->lineEdit6->setText(s.setNum(n, 10));\\r\\n        this->lineEdit7->setText(s.setNum(n, 16).toUpper());\\r\\n    }\\r\\n    else if(button == this->buttonTranform3)\\r\\n    {\\r\\n        int n = this->lineEdit6->text().toInt(nullptr, 10);\\r\\n        QString s;\\r\\n        this->lineEdit4->setText(s.setNum(n, 2));\\r\\n        this->lineEdit5->setText(s.setNum(n, 8));\\r\\n        this->lineEdit7->setText(s.setNum(n, 16).toUpper());\\r\\n    }\\r\\n    else if(button == this->buttonTranform4)\\r\\n    {\\r\\n        int n = this->lineEdit7->text().toInt(nullptr, 16);\\r\\n        QString s;\\r\\n        this->lineEdit4->setText(s.setNum(n, 2));\\r\\n        this->lineEdit5->setText(s.setNum(n, 8));\\r\\n        this->lineEdit6->setText(s.setNum(n, 10).toUpper());\\r\\n    }\\r\\n}\\r\\n```","author":{"username":"yhw-miracle"},"reader":3,"is_comment":true,"comments":[]},"10048f18a4b00cda21d5adee26e40c14f444983afffb4810bc46c52eb4f7e4b7":{"title":"QT 窗体类","hash":"10048f18a4b00cda21d5adee26e40c14f444983afffb4810bc46c52eb4f7e4b7","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"QT"}],"create":"2021-11-30","update":"2021-11-30","content":"### 窗体类\\r\\n\\r\\n* QWidget\\r\\n\\t* 继承自 QObject\\r\\n\\t* 没有指定父容器时可作为独立的窗口\\r\\n\\t* 指定父容器后可以作为容器的内部组件\\r\\n\\r\\n* QDialog\\r\\n\\t* 继承自 QWidget\\r\\n\\t* 对话框，以独立窗口显示\\r\\n\\r\\n* QMainWindow\\r\\n\\t* 继承自 QWidget\\r\\n\\t* 用于设计带菜单栏、工具栏、状态栏的主窗口，一般一独立窗口显示\\r\\n\\r\\n* QSplashWindow\\r\\n\\t* 继承自 QWidget\\r\\n\\t* 用作应用程序启动时的 splash 窗口，没有边框\\r\\n\\r\\n* QMidSubWindow\\r\\n\\t* 继承自 QWidget\\r\\n\\t* 用于为 QMdiArea 提供一个子窗体，用于 MDI 应用程序设计\\r\\n\\r\\n* QDesktopWidget\\r\\n\\t* 继承自 QWidget\\r\\n\\t* 具有多个显卡和多个显示器的系统具有多个桌面，提供用户桌面信息，如屏幕个数、每个屏幕的大小\\r\\n\\r\\n* QWindow\\r\\n\\t* 继承自 QWidget 和 QSurface\\r\\n\\t* 通过底层的窗口系统表示一个窗口的类，一般作为一个父容器的嵌入式窗体，不作为独立窗体","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},"4767070de7562964926437cea497ad5a2ee1b4088008e7c0ec5b8bf5eb7b6614":{"title":"QT 事件","hash":"4767070de7562964926437cea497ad5a2ee1b4088008e7c0ec5b8bf5eb7b6614","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"QT"}],"create":"2021-11-30","update":"2021-11-30","content":"### 事件\\r\\n* closeEvent()\\r\\n* showEvent()\\r\\n* paintEvent()\\r\\n* mouseMoveEvent()\\r\\n* mousePressEvent()\\r\\n* mouseReleaseEvent()\\r\\n* keyPressEvent()\\r\\n* keyReleaseEvent()","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},"6d1d64e7ecf3169283a65272c165714d818d1359098e620290c7d34467b75db3":{"title":"Model View","hash":"6d1d64e7ecf3169283a65272c165714d818d1359098e620290c7d34467b75db3","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"QT"}],"create":"2021-11-29","update":"2021-11-29","content":"### Model/View 结构\\r\\n\\r\\n* 数据\\r\\n\\r\\n* 数据模型\\r\\n\\t* QAbstracttemModel\\r\\n\\t* QAbstractListModel\\r\\n\\t\\t* QStringListModel\\r\\n\\t* QAbstractProxy\\r\\n\\t\\t* QSortFilterProxyModel\\r\\n\\t* QAbstractTableModel\\r\\n\\t\\t* QSqlQueryModel\\r\\n\\t\\t* QSqlTableModel\\r\\n\\t\\t* QSqlRelationalTableModel\\r\\n\\t* QStandardItemModel\\r\\n\\t* QFileSystemModel\\r\\n\\r\\n* 视图组件\\r\\n\\t* QListView\\r\\n\\t* QTreeView\\r\\n\\t* QTableView\\r\\n\\t* QColumnView\\r\\n\\t* QHeaderView\\r\\n\\r\\n* 代理\\r\\n\\t* 模型、视图和代理之间使用信号和糙通信。\\r\\n\\t* 当源数据发生变化时，数据模型发射信号通知视图组件。\\r\\n\\t* 当用户在界面上操作数据时，视图组件发射信号通知这个操作信息。\\r\\n\\t* 当编辑数据时，代理发射信号告知数据模型和视图组件编辑器的状态。\\r\\n\\t* QAbstracrItemDelegate\\r\\n\\t\\t* QStyledItemDelegate","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},"cbd4226fad52065942bc6888839bb0527ce92157c47881a99834579f881eec60":{"title":"QPlainTextEdit","hash":"cbd4226fad52065942bc6888839bb0527ce92157c47881a99834579f881eec60","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"QT"}],"create":"2021-11-28","update":"2021-11-28","content":"### QPlainTextEdit 的方法\\r\\n* appendPlainText()\\r\\n* toPlainText()\\r\\n* document()\\r\\n\\t* blockCount() ===> 回车符是一个 block\\r\\n\\t* findBlockByNumber()\\r\\n\\r\\n### QPlainTextEdit 的槽函数\\r\\n* cut()\\r\\n* copy()\\r\\n* paste()\\r\\n* undo()\\r\\n* redo()\\r\\n* clear()\\r\\n* selectAll()\\r\\n* customContextMenuRequested()","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},"1d610e0ab20e5fbf32591b9fd07cd149c80c61010a9e5bbffdefe06778f4224d":{"title":"QComboBox","hash":"1d610e0ab20e5fbf32591b9fd07cd149c80c61010a9e5bbffdefe06778f4224d","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"QT"}],"create":"2021-11-28","update":"2021-11-28","content":"### QComboBox 方法\\r\\n\\r\\n* addItem\\r\\n\\t* icon\\r\\n\\t* text\\r\\n\\t* const QVariant &userdata\\r\\n* currentIndex()\\r\\n* currentText()\\r\\n* currentData()\\r\\n* itemText()\\r\\n* itemData()\\r\\n* count()","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},"d7e012b39a551b475a823dacc814ba8440744138f06dc905e753a7ed598a50aa":{"title":"QDateEdit QTimeEdit","hash":"d7e012b39a551b475a823dacc814ba8440744138f06dc905e753a7ed598a50aa","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"QT"}],"create":"2021-11-28","update":"2021-11-28","content":"* QDateEdit/QTimeEdit 继承自 QDateTimeEdit\\r\\n\\r\\n### QDateEdit/QTimeEdit/QDateTimeEidt 的属性\\r\\n* datetime\\r\\n* date\\r\\n* time\\r\\n* maximumDateTime\\r\\n* minimumDateTime\\r\\n* maximumDate\\r\\n* minimumDate\\r\\n* maximumTime\\r\\n* minimumTime\\r\\n* currentSection\\r\\n* currentSectionIndex\\r\\n* calendarPopup\\r\\n* displayFormat\\r\\n\\t* d\\r\\n\\t* dd\\r\\n\\t* M\\r\\n\\t* MM\\r\\n\\t* yy\\r\\n\\t* yyyy\\r\\n\\t* h\\r\\n\\t* hh\\r\\n\\t* H\\r\\n\\t* HH\\r\\n\\t* m\\r\\n\\t* mm\\r\\n\\t* s\\r\\n\\t* ss\\r\\n\\t* z\\r\\n\\t* zzz\\r\\n\\t* AP/A\\r\\n\\t* ap/a","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},"04863573382c6e610f2b7871cfb65292d613fbb1ba29334574b9b2bf718cdb3c":{"title":"QSpinBox 与 QDOubleSpinBox 的属性","hash":"04863573382c6e610f2b7871cfb65292d613fbb1ba29334574b9b2bf718cdb3c","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"QT"}],"create":"2021-11-27","update":"2021-11-27","content":"### QSpinBox 与 QDOubleSpinBox 的属性\\r\\n* prefix\\r\\n* suffix\\r\\n* minimum\\r\\n* maximum\\r\\n* singleStep\\r\\n* value\\r\\n* displayIntegerBase ===> QSpinBox 特有属性\\r\\n* decimals ===> QDoubleSpinBox 特有属性\\r\\n\\r\\n* QSpinBox 与 QDoubleSpinBox 读取和设置数值时，无需做字符串和数值直接的转换，也无需做进制之间的转换。\\r\\n","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},"02f80b76e979409a82770dfc0ed605725c2b61c5335d7490121f56ea77915736":{"title":"QSlider QScrollBar Qdial","hash":"02f80b76e979409a82770dfc0ed605725c2b61c5335d7490121f56ea77915736","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"QT"}],"create":"2021-11-27","update":"2021-11-27","content":"* QSlider/QScrollBar/Qdial 的基类是 QAbstractSlider\\r\\n\\r\\n### QAbstractSlider 的属性\\r\\n* minimum\\r\\n* maximum\\r\\n* singleStep\\r\\n* pageStep\\r\\n* value\\r\\n* sliderPosition\\r\\n* racking\\r\\n* orientation\\r\\n\\t* Qt::Horizontal\\r\\n\\t* Qt::Vertical\\r\\n* invertedApperance\\r\\n* invertedControls\\r\\n\\r\\n### QSlider 的属性\\r\\n* tickPosition\\r\\n\\t* QSlider::NoTicks\\r\\n\\t* QSlider::TicksBothSides\\r\\n\\t* QSlider::TicksAbove\\r\\n\\t* QSlider::TickBelow\\r\\n\\t* QSlider::TickLeft\\r\\n\\t* QSlider::TIckRight\\r\\n* tickInterval\\r\\n\\r\\n### Qdial 的属性\\r\\n* notchesVisible\\r\\n* notchTarget\\r\\n\\r\\n### QProcessBar 的属性\\r\\n* minimum\\r\\n* maximum\\r\\n* value\\r\\n* textVisible\\r\\n* orientation\\r\\n* format\\r\\n\\t* \\"%p%\\" ===> 百分比\\r\\n\\t* \\"%v\\" ===> 当前值\\r\\n\\t* \\"%m\\" ===> 总步数\\r\\n\\r\\n### QLCDNumber 的属性\\r\\n* digitCount\\r\\n* smallDecimalPoint\\r\\n* mode\\r\\n\\t* setBinMode\\r\\n\\t* setOctMode\\r\\n\\t* setDecMode\\r\\n\\t* setHexMode\\r\\n* value\\r\\n* intValue","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},"44c42138d0984a831e0c1b84eba5a4339871c6bc2170560ded4306e884c5c712":{"title":"QString","hash":"44c42138d0984a831e0c1b84eba5a4339871c6bc2170560ded4306e884c5c712","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"QT"}],"create":"2021-11-27","update":"2021-11-27","content":"### QString 的一些方法\\r\\n* append() ===> 向后追加字符\\r\\n* prepend() ===> 向前追加字符\\r\\n* toUpper() ===> 转大写\\r\\n* toLower() ====> 转小写\\r\\n* count()\\r\\n* size()\\r\\n* length()\\r\\n* trimmed() ===> 去掉首尾空格\\r\\n* simplified() ===> 去掉首尾空格，中间连续空格用一个空格替换\\r\\n* indexOf()\\r\\n* lastIndexOf()\\r\\n* isNull ===> 未赋值的字符串，isNull() 返回为 true\\r\\n* isEmpty() ===> 空字符串，即\\"\\\\0\\"，isEmpty() 返回为 true，isNull() 返回为 false\\r\\n* contains()\\r\\n* startswith()\\r\\n* endswith()\\r\\n* left() ===> 从左边取 n 个字符\\r\\n* right() ===> 从右边取 n 个字符\\r\\n* section() ===> 以分隔符提取字符串\\r\\n\\r\\n### QString 转整数的方法\\r\\n* toInt()\\r\\n* toShort()\\r\\n* toLong()\\r\\n* toUInt()\\r\\n* toULong()\\r\\n\\r\\n### QString 转浮点数的方法\\r\\n* str.sprintf(\\"%.2f\\", num)\\r\\n* str.asprintf(\\"%.2f\\", num)\\r\\n* str.number(num, \'f\', 2)\\r\\n* str.setNum(num, \'f\', 2)\\r\\n\\r\\n### 进制转换\\r\\n* toInt() ===> base 参数\\r\\n* setNum() ===> base 参数","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},"d3b10c6a1d4ecca24b29e93b714a83e57ad4c2db1000891376d0683b9a65564b":{"title":"QT 模块","hash":"d3b10c6a1d4ecca24b29e93b714a83e57ad4c2db1000891376d0683b9a65564b","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"QT"}],"create":"2021-11-26","update":"2021-11-26","content":"### Qt 基本模块\\r\\n* Qt Core\\r\\n* Qt GUI\\r\\n* Qt Multimedia\\r\\n* Qt Multimedia Wdigets\\r\\n* Qt Network\\r\\n* Qt QML\\r\\n* Qt Quick\\r\\n* Qt Quick Controls\\r\\n* Qt Quick Dialogs\\r\\n* Qt Quick Layouts\\r\\n* Qt SQL\\r\\n* Qt Test\\r\\n* Qt Widgets\\r\\n\\r\\n### Qt 附加模块\\r\\n* Active QT\\r\\n* Qt 3D\\r\\n* Qt Android Extras\\r\\n* Qt Bluetooth\\r\\n* Qt Concurrent\\r\\n* Qt D-Bus\\r\\n* Qt Gamepad\\r\\n* Qt Image Formats\\r\\n* Qt Mac Extras\\r\\n* Qt NFC\\r\\n* Qt Positioning\\r\\n* Qt Print Support\\r\\n* Qt Purchasing\\r\\n* Qt Sensors\\r\\n* Qt Serial Bus\\r\\n* Qt SVG\\r\\n* Qt WebChannel\\r\\n* Qt WebEngine\\r\\n* Qt WebSockets\\r\\n* Qt Windows Extras\\r\\n* Qt XML\\r\\n* Qt XML Patterns\\r\\n* Qt Charts\\r\\n* Qt Data Visuallization\\r\\n* Qt Virtual Keyboard\\r\\n\\r\\n### Qt 增值模块\\r\\n* Qt for Device Creation\\r\\n* Qt Quick Compiler\\r\\n\\r\\n### 技术预览模块(Qt 5.9)\\r\\n* Qt Network Authorization\\r\\n* Qt Speech\\r\\n* Qt Remote Objects\\r\\n\\r\\n### Qt 工具\\r\\n* Qt Designer\\r\\n* Qt Help\\r\\n* Qt UI Tools","author":{"username":"yhw-miracle"},"reader":2,"is_comment":true,"comments":[]},"8fe94e1580fea922a255e2d7bf5226c57b92fb56a8125dd75e6f23331612e0d6":{"title":"QT 容器类的迭代","hash":"8fe94e1580fea922a255e2d7bf5226c57b92fb56a8125dd75e6f23331612e0d6","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"QT"}],"create":"2021-11-26","update":"2021-11-26","content":"* Java 类型迭代器\\r\\n\\r\\n| 容器类 | 只读迭代器 | 读写迭代器 |\\r\\n| ------| ------ | ------ |\\r\\n| QList<T>/QQueue<T> | QListIterator<T> | QMutableListItarator<T> |\\r\\n| QLinkedList<T>| QLinkedListIterator<T> | QMutableLinkedListIterator<T> |\\r\\n| QVector<T>/QStack<T> | QVectorIterator<T> | QMutableVectorIterator<T> |\\r\\n| QSet<T> | QSetIterator<T> | QMutableSetIterator<T> |\\r\\n| QMap<Key, T>/QMultiMap<Key, T> | QMapIterator<Key, T> | QMutableMapIterator<Key, T> |\\r\\n| QHash<Key, T>/QMultiHash<Key, T> | QHashIterator<Key, T> | QMutableHashIterator<Key, T> |\\r\\n\\r\\n* STL 类型迭代器\\r\\n\\r\\n| 容器类 | 只读迭代器 | 读写迭代器 |\\r\\n| ------| ------ | ------ |\\r\\n| QList<T>/QQueue<T> | QList<T>::const_iterator | QList<T>::iterator |\\r\\n| QLinkedList<T>| QLinkedList<T>::const_iterator | QLinkedList<T>::iterator |\\r\\n| QVector<T>/QStack<T> | QVector<T>::const_iterator | QVector<T>::iterator |\\r\\n| QSet<T> | QSet<T>::const_iterator | QSet<T>::iterator |\\r\\n| QMap<Key, T>/QMultiMap<Key, T> | QMap<Key, T>::const_iterator | Map<Key, T>::iterator |\\r\\n| QHash<Key, T>/QMultiHash<Key, T> | QHash<Key, T>::const_iterator | QHash<Key, T>::iterator |","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},"600a08d87247d1d0ac32f8052d43b5457c64fb622a352ac23329b994acca86c8":{"title":"QT 容器类","hash":"600a08d87247d1d0ac32f8052d43b5457c64fb622a352ac23329b994acca86c8","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"QT"}],"create":"2021-11-26","update":"2021-11-26","content":"* 顺序容器类\\r\\n\\t* QList\\r\\n\\t\\t* insert()\\r\\n\\t\\t* replace()\\r\\n\\t\\t* removeAt()\\r\\n\\t\\t* move()\\r\\n\\t\\t* swap()\\r\\n\\t\\t* append()\\r\\n\\t\\t* prepend()\\r\\n\\t\\t* removeFirst()\\r\\n\\t\\t* removeLast()\\r\\n\\t\\t* at()\\r\\n\\t\\r\\n\\t* QLinkedList\\r\\n\\t* QVector\\r\\n\\t* QStack\\r\\n\\t\\t* pop()\\r\\n\\t\\t* push()\\r\\n\\r\\n\\t* QQueue\\r\\n\\t\\t* enqueue()\\r\\n\\t\\t* dequeue()\\r\\n\\r\\n* 关联容器\\r\\n\\t* QMap\\r\\n\\t* QMultiMap\\r\\n\\t* QHash\\r\\n\\t* QMultiHash\\r\\n\\t* Qset","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},"02e6c33c9dd5c850a8af5cacedee6cb343f8e3bfdad0fddd57be21313183295f":{"title":"QT 数据类型","hash":"02e6c33c9dd5c850a8af5cacedee6cb343f8e3bfdad0fddd57be21313183295f","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"QT"}],"create":"2021-11-26","update":"2021-11-26","content":"* 数据类型\\r\\n\\r\\n| Qt 数据类型 | 等效定义 | 字节数 |\\r\\n| --- | --- | --- |\\r\\n| qint8 | signed char | 1 |\\r\\n| qint16 | signed short | 2 |\\r\\n| qint32 | signed int | 4 |\\r\\n| qint64 | long long int | 8 |\\r\\n| qlonglong | long long int | 8 |\\r\\n| quint8 | unsigned char | 1 |\\r\\n| quint16 | unsigned short | 2 |\\r\\n| quint32 | unsigned int | 4 |\\r\\n| quint64 | unsigned long long int | 8 |\\r\\n| qulonglong | unsigned long long int | 8 |\\r\\n| uchar | unsigned char | 1 |\\r\\n| ushort | unsigned short | 2 |\\r\\n| uint | unsigned int | 4 |\\r\\n| ulong | unsigned long | 8 |\\r\\n| qreal | double | 8 |\\r\\n| qfloat16 | | 2 |\\r\\n\\r\\n* qreal 默认是 8 字节 double 类型浮点数，Qt 使用 -qreal float 选项进行配置，是 4 字节 float 类型的浮点数。\\r\\n\\r\\n* qfloat16 是 Qt5.9.0 新增的一个累，用于表示 16 位的浮点数，需要包含 <QFloat16>。","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},"ccf8d0c551a805fb5c9de4c3eddf1baa7c13cd33b3f337c7043f8da6c99c90c6":{"title":"列表去重并保留原先顺序","hash":"ccf8d0c551a805fb5c9de4c3eddf1baa7c13cd33b3f337c7043f8da6c99c90c6","sub_title":null,"category":{"name":"问题解决"},"tags":[{"name":"Python"}],"create":"2021-11-24","update":"2021-11-24","content":"1. 解法一\\r\\n```python\\r\\n[list2.append(i) for i in list1 if i not in list2]\\r\\n```\\r\\n\\r\\n2. 解法二\\r\\n```python\\r\\n[list2.append(i) for index,i in enumerate(list1) if list1.index(i) == index]\\r\\n```\\r\\n\\r\\n3. 解法三\\r\\n```python\\r\\nlist2 = list1[:]\\r\\nfor i in list1:\\r\\n\\twhile list2.count(i) > 1:\\r\\n\\t\\tdel list2[list1.index(i)]\\r\\n\\tlist2.sort(key = list1.index)\\r\\n```\\r\\n\\r\\n4. 解法四\\r\\n```python\\r\\nlist(set(list1)).sort(key = list1.index)\\r\\n```\\r\\n\\r\\n5. 解法五\\r\\n```python\\r\\n{}.fromkeys(list1).keys().sort(key = list1.index)\\r\\n```\\r\\n\\r\\n6. 解法六\\r\\n```python\\r\\nsorted(set(list1), key = list1.index)\\r\\n```\\r\\n\\r\\n7. 解法七\\r\\n```python\\r\\nfunc = lambda list1,i: list1 if i in list1 else list1 + [i]\\r\\nreduce(func, [[], ] + list1)\\r\\n```","author":{"username":"yhw-miracle"},"reader":2,"is_comment":true,"comments":[]},"6ea9ec5b049dbc93a537898e72fdd28a33f7716205bc3222574193ebcdc1100b":{"title":"CentOS7 切换不同更新源","hash":"6ea9ec5b049dbc93a537898e72fdd28a33f7716205bc3222574193ebcdc1100b","sub_title":null,"category":{"name":"问题解决"},"tags":[{"name":"CentOS7"}],"create":"2021-11-18","update":"2021-11-18","content":"* ustc\\r\\n\\r\\n```bash\\r\\nsed -e \'s|^mirrorlist=|#mirrorlist=|g\' -e \'s|^#baseurl=http://mirror.centos.org/centos|baseurl=https://mirrors.ustc.edu.cn/centos|g\' -i.bak /etc/yum.repos.d/CentOS-Base.repo\\r\\n```\\r\\n\\r\\n* huaweicloud\\r\\n\\r\\n```bash\\r\\nsed -i \\"s/#baseurl/baseurl/g\\" /etc/yum.repos.d/CentOS-Base.repo\\r\\n\\r\\nsed -i \\"s/mirrorlist=http/#mirrorlist=http/g\\" /etc/yum.repos.d/CentOS-Base.repo\\r\\n\\r\\nsed -i \\"s@http://mirror.centos.org@https://repo.huaweicloud.com@g\\" /etc/yum.repos.d/CentOS-Base.repo\\r\\n```\\r\\n\\r\\n* 修改 /etc/yum/repos.d/CentOS-Base.repo 配置文件后，执行如下命令:\\r\\n\\r\\n```bash\\r\\nyum clean all\\r\\n\\r\\nyum makecache\\r\\n\\r\\nyum update\\r\\n```","author":{"username":"yhw-miracle"},"reader":2,"is_comment":true,"comments":[]},"5296fb7855d8ce7db9ed2deffcba61e064f0b498b38452e435455843cf28feff":{"title":"showdoc 安装与迁移","hash":"5296fb7855d8ce7db9ed2deffcba61e064f0b498b38452e435455843cf28feff","sub_title":null,"category":{"name":"问题解决"},"tags":[{"name":"showdoc"}],"create":"2021-11-18","update":"2021-11-18","content":"* 自动脚本安装\\r\\n\\r\\n先安装 docker\\r\\n\\r\\n```bash\\r\\nwget https://www.showdoc.com.cn/script/showdoc\\r\\nchmode +x showdoc\\r\\n./showdoc\\r\\n```\\r\\n\\r\\n停止服务: \\r\\n```bash\\r\\n./showdoc stop\\r\\n```\\r\\n\\r\\n重启服务: \\r\\n```bash\\r\\n./showdoc restart\\r\\n```\\r\\n\\r\\n升级: \\r\\n```bash\\r\\n./showdoc update\\r\\n```\\r\\n\\r\\n卸载: \\r\\n```bash\\r\\n./showdoc uninstall\\r\\n```\\r\\n\\r\\n* 迁移数据\\r\\n\\r\\n安装 showdoc 程序\\r\\n\\r\\n将旧 showdoc 的数据 /showdoc_data/html/Sqlite/showdoc.db.php 和 /showdoc_data/html/Public/Uploads/* 文件拷贝到新 showdoc 对应的数据目录中\\r\\n\\r\\n如果原有文档里已经有上传的图片和附件，换新的域名的时候也许访问不了。可进入数据库把图片附件路径改一下。showdoc使用sqlite数据库。数据库文件是安装目录下的Sqlite/showdoc.db.php。你可以网络搜索如何在命令行中使用 sqlite数据库，或者使用SQLiteStudio等可视化工具。进入数据库后，执行update page set page_content = replace(page_content,’原始host’,’新host’); 和 update upload_file set real_url= replace(real_url,’原始host’,’新host’);\\r\\n\\r\\n___\\r\\n\\r\\n* 参考\\r\\nhttps://www.showdoc.com.cn/help/1385767280275683","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},"d64b3c10b20f779b1f9a34fa56495e172ea71b37e9c260fb3f039fb0a2b0b333":{"title":"MySQL 相关设置","hash":"d64b3c10b20f779b1f9a34fa56495e172ea71b37e9c260fb3f039fb0a2b0b333","sub_title":null,"category":{"name":"问题解决"},"tags":[{"name":"MySQL"}],"create":"2021-11-18","update":"2021-11-18","content":"* 导入数据是否区分大小写\\r\\n\\r\\n在配置文件`/etc/my.cnf`中配置项`[mysqld]`中新增`lower_case_table_names=1`(0 表示区分大小写，1 表示不区分大小写)，重启数据库\\r\\n\\r\\n* 导入数据显示连接超时\\r\\n\\r\\n```bash\\r\\nset global max_allowed_packet=100000000;\\r\\nset global net_buffer_length=100000;\\r\\nset global interactive_timeout=28800000;\\r\\nset global wait_timeout=28800000;\\r\\n```\\r\\n\\r\\nmax_allowed_packet: 客户端与服务器之间通信的缓冲区的最大大小\\r\\n\\r\\nnet_buffer_length: TCP/IP 和套接字通信缓冲区大小\\r\\n\\r\\ninteractive_timeout: 对后续的交互链接有效\\r\\n\\r\\nwait_timeout: 对当前交互链接有效","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},"f747274243178693efee3e32240e3cbd8e6a9725b757218d72c1156660706881":{"title":"《如何阅读一本书》读书笔记","hash":"f747274243178693efee3e32240e3cbd8e6a9725b757218d72c1156660706881","sub_title":null,"category":{"name":"读书笔记"},"tags":[],"create":"2020-07-19","update":"2020-07-19","content":"这本《如何阅读一本书》在第五章如何做一个自我要求的读者有一段描述触动了我，这段描述如下：\\r\\n\\r\\n在阅读的时候，让自己昏昏入睡比保持清醒要容易得多。爬上床，找个舒适的位置，让灯光有点昏暗，刚好能让你的眼睛觉得有点疲劳，然后选一本非常困难或极端无聊的书——可以是任何一个主题，是一本可读可不读的书——这样几分钟之后，你就会昏昏入睡了。\\r\\n\\r\\n不幸的是，要保持清醒并不是采取相反的行动就会奏效。就算你坐在舒适的椅子里，甚至躺在床上，仍然有可能保持清醒。我们已经知道许多人因为深夜还就着微弱的灯光阅读，而伤害了眼睛的事。到底是什么力量，能让那些秉烛夜读的人仍然保持清醒？起码有一点是可以确定的——他们有没有真正在阅读手中的那本书，造成了其间的差异，而且是极大的差异。\\r\\n\\r\\n在阅读的时候想要保持清醒，或昏昏入睡，主要看你的阅读目标是什么。如果你的阅读目标是获得利益——不论是心灵或精神上的成长——你就得保持清醒。这也意味着在阅读时要尽可能地保持主动，同时还要做一番努力——而这番努力是会有回馈的。\\r\\n\\r\\n这段描述给我最大的感受就是，市面上有很多教人快速阅读，提高人的阅读能力方法的资料，但是这些方法，还是需要你主动地去实现，记住是主动地去实现，毕竟纸上谈兵终觉浅。只有是自己主动地去实现了的方法，才能发现这个方法到底适不适合自己；如果适合自己，还需要主动地去坚持它，完成一万小时的训练，这样我觉得才能彻底掌握这个方法。读书是一件很小的小事，但是要做到读书破万卷，我觉得主动才是最顶层的心法。\\r\\n\\r\\n说到主动，不仅适用于阅读领域，还适用于其他很多领域，从职场小白到职场精英，从注册微信公众号到十万粉丝量，从不起眼的抖音小号到成为抖音爆红流量，等等，这些靠的是每天主动地去运营并坚持，主动是推动这些改变的最大动力，时间才是这些改变的唯一变量。\\r\\n\\r\\n最后，我再来画一下这本的重点，阅读的四个层次。\\r\\n\\r\\n第一层次的阅读，我们称之为基础阅读（elementary reading）。也可以用其他的名称，如初级阅读、基本阅读或初步阅读。不管是哪一种名称，都指出一个人只要熟练这个层次的阅读，就摆脱了文盲的状态，至少已经开始认字了。在熟练这个层次的过程中，一个人可以学习到阅读的基本艺术，接受基础的阅读训练，获得初步的阅读技巧。我们之所以喜欢“基础阅读”这个名称，是因为这个阅读层次的学习通常是在小学时完成的。\\r\\n\\r\\n第二个层次的阅读我们称之为检视阅读（inspectional reading）。特点在强调时间。在这个阅读层次，学生必须在规定的时间内完成一项阅读的功课。譬如他可能要用十五分钟读完一本书，或是同样时间内念完两倍厚的书。\\r\\n\\r\\n第三种层次的阅读，我们称之为分析阅读（analytical reading）。比起前面所说的两种阅读，这要更复杂，更系统化。随内文难读的程度有所不同，读者在使用这种阅读法的时候，多少会相当吃力。\\r\\n\\r\\n第四种，也是最高层次的阅读，我们称之为主题阅读（syntopical reading）。这是所有阅读中最复杂也最系统化的阅读。对阅读者来说，要求也非常多，就算他所阅读的是一本很简单、很容易懂的书也一样。\\r\\n\\r\\n很遗憾，自从大学毕业后，我所阅读的书目都只停留在基础阅读层次。","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},"2bcba820cb957f905b0fca0d1e25a4c566f0f0eb340ee18df66d03d28fb02f71":{"title":"《故事力》读书笔记","hash":"2bcba820cb957f905b0fca0d1e25a4c566f0f0eb340ee18df66d03d28fb02f71","sub_title":null,"category":{"name":"读书笔记"},"tags":[],"create":"2020-07-05","update":"2020-07-05","content":"\\r\\n《故事力》这本书满满的都是讲故事的套路，刷完此书，我对“因为+但是+所以”的故事结构尤其感兴趣，感觉大护法好故事都可以用这个句式套。\\r\\n分享自己看到的两则故事，自己创作太难了，所以就先模仿一下。\\r\\n\\r\\n故事一：\\r\\n你必须活在每一件事情里。\\r\\n现在你要经历充满难题的生活。\\r\\n也许有一天，不知不觉，\\r\\n你将渐渐活出写满答案的人生。\\r\\n--- 里尔克\\r\\n\\r\\n故事二：\\r\\n为什么有些人谈了七八年恋爱，无疾而终后，转头一年后却能和另一个人走向婚姻，我和你说一个故事吧，小时候，奶奶告诉我，这棵石榴树会结很甜的果子，你要好好保护它哦。我听了后，每天给它浇水、施肥；下雨刮风时，避免它被刮倒，我连夜赶制出支架来支撑它；夏天太热了，我搬来风扇给它凉爽；冬天太冷，我    亲手做了一个“棉袄”给它穿。这可是第一年它结果的时候，我尝了一下，酸掉大牙，我很伤心，为什么没有结果很甜很甜的石榴，奶奶安慰我说，第二年后就会结出甜果子。第二年里，我依然精心地呵护它，可是它的果子依旧很酸。奶奶还是安慰说，也说下一年就会很甜，让我不要伤心。可是，第三年，第四年，第五年，它的果子还是很酸，我放弃了，告诉奶奶我要我照看那颗核桃树，奶奶说，它不甜。可是，我很清楚，我现在不是要甜果子了，只要他不酸就好。我指了指那棵核桃树，告诉奶奶，但是它不酸呀。其实，那个终究没有在一起的人，就像这棵石榴树一样，在种下之初就是酸的，永远不会变甜。所以尽管我会那些年照看树的时光，但是我还是选择了核桃树。\\r\\n--- 改自视频号《都靓Amber》\\r\\n\\r\\n启发：现在短视频很火，抖音、快手、今日头条、b站、微信都出了短视频，那怎么做好一个个短视频，我发现好的短视频都是一个精巧的小故事，而且其中的故事都有一个固定的公式，而这其中套路在《故事力》这本书都有涉及，好的故事真的很吸引人。想到这，我有点想做短视频，分析了一下做短视频的技能，文案、摄影、播音，每一个都是我的弱项，感觉好难呀。\\r\\n","author":{"username":"yhw-miracle"},"reader":3,"is_comment":true,"comments":[]},"05ecdea6b8be509ec8e635fb50f7c79fb52ddf3ec6e61016efb1687a9712c8ab":{"title":"真的被治愈了","hash":"05ecdea6b8be509ec8e635fb50f7c79fb52ddf3ec6e61016efb1687a9712c8ab","sub_title":null,"category":{"name":"生活感悟"},"tags":[],"create":"2020-07-02","update":"2020-07-02","content":"你必须活在每一件事情里。\\r\\n\\r\\n现在你要经历充满难题的生活，\\r\\n\\r\\n也许有一天，不知不觉，\\r\\n\\r\\n你将渐渐活出写满答案的人生。\\r\\n\\r\\n--- 里尔克","author":{"username":"yhw-miracle"},"reader":2,"is_comment":true,"comments":[]},"251c51eb95ac570dd24eeb6f238169de6073674302e9da55ad68b955a65740d0":{"title":"ubuntu 设置自定义分辨率","hash":"251c51eb95ac570dd24eeb6f238169de6073674302e9da55ad68b955a65740d0","sub_title":null,"category":{"name":"问题解决"},"tags":[{"name":"ubuntu"}],"create":"2020-07-02","update":"2020-07-02","content":"1. cvt 1920 1080\\r\\nModeline \\"1920x1080_60.00\\" 173.00 1920 2048 2248 2576 1080 1083 1088 1120 -hsync +vsync\\r\\n\\r\\n2. xrandr\\r\\n\\r\\n3. sudo xrandr --newmode \\"1920x1080_60.00\\" 173.00 1920 2048 2248 2576 1080 1083 1088 1120 -hsync +vsync\\r\\n\\r\\n4. sudo xrandr --addmode Virtual-1 \\"1920x1080_60.00\\"\\r\\n\\r\\n5. sudo vis /etc/profile","author":{"username":"yhw-miracle"},"reader":2,"is_comment":true,"comments":[]},"6d753d7b79505c348c67ed4667920c22d8bd4bdf347a49b206504b087d18c51b":{"title":"《园丁与木匠》读书笔记","hash":"6d753d7b79505c348c67ed4667920c22d8bd4bdf347a49b206504b087d18c51b","sub_title":null,"category":{"name":"读书笔记"},"tags":[],"create":"2020-06-21","update":"2020-06-21","content":"《园丁与木匠》这本书是讲育儿的，对我这种理工科单身人士，读懂这本书着实有点难度，而且这本书不像其他育儿书那样直接给出育儿的方法，而是通过“园丁实验室”的方式，利用社会实验来逐步验证作者的结论。\\r\\n\\r\\n这本书对比主流文化中的教养模式，给出这种模式下养育的两大悖论，爱的悖论和学习的悖论，爱的悖论是一方面为人父母渴望自己和子女的关系是依赖和独立，另一方面是为人父母对子女的爱的特殊性，学习的悖论是一方面是要平衡玩耍和工作的关系，另一方面学习方法正在不断传承与创新，告诉我们为人父母，不像木匠做桌子那样，重要的不是技巧；为人父母，是园丁种花，本质是爱。书中也给出了这种育儿关系不同于教养，父母或其他抚养者的职责是为下一代提供安全的环境，让他们可以无所顾忌地提出前所未有的想法，做出意料之外的行动。因为童年天然就是一个极具可变性、可能性且充满了探索、创新、学习和想象的时期。尤其是人类的童年那么漫长，就更加如此。但是，我们卓越的学习和想象能力也是有代价的。在探索和运用、学习和规划、想象和行动之间，处处存在着权衡。\\r\\n\\r\\n然后接下来书中从孩子的童年、为人父母的爱以及孩子的学习来阐述孩子在童年期间强大的潜力，有点颠覆了我的认知，对于我这种零级父母来说，还需要多多研究研究。最后本书最打动我的一句话是，为人父母，本质是爱，父母不是把一切都给子女准备好，而是提供一个安全健康的成长环境，任由子女的天性发挥。好了，这本《园丁与木匠》暂读到此，下面是这本开篇给出的园丁式父母木匠式父母的小测试，第一次做差点全军覆没，只怪我太年轻了。\\r\\n\\r\\n测一测　你是园丁式父母，还是木匠式父母？\\r\\n1.你觉得对孩子来说，童年最重要的是什么？\\r\\nA.不匮乏的生活条件\\r\\nB.无忧无虑的玩耍\\r\\nC.父母的充分陪伴\\r\\nD.符合科学规律的学习方法\\r\\n\\r\\n2.孩子惊恐万状地说：“妈妈，壁橱里有一只可怕的妖怪！”你会怎么做？\\r\\nA.赶快安抚孩子，告诉他世界上没有妖怪，让他不要害怕\\r\\nB.跟孩子一起编故事，跟他说：“那我们要小声一点，不要惊动了它！”\\r\\nC.孩子可能动画片看多了，产生了联想，不用管\\r\\nD.制止孩子的胡思乱想，仔细观察他有没有出现心理问题，必要时咨询心理医生\\r\\n\\r\\n3.孩子在家里和一群小伙伴玩“警察抓小偷”，把屋子搞得一团糟。你看见了会怎么做？\\r\\nA.不参与，让孩子们自己玩个痛快\\r\\nB.给孩子们立好规矩和界限，让他们玩的时候注意不要把屋子弄乱\\r\\nC.提前跟孩子们讲好，玩的时候可以随便玩，但是玩完以后要收拾屋子\\r\\nD.加入战队，跟孩子们一起胡闹、折腾\\r\\n\\r\\n4.你认为以下哪些关于孩子学习的观点是科学的？\\r\\nA.孩子不停地问为什么，是想寻求符合因果逻辑的解释，父母应该耐心解答\\r\\nB.孩子注意力不集中，可以通过科学方法帮他提高专注力\\r\\nC.孩子的注意力本身就是发散的，这样能够广泛地认知世界，不应该强迫他们专注\\r\\nD.对孩子的学习帮助最大的是一套科学有效的方法，这需要父母悉心引导\\r\\n","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},"c7382f3816d2150e7cba7300092f46a53a1e1c63e4193cca6d64a5bcd2bf5736":{"title":"《格局》读书笔记","hash":"c7382f3816d2150e7cba7300092f46a53a1e1c63e4193cca6d64a5bcd2bf5736","sub_title":null,"category":{"name":"读书笔记"},"tags":[],"create":"2020-06-07","update":"2020-06-07","content":"吴军老师在《格局》这本书的序言部分已知明示了获得大格局的方法就是认清自己的位置、找准方向、使用正确的方法、提高进步的速度以及把握好节奏，这是尽人事部分，剩下的就只是听天命了。吴军老师引用了曾文正公的一句话，凡办大事，以识为主，以才为辅；凡成大事，人谋居半，天意居半。我太喜欢这句话了，这就能解释为什么我们学过那么多道理，却过不好这一生，原来学过很多道理只是提高了才学方面，却忽视了很重要的认知能力。\\r\\n\\r\\n《格局》这本书的目录安排很有意思，分为人生的格局、命运的力量、生活的节奏、职场的心法、智者的见识、心智的成长、悲观与乐观、文明的碰撞和未来的法则。这本书首先给出五条锦囊，第一是，上帝只垂青主动的人，在职场中，要学会“管理”上级。第二是，在没有听到反对意见前之前不要贸然行事，任何事物都有好的一面和坏的一面，如果我们只是看到事物好的一面，那说明我们对这个事物的认知还不全面。相反，如果我们在不理想的环境中做事情，也不要过度悲观，在不理想的环境中做事情时，个人需要主动创造一个好的环境。第三是，要学会分享利益，独立做出决断，这里做出决断是不仅要有决断的能力，还要有承担决断后果的责任。第四是，勿以小恶而忘记大善，在职场中，不能因为一件不开心的小事而放弃了能带来很大收获的机会，尤其在离职的时候，更需要这条锦囊，要清楚离职的真正的原因，不能仅仅因为一件鸡毛蒜皮的事而失去了一个极好的机会。第五是，勿因人之短护己之短，勿以人的短炫己之长。这条锦囊对于“半瓶子醋”的我尤其受益，我们一方面在追求斜杠，以自己掌握的技能之多来炫耀，但是不要忘了一个人能长期浸淫（这里我用了吴军老师的原话）某个领域，其实没几个。我们首先要在自己少有的几个专业领域做到不输给任何人，那么我们的其他技能才会加分。\\r\\n\\r\\n本书的第二部分通过尽人事仍需听天命、问心无愧是稳得的报酬、好牌为什么会打烂、在哪座山唱哪首歌以及斩断厄运链的故事这几个主题，核心告诉我们天命的重要，正如曾文正公那句话说的一样，凡成大事，人谋居半，天意居半，这个世界是不确定的，我们能控制的因素是很有限的，我们只需要做好我们能力边界之内的事，剩下的听天命就好。然后生活的节奏这部分，论述了把握好节奏的重要性；职场的心法这部分强调了沟通方法的重要性；智者的见识这部分帮助我们认识更好的老师和朋友，从而帮助我们认清自己的位置；心智的成长这部分告诉我们如何成为精神上的自由人，提高进步的速度；悲观和乐观、文明的碰撞和未来的法则这三部分从过去谈到未来，帮我们分析了获得大格局的方向。最后，很喜欢优质的才是稀缺的这句结论，生物学告诉我们，我们每一个人都是独一无二的，但是吴军老师告诉我们，能给这个世界带来优质产品的人一定是具有很大的格局，是很稀缺的，是独一无二的资源。\\r\\n","author":{"username":"yhw-miracle"},"reader":2,"is_comment":true,"comments":[]},"5534967fda7a8320eef3b021ff620ca717ea43195e54dd74b2fa3dad0c79ecf4":{"title":"《你当像鸟飞往你的山》读书笔记","hash":"5534967fda7a8320eef3b021ff620ca717ea43195e54dd74b2fa3dad0c79ecf4","sub_title":null,"category":{"name":"读书笔记"},"tags":[],"create":"2020-05-24","update":"2020-05-24","content":"《你当像鸟飞往你的山》，这本书，我年初就将电子书加入到我的书架了，一开始，我看完了序，被序言中描述巴克峰山间的田园生活吸引了，可是这么美好的田园生活，作者为什么要离开呢，简单地认为这本书是讲述作者背叛家庭的故事。接着我读完了第一节【泽善】部分，就没有继续看下去的勇气了，感觉这本书写作逻辑有点复杂，人物关系有点复杂，枪支、暴力、对抗政府、不去上学、不去医院、相信世界末日，这些概念颠覆了我的认知，都什么年代了，还有人为了对抗政府，自力更生地去生活。\\r\\n\\r\\n直到这一周，我决定去了解一下这本书，但是每当我去看第一节【泽善】部分时，总是读不下去。于是我找了得到和微信读书上这本书的听书节目，这里我强烈推荐一下微信读书上这本书的听书节目，故事讲得太好了，主播声音也很好，声音极具吸引力。听完了讲书，我陷入了深思，原来作者生活在信仰摩门教的家庭，从小受到父亲的影响，十七岁以前没有接受正规的学校教育，在做出想去上大学，远离废料场的决定是多么艰难，被作者的求学生涯深深地感动。\\r\\n\\r\\n以下是我读此书触动我的句子，看来我只适合金句式读书，中心式读书我是不擅长了。\\r\\n\\r\\n我们的生活在轮回——四季轮回，昼夜轮回——在永恒的变换中轮回，每完成一次轮回，就意味着一切未有任何改变。\\r\\n\\r\\n他从来没有告诉过我，如果我离开这座山，如果我漂洋过海，发现自己置身于陌生的地面，再也无法在地平线上搜寻那位公主时，我该怎么办。\\r\\n\\r\\n想起汇而构成人一生的所有决定——人们共同或者独自做出的那些决定，聚合起来，制造了每一桩单独事件。沙粒不可计数，叠压成沉积物，然后成为岩石。\\r\\n\\r\\n这种情况发生在很多家庭里：某个孩子格格不入，跟不上节奏，合不上拍子。在我们家，泰勒就是那个孩子。我们其余人跳吉格舞，而他跳的是华尔兹；他对我们生活中喧闹的音乐充耳不闻，我们也听不见他宁静的复调。\\r\\n\\r\\n泰勒步入了一片虚空。我不知道他为什么这么做，他也不知道。他无法解释这个信念从何而来，也无法解释它是如何发出明亮的光来穿透那黑暗的不确定。但我一直猜想那来自他脑海中的音乐，来自我们其他人听不到的充满希望的曲调，来自他买三角学书和收藏铅笔屑时一直哼唱的秘密旋律。\\r\\n\\r\\n等待电视屏幕突然一闪后熄灭。我努力记住这一切，记住这最后的奢侈的时刻——记住强烈的黄色光线，记住流动在电热器周围的温暖空气。世界将化为乌有，我的人生随时会终结，我正体验着对过往生活的怀旧之情。\\r\\n\\r\\n我这一生中，这些直觉一直在教导我一个道理——只有依靠自己，胜算才更大。\\r\\n\\r\\n负罪感从来都与他们无关。负罪感源于一个人对自身不幸的恐惧，与他人无关。\\r\\n\\r\\n你可以用很多说法来称呼这个自我：转变，蜕变，虚伪，背叛。而我称之为：教育。\\r\\n\\r\\n\\r\\n","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},"2581c164beba7ab738e7d00e603ab7341ba6557805e7182e4cb431f38369f7b5":{"title":"《剧变：人类社会与国家危机的转折点》读书笔记","hash":"2581c164beba7ab738e7d00e603ab7341ba6557805e7182e4cb431f38369f7b5","sub_title":null,"category":{"name":"读书笔记"},"tags":[],"create":"2020-05-10","update":"2020-05-10","content":"出现危机的原因：不管引发危机的原因是什么，我们当前应对生活的方法已经不管用了，必须找到新的方法。包括继续学习，改变态度，重新燃起斗志等。\\r\\n\\r\\n怎么做？\\r\\n影响个人危机结果的因素：\\r\\n1.直面身处危机的现实；\\r\\n2.愿意承担责任；\\r\\n3.划清界限，明确问题；\\r\\n4.向外界寻求物质及情感支持；\\r\\n5.借鉴他人应对危机的方法；\\r\\n6.自我力量；\\r\\n7.诚实的自我评价；\\r\\n8.应对过往个人危机的经验；\\r\\n9.耐心；\\r\\n10.灵活的个性；\\r\\n11.个人核心价值观；\\r\\n12.不受约束。\\r\\n\\r\\n\\r\\n影响国家危机结果的因素：\\r\\n1.对国家陷入危机的举国共识；\\r\\n2.愿意承担责任；\\r\\n3.划清界限，明确需要解决的国家问题；\\r\\n4.从他国获得物质和资金方面的帮助；\\r\\n5.借鉴他国应对危机的经验；\\r\\n6.国家认同；\\r\\n7.诚实的国家自我评估；\\r\\n8.应对过往国家危机的经验；\\r\\n9.应对国家失败的耐心；\\r\\n10.特定情况下国家的灵活性；\\r\\n11.国家核心价值观；\\r\\n12.不受地缘政治约束。\\r\\n","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},"e1abce7c247261f411cf7800af146c5c9b75c9fa472632f0d87280e11c47cc4e":{"title":"利用 gitbook 记录知识","hash":"e1abce7c247261f411cf7800af146c5c9b75c9fa472632f0d87280e11c47cc4e","sub_title":null,"category":{"name":"问题解决"},"tags":[{"name":"gitbook"}],"create":"2019-08-01","update":"2019-08-01","content":"# install & quick_start\\r\\n\\r\\n##使用 gitbook 的两种服务方式\\r\\n* 一种是在线方式，[gitbook](https://www.gitbook.com/)，可以直接注册账号、创作内容和发布 gitbook，但是官网上每一个免费用户只能发布一本书；\\r\\n\\r\\n* 另一种是搭建本地服务，可以随意创作内容、生成静态文件、本地使用和托管到静态文件服务。\\r\\n\\r\\n## 开始搭建本地 gitbook 服务\\r\\n### 安装 nodejs\\r\\n* linux，以 Ubuntu 系统为例\\r\\n  * 在 [nodejs 官网](https://nodejs.org/en/download/) 下载安装包\\r\\n    ```bash\\r\\n    wget https://nodejs.org/dist/v10.16.1/node-v10.16.1-linux-x64.tar.xz\\r\\n    ```\\r\\n\\r\\n  * 解压 nodejs 安装包，配置环境变量\\r\\n    ```bash\\r\\n    sudo tar xJvf node-v10.16.0-linux-x64.tar.xz -C /usr/local/\\r\\n    cd /usr/local/\\r\\n    sudo mv node-v10.16.0-linux-x64 node\\r\\n    echo \'export PATH=/usr/local/node/bin:$PATH\'\\r\\n    source ~/.bashrc\\r\\n    ```\\r\\n\\r\\n  * 添加 node 命令到系统命令集中\\r\\n    ```bash\\r\\n    sudo ln -s /usr/local/node/bin/node /usr/bin/node\\r\\n    sudo ln -s /usr/local/node/bin/npm /usr/bin/npm\\r\\n    sudo ln -s /usr/local/node/bin/npx /usr/bin/npx\\r\\n    ```\\r\\n\\r\\n### 通过 npm 安装 gitbook-cli\\r\\n\\r\\n```bash\\r\\nnpm install -g gitbook-cli\\r\\n```\\r\\n\\r\\n由于 npm 默认的下载源是国外的服务器，可能在国内下载比较慢，可以选择淘宝源下载。\\r\\n\\r\\n```bash\\r\\nnpm install -g gitbook-cli --registry=https://registry.npm.taobao.org\\r\\n```\\r\\n\\r\\n现在就可以开始使用 gitbook 进行内容创作。不过在创作之前，需要初始化 gitbook 内容系统，首次初始化耗时比较长，约 20 - 30 分钟。\\r\\n\\r\\n## 初始化 gitbook 内容系统\\r\\n创建文件夹，在该文件夹下运行命令`gitbook init`；或者直接运行命令`gitbook init demo`，这样就会自动创建 demo 文件夹，并初始化 gitbook 内容系统。\\r\\n\\r\\n如下例所示：\\r\\n```bash\\r\\ngitbook init demo\\r\\n```\\r\\n\\r\\n![](images/yhw-miracle_2019-08-01_09-48-31.png)\\r\\n\\r\\n## 使用 gitbook 的一些命令\\r\\n* 生成静态网页\\r\\n\\r\\n```bash\\r\\ngitbook build\\r\\n```\\r\\n\\r\\n* 启动本地静态服务\\r\\n\\r\\n```bash\\r\\ngitbook serve\\r\\n```","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},"d64df1145d90ae1bca3dfe98432e187d3575c6fef79bb6d397e07c49074b5e13":{"title":"ubuntu16.04 本地部署 YApi 平台","hash":"d64df1145d90ae1bca3dfe98432e187d3575c6fef79bb6d397e07c49074b5e13","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"yapi"}],"create":"2019-07-24","update":"2019-07-24","content":"### 1.安装node\\r\\n* a. 下载`node`安装包；\\r\\n```bash\\r\\nwget https://nodejs.org/dist/v10.16.0/node-v10.16.0-linux-x64.tar.xz\\r\\n```\\r\\n\\r\\n* b. 解压下载的安装包 node-v10.16.0-linux-x64.tar.xz；\\r\\n```bash\\r\\nsudo tar -xJvf node-v10.16.0-linux-x64.tar.xz -C /usr/local/\\r\\nsudo mv node-v10.16.0-linux-x64.tar.xz node\\r\\n```\\r\\n\\r\\n* c. 配置环境变量，并添加`node`、`npm`、`npx`可执行程序到系统命令；\\r\\n```bash\\r\\necho \'export PATH=/usr/local/node/bin:$PATH\'\\r\\nsource ~/.bashrc\\r\\nsudo ln -s /usr/local/node/bin/node /usr/bin/node\\r\\nsudo ln -s /usr/local/node/bin/npm /usr/bin/npm\\r\\nsudo ln -s /usr/local/node/bin/npx /usr/bin/npx\\r\\n```\\r\\n\\r\\n在终端中输入命令`node -v `，提示信息出现 node 的版本信息，即表示 node 安装成功。\\r\\n\\r\\n### 2.安装 mongodb\\r\\n* 直接在终端输入命令`sudo apt-get install mongodb-server`即可。\\r\\n\\r\\n### 3.安装 git\\r\\n\\r\\n### 4.安装 YApi\\r\\n```bash\\r\\nnpm install -g yapi-cli --registry https://registry.npm.taobao.org\\r\\n```\\r\\n\\r\\n___\\r\\n\\r\\n# ubuntu 系统下搭建 YApi 可视化接口管理平台\\r\\n## 安装 node；\\r\\n> <time>3min ~ 5min</time>\\r\\n安装步骤很简单，在 [官网](https://nodejs.org/en/download/) 下载 `node` 的安装包，解压安装包即可，下面开始行动。\\r\\n### 下载 `node` 安装包；\\r\\n\\r\\n```\\r\\nwget https://nodejs.org/dist/v10.16.0/node-v10.16.0-linux-x64.tar.xz\\r\\n```\\r\\n\\r\\n> <checker type=\\"output-contains\\" command=\\"ls -la ~\\" hint=\\"请下载 node 安装包\\">\\r\\n>    <keyword regex=\\"^node\\" />\\r\\n> </checker>\\r\\n\\r\\n### 解压 `node-v10.16.0-linux-x64.tar.xz` 到 `/usr/local/` 目录下，并重命名为 `node`；\\r\\n\\r\\n```\\r\\nsudo tar -xJvf node-v10.16.0-linux-x64.tar.xz -C /usr/local/\\r\\ncd /usr/local/\\r\\nsudo mv /usr/local/node-v10.16.0-linux-x64.tar.xz node\\r\\n```\\r\\n\\r\\n> <checker type=\\"output-contains\\" command=\\"ls -la /usr/local/\\" hint=\\"请解压 node 安装包\\">\\r\\n>    <keyword regex=\\"node\\" />\\r\\n> </checker>\\r\\n\\r\\n### 配置环境变量，并添加`node`、`npm`、`npx`可执行程序到系统命令；\\r\\n\\r\\n```\\r\\necho \'export PATH=/usr/local/node/bin:$PATH\'\\r\\nsource ~/.bashrc\\r\\nsudo ln -s /usr/local/node/bin/node /usr/bin/node\\r\\nsudo ln -s /usr/local/node/bin/npm /usr/bin/npm\\r\\nsudo ln -s /usr/local/node/bin/npx /usr/bin/npx\\r\\ncd ~\\r\\n```\\r\\n\\r\\n在终端输入 `node -v` 显示 `node` 版本信息就说明 `node ` 已经安装成功。\\r\\n\\r\\n```\\r\\nnode -v\\r\\n```\\r\\n\\r\\n> <checker type=\\"output-contains\\" command=\\"node -v\\" hint=\\"请配置环境变量，添加 node 可执行程序到系统命令\\">\\r\\n>    <keyword regex=\\"v10.16.0\\" />\\r\\n> </checker>\\r\\n\\r\\n## 安装 mongodb 数据库；\\r\\n> <time>3min ~ 5min</time>\\r\\n### 直接使用 `apt-get` 包管理工具安装 `mongodb` 数据库；\\r\\n\\r\\n```\\r\\nsudo apt-get install mongodb-server -y\\r\\n```\\r\\n\\r\\n在终端输入下面命令，查看 `mongodb` 运行状态，提示 `running`， 说明 `mongodb` 安装成功。\\r\\n\\r\\n```\\r\\nservice mongodb status\\r\\n```\\r\\n\\r\\n> <checker type=\\"output-contains\\" command=\\"service mongodb status\\" hint=\\"请安装 mongodb 数据库\\">\\r\\n>    <keyword regex=\\"running\\" />\\r\\n> </checker>\\r\\n\\r\\n## 安装 git 版本控制软件；\\r\\n> <time>3min ~ 5min</time>\\r\\n### 直接使用 `apt-get` 包管理工具安装 `git` 软件；\\r\\n\\r\\n```\\r\\nsudo apt-get install git -y\\r\\n```\\r\\n\\r\\n输入 `git --version` 命令，显示 `git` 版本信息，说明 `git` 安装成功。\\r\\n```\\r\\ngit --version\\r\\n```\\r\\n\\r\\n> <checker type=\\"output-contains\\" command=\\"git --version\\" hint=\\"请安装 git 软件\\">\\r\\n>    <keyword regex=\\"git version\\" />\\r\\n> </checker>\\r\\n\\r\\n## 使用 `node` 安装 `YApi`；\\r\\n> <time>8min ~ 15min</time>\\r\\n\\r\\n### 使用 `npm` 命令安装 `yapi-cli`；\\r\\n\\r\\n```\\r\\nnpm install -g yapi-cli --registry https://registry.npm.taobao.org\\r\\n```\\r\\n\\r\\n> <checker type=\\"output-contains\\" command=\\"ls -la /usr/local/node/bin\\" hint=\\"请安装 yapi\\">\\r\\n>    <keyword regex=\\"yapi\\" />\\r\\n> </checker>\\r\\n\\r\\n### 使用 `yapi server` 命令启动部署 `yapi`；\\r\\n\\r\\n```\\r\\nsudo ln -s /usr/local/node/bin/yapi /usr/bin/yapi\\r\\nyapi server \\r\\n```\\r\\n\\r\\n在浏览器中打开链接 http://${runtime.vars.cvmIpAddress}:9090/ ，出现下图的情况，说明 yapi 启动成功。\\r\\n\\r\\n![image](https://share-10039692.file.myqcloud.com/lab/1c20760885/image/52c7tts4nb/yhw-miracle_2019-07-24_20-26-53.png)\\r\\n\\r\\n### 输入网页上的信息，点击 `开始部署` 即可开始部署 `yapi` 服务；\\r\\n\\r\\n![image](https://share-10039692.file.myqcloud.com/lab/1c20760885/image/gnyncgxxdb/yhw-miracle_2019-07-24_20-30-21.png)\\r\\n\\r\\n部署的过程可能较长，耐心等待部署成功；\\r\\n\\r\\n![image](https://share-10039692.file.myqcloud.com/lab/1c20760885/image/z2axsa8o5y/yhw-miracle_2019-07-24_20-32-51.png)\\r\\n\\r\\n出现这样的提示信息说明 `yapi` 服务部署成功，这里会生成登录的账号和密码，账号名：`admin@admin.com`，密码：`ymfe.org`，需要记录一下，下面会用到。\\r\\n\\r\\n![image](https://share-10039692.file.myqcloud.com/lab/1c20760885/image/omkv7njz7c/yhw-miracle_2019-07-24_20-35-32.png)\\r\\n\\r\\n## 开始使用 `yapi`。\\r\\n### 启动 `yapi` 服务；\\r\\n\\r\\n```\\r\\ncd /home/ubuntu/my-yapi\\r\\nnode vendors/server/app.js\\r\\n```\\r\\n\\r\\n出现下图的情况，终端被阻塞，说明 `yapi` 启动成功；\\r\\n\\r\\n![image](https://share-10039692.file.myqcloud.com/lab/1c20760885/image/l2ocvc5ixz/yhw-miracle_2019-07-24_20-41-56.png)\\r\\n\\r\\n在浏览器中打开链接 http://${runtime.vars.cvmIpAddress}:3000 ，显示 `yapi` 首页，点击 `登录/注册` 按钮，输入上一步部署成功时生成的账号和密码即可完成登录，进入到个人空间。\\r\\n\\r\\n登录成功后，就可以自由地创建项目和添加接口了，`yapi` 还可以进行接口测试，具体详情可以参考 `yapi`在 GitHub 上的连接：https://github.com/YMFE/yapi 。\\r\\n\\r\\n\\r\\n![image](https://share-10039692.file.myqcloud.com/lab/1c20760885/image/rde8inhdnt/yhw-miracle_2019-07-24_20-50-07.png)\\r\\n\\r\\n![image](https://share-10039692.file.myqcloud.com/lab/1c20760885/image/x0r7i50owq/yhw-miracle_2019-07-24_20-50-40.png)\\r\\n\\r\\n![image](https://share-10039692.file.myqcloud.com/lab/1c20760885/image/wmv2fmk9i8/yhw-miracle_2019-07-24_20-50-57.png)","author":{"username":"yhw-miracle"},"reader":2,"is_comment":true,"comments":[]},"b13fa4a084a48ee3db0498326add6c03c41aea06a0471d8947001ed42b27b9f0":{"title":"linux 系统下安装 Python3 及配置 Python 虚拟环境","hash":"b13fa4a084a48ee3db0498326add6c03c41aea06a0471d8947001ed42b27b9f0","sub_title":null,"category":{"name":"问题解决"},"tags":[{"name":"Python"},{"name":"virtualenv"}],"create":"2019-07-07","update":"2019-07-07","content":"本篇文章介绍在`linux`系统（以 CentOS 7 系统和 Ubuntu16.04 系统为例）中源码编译安装`Python3.6.9`，并配置虚拟环境，其他系统和`Python`版本可以类似参考。\\r\\n\\r\\n### 源码安装 python3.6.9\\r\\n\\r\\n* 1.下载`Python 3.6.9`源码包；\\r\\n\\t```bash\\r\\n\\twget https://www.python.org/ftp/python/3.6.9/Python-3.6.9.tgz\\r\\n\\t```\\r\\n\\r\\n* 2.解压`Python-3.6.9.tgz`；\\r\\n\\t```bash\\r\\n\\ttar zxvf Python-3.6.9.tgz\\r\\n\\t```\\r\\n\\r\\n* 3.准备编译环境；\\r\\n\\t* CentOS 7 系统：\\r\\n\\t```bash\\r\\n\\tyum groupinstall \'Development Tools\'\\r\\n\\tyum install zlib-devel bzip2-devel  openssl-devel ncurses-devel\\r\\n\\t```\\r\\n\\r\\n\\t* Ubuntu16.04 Server 系统：\\r\\n    ```bash\\r\\n    sudo apt-get install build-essential libssl-dev libffi-dev libxml2 libxml2-dev libxslt1-dev zlib1g-dev libcurl4-openssl-dev libsqlite3-dev \\r\\n    ```\\r\\n\\r\\n* 4.解压完，进入文件夹，编译安装，该过程耗时较长，大约耗时`20`到`30`分钟，可以泡杯茶等待；\\r\\n\\t```bash\\r\\n\\tcd Python-3.6.9/\\r\\n\\t./configure --prefix=/usr/local/python3 --enable-optimizations # 据说 --enable-optimizations 配置项用于提高 Python 安装后的性能，但是会导致安装慢\\r\\n\\tmake\\r\\n\\tmake install\\r\\n\\t```\\r\\n\\r\\n![CentOS 7 系统中成功安装](images/2019/Jul/39.png)\\r\\n\\r\\n> Ubuntu 16.04 Server 系统使用 `--enable-optimizations` 参数可能会出错，可以不加该参数。\\r\\n\\r\\n* 5.创建`python3`和`pip3`命令；\\r\\n\\t```bash\\r\\n\\tln -s /usr/local/python3/bin/python3.6 /usr/bin/python3\\r\\n\\tln -s /usr/local/python3/bin/pip3 /usr/bin/pip3\\r\\n\\t```\\r\\n\\r\\n* 6.更新`pip3`；\\r\\n\\t```bash\\r\\n\\tpip3 install --upgrade pip\\r\\n\\t```\\r\\n\\r\\n> 若在 ubuntu 16.04 server 系统中使用 pip 命令出现 lsb_release 报错，如图所示，解决方法如下。\\r\\n> ```bash\\r\\n> sudo rm /usr/bin/lsb_release\\r\\n> ```\\r\\n\\r\\n![lsb_release_error](images/2019/Jul/40.png)\\r\\n\\r\\n### 配置虚拟环境\\r\\n\\r\\n> **Q**: 为啥要配置虚拟环境，直接用`Python`解析器也可以开发呀？\\r\\n> \\r\\n> **A**: 虚拟环境的作用可以配置多个开发环境，并且彼此不受影响，避免依赖包之间的冲突；另外，虚拟环境也便于管理开发环境，可以随意创建开发环境，方便开发。\\r\\n\\r\\n* 1.安装`virtualenv`和`virtualenvwrapper`包；\\r\\n\\t```bash\\r\\n\\tpip3 install virtualenvwrapper\\r\\n\\t```\\r\\n\\r\\n* 2.配置`virtualenv`环境变量；\\r\\n\\t```bash\\r\\n\\tvi ~/.bashrc\\r\\n\\texport WORKON_HOME=~/.virtualenvs #指定virtualenvwrapper环境的目录\\r\\n\\texport VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3 #指定virtualenvwrapper通过哪个python版本来创建虚拟环境\\r\\n\\tsource /usr/local/python3/bin/virtualenvwrapper.sh\\r\\n\\t```\\r\\n\\r\\n* 3.创建`virtualenv`命令；\\r\\n\\t```bash\\r\\n\\tln -s /usr/local/python3/bin/virtualenv /usr/bin/virtualenv\\r\\n\\t```\\r\\n\\r\\n* 4.创建虚拟环境；\\r\\n\\t```bash\\r\\n\\tmkvirtualenv demo -p python3\\r\\n\\t```\\r\\n\\r\\n* 5.查看虚拟环境；\\r\\n\\t```bash\\r\\n\\tworkon\\r\\n\\t```\\r\\n\\r\\n* 6.进入虚拟环境；\\r\\n\\t```bash\\r\\n\\tworkon demo\\r\\n\\t```\\r\\n\\r\\n* 7.退出虚拟环境；\\r\\n    ```bash\\r\\n    deactivate\\r\\n    ```\\r\\n\\r\\n<hr />\\r\\n\\r\\n* 文内资源\\r\\n\\t* [python3.6.9 源码包](https://www.python.org/ftp/python/3.6.9/Python-3.6.9.tgz)\\r\\n\\r\\n* 参考资源\\r\\n\\t* [CentOS 系统安装 Python3](https://mp.weixin.qq.com/s/h5eb1nVZCdY6BrsD0hnQnA)\\r\\n\\t* [Centos7 安装配置 python3 虚拟环境 virtualenvwrapper](https://www.jianshu.com/p/562ce3c2f3b8)\\r\\n\\t* [Pipenv & 虚拟环境](https://pythonguidecn.readthedocs.io/zh/latest/dev/virtualenvs.html)\\r\\n","author":{"username":"yhw-miracle"},"reader":2,"is_comment":true,"comments":[]},"ea153ab03304c254cc019a2f9d330401e8510b1fbab18a3cde57808955f5069b":{"title":"搭建一台可以永久使用的编程机器","hash":"ea153ab03304c254cc019a2f9d330401e8510b1fbab18a3cde57808955f5069b","sub_title":null,"category":{"name":"问题解决"},"tags":[{"name":"ubuntu"}],"create":"2019-07-03","update":"2019-07-03","content":"在学习编程时，我们总会出现很多`BUG`，严重的话可能会导致系统崩塌，无法运行。这时候，心态好的人会选择重新安装系统，卷土重来，**因为这时修复问题的成本已远远高于重装系统的成本**；可是，对于恋旧且不懂安装系统的同学来说，重装系统太复杂，重来任务太巨大，修复`BUG`又无从下手。因此，学习编程的痛点就出现：我们可不可以使用一台这样的机器，遇到严重`BUG`可以随时回退；数据文件不易丢失；系统稳定，最好一次安装，永久不用重装？\\r\\n\\r\\n在我本科学习编程时，我就常常被这个痛点所困扰，那时候，我常常因为重装系统而耗费大量时间在数据备份和项目重来的过程中。有痛点，就会催促我以此为起点寻找解决方法，庆幸的是，我找到了一种很好解决这种痛点的解决方案。\\r\\n\\r\\n我推荐，不管是初学编程还是编程高手，不管你使用的是什么系统，`windows`、`linux`，还是`MAC OS`，你最好至少有一台安装有服务器系统，存储数据文件和编程环境的虚拟机。虚拟机的好处有：第一，可以拍摄快照，随时记录你当前的虚拟机状态，遇到严重`BUG`可以回退到问题之前的地方；第二，虚拟机软件可以跨平台运行，你只需要**完整保存好安装好系统的虚拟机文件**，虚拟机里存储数据文件就不会丢失，不受宿主机的影响；第三，虚拟机也是一种很好的试错方式，随时尝试，遇错回退。\\r\\n\\r\\n虚拟机软件目前市面上有两种，`VIrtualBox`和`VMware`，这两种软件的下载链接见文末的`文内资源`。两种软件的区别是，`VirtualBox`是免费的，`VMware`是收费的，两种软件都能很好的运行虚拟机。如果非要鸡蛋里挑骨头，`VirtualBox`可能在使用体验上稍逊于`VMware`，毕竟是收费软件。\\r\\n\\r\\n操作系统目前市面上有`windows`、`linux`和`MAC OS`，虽然目前`windows`所占市场很大，我的看法是`windows`可以用来编程，因为现在的`windows 10`已经很好了，但是我不建议用它来存储编程所产生的文件信息。`windows`是桌面系统，操作员往往很容易将注意力放在操作上，这点点，那点点，一不注意点到什么不该点的地方，可能就是系统崩溃；而服务器系统只有黑窗口，操作员只能通过命令进行交互，这就在一定程度上增加你操作的成本，保护了数据安全。虽然操作服务器系统可能会增加学习成本，但是，我相信你既然学习了编程，就肯定会很快上手的。免费的服务器系统主要是`linux`的发行版，有`centos`和`ubuntu`，使用体验都不错。\\r\\n\\r\\n下面，将以`VirtualBox`创建虚拟机，安装`ubuntu-16.04.4-server-amd64`服务器系统为例，介绍安装全过程。\\r\\n\\r\\n- 安装`VirtualBox`，下载安装包，双击安装即可。\\r\\n\\r\\n- 安装`ubuntu16.04`虚拟机，安装步骤如下。\\r\\n\\r\\n1.新建虚拟机；\\r\\n\\r\\n![](images/2019/Jul/01.png)\\r\\n\\r\\n2.设置虚拟机名称，系统类型和虚拟机存储位置；\\r\\n\\r\\n![](images/2019/Jul/02.png)\\r\\n\\r\\n3.设置内存大小；\\r\\n\\r\\n![](images/2019/Jul/03.png)\\r\\n\\r\\n4.创建新的虚拟硬盘；\\r\\n\\r\\n![](images/2019/Jul/04.png)\\r\\n\\r\\n5.选择虚拟硬盘文件类型，这里选默认的`VDI`类型；\\r\\n\\r\\n![](images/2019/Jul/05.png)\\r\\n\\r\\n6.设置虚拟硬盘分配方式；\\r\\n\\r\\n![](images/2019/Jul/06.png)\\r\\n\\r\\n7.选择虚拟硬盘位置及大小，默认为第`2`步的位置；\\r\\n\\r\\n![](images/2019/Jul/07.png)\\r\\n\\r\\n8.创建完虚拟机，会显示虚拟机基本配置信息，初次点击`启动`开始安装；\\r\\n\\r\\n![](images/2019/Jul/08.png)\\r\\n\\r\\n9.选择镜像文件，启动安装；\\r\\n\\r\\n![](images/2019/Jul/09.png)\\r\\n\\r\\n10.选择语言；\\r\\n\\r\\n![](images/2019/Jul/10.png)\\r\\n\\r\\n若不小心点击`Esc`，可以选择`Install Ubuntu Server`进入安装界面；\\r\\n\\r\\n![](images/2019/Jul/11.png)\\r\\n\\r\\n11.选择安装过程中语言提示；\\r\\n\\r\\n![](images/2019/Jul/12.png)\\r\\n\\r\\n12.选择所处位置；\\r\\n\\r\\n![](images/2019/Jul/13.png)\\r\\n\\r\\n13.自动检测键盘布局信息，可以不检测，直接设置；\\r\\n\\r\\n![](images/2019/Jul/14.png)\\r\\n\\r\\n14.选择键盘信息；\\r\\n\\r\\n![](images/2019/Jul/15.png)\\r\\n\\r\\n15.选择键盘布局信息；\\r\\n\\r\\n![](images/2019/Jul/16.png)\\r\\n\\r\\n16.设置主机名；\\r\\n\\r\\n![](images/2019/Jul/17.png)\\r\\n\\r\\n17.设置登录用户全名；\\r\\n\\r\\n![](images/2019/Jul/18.png)\\r\\n\\r\\n18.设置登录用户名；\\r\\n\\r\\n![](images/2019/Jul/19.png)\\r\\n\\r\\n19.设置用户登录密码，并确认密码；\\r\\n\\r\\n![](images/2019/Jul/20.png)\\r\\n\\r\\n![](images/2019/Jul/21.png)\\r\\n\\r\\n20.选择是否加密用户`home`目录；\\r\\n\\r\\n![](images/2019/Jul/22.png)\\r\\n\\r\\n21.设置时区信息；\\r\\n\\r\\n![](images/2019/Jul/23.png)\\r\\n\\r\\n22.进行磁盘分区设置，可以选择默认分区方案，一个主分区和一个交换分区。亦可以进行自定义分区；\\r\\n\\r\\n![](images/2019/Jul/24.png)\\r\\n\\r\\n23.选择可供分区的空闲硬盘；\\r\\n\\r\\n![](images/2019/Jul/25.png)\\r\\n\\r\\n24.格式化空闲磁盘，准备写入分区到空闲磁盘；\\r\\n\\r\\n![](images/2019/Jul/26.png)\\r\\n\\r\\n25.设置主分区大小；\\r\\n\\r\\n![](images/2019/Jul/27.png)\\r\\n\\r\\n26.写入分区到空闲磁盘；\\r\\n\\r\\n![](images/2019/Jul/28.png)\\r\\n\\r\\n27.开始安装系统；\\r\\n\\r\\n![](images/2019/Jul/29.png)\\r\\n\\r\\n28.设置代理，可以跳过；\\r\\n\\r\\n![](images/2019/Jul/30.png)\\r\\n\\r\\n29.配置`apt`，检索文件，这个过程可能会较长，建议喝杯茶等；\\r\\n\\r\\n![](images/2019/Jul/31.png)\\r\\n\\r\\n30.设置更新方式，笔者建议不自动更新；\\r\\n\\r\\n![](images/2019/Jul/32.png)\\r\\n\\r\\n31.选择需要安装应用软件，根据个人情况，笔者建议选择默认；\\r\\n\\r\\n![](images/2019/Jul/33.png)\\r\\n\\r\\n32.安装应用软件，这个过程需要联网，视网速快慢决定安装速度；\\r\\n\\r\\n![](images/2019/Jul/34.png)\\r\\n\\r\\n33.安装`grub`启动器；\\r\\n\\r\\n![](images/2019/Jul/35.png)\\r\\n\\r\\n安装`grub`启动器到硬盘上；\\r\\n\\r\\n![](images/2019/Jul/36.png)\\r\\n\\r\\n34.进行安装收尾工作；\\r\\n\\r\\n![](images/2019/Jul/37.png)\\r\\n\\r\\n![](images/2019/Jul/38.png)\\r\\n\\r\\n35.至此，虚拟机安装完成。\\r\\n\\r\\n___\\r\\n\\r\\n- 文内资源：\\r\\n\\r\\n\\t- [VIrtualBox](https://www.virtualbox.org)\\r\\n\\t- [VMware](https://www.vmware.com/cn.html)\\r\\n\\t- [VirtualBox-6.0.8-130520-Win.exe](https://download.virtualbox.org/virtualbox/6.0.8/VirtualBox-6.0.8-130520-Win.exe)\\r\\n","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},"84b79cac3ff4ef7e95d1c3e577d85c4216b98903a60fe86898f8792a557b2535":{"title":"搭建本地 git 服务器","hash":"84b79cac3ff4ef7e95d1c3e577d85c4216b98903a60fe86898f8792a557b2535","sub_title":null,"category":{"name":"问题解决"},"tags":[{"name":"git"}],"create":"2019-05-01","update":"2019-05-01","content":"* 1.安装 git；\\r\\n    ```bash\\r\\n    sudo apt-get isntall git\\r\\n    ```\\r\\n> 运行命令`git --version`显示 git 版本信息，即说明 git 安装成功。\\r\\n\\r\\n* 2.创建 git 用户，用于运行 Git 服务；\\r\\n    linux 中创建用户的命令有两个：\\r\\n    * adduser => 创建过程中需要设置密码\\r\\n    ```bash\\r\\n    sudo adduser git\\r\\n    ```\\r\\n\\r\\n    * useradd => 创建用户不会默认设置密码，需要手动设置\\r\\n    ```bash\\r\\n    sudo useradd -m git\\r\\n    sudo passwd git\\r\\n    ```\\r\\n\\r\\n    然后，就可以使用命令`su root`切换 git 用户登录。\\r\\n\\r\\n* 测试 git 服务器\\r\\n    * 创建所有权为 git 用户的仓库，作用是 git 用户能够操作仓库文件\\r\\n    ```bash\\r\\n    git init --bare demo.git\\r\\n    ```\\r\\n\\r\\n    * 若上述命令是在其他用户环境输入，有两种方法可以设置仓库的所有者\\r\\n    ```bash\\r\\n    # I.修改权限\\r\\n    sudo chown -R git:git demo.git\\r\\n    # II.将 git 用户添加到当前用户组\\r\\n    sudo gpasswd -a git {current_group}\\r\\n    ```\\r\\n\\r\\n    * 测试`git clone`效果\\r\\n    ```bash\\r\\n    # 输入下面命令\\r\\n    # A 中填写主机地址\\r\\n    # B 中填写仓库路径\\r\\n    # 如：git clone git@192.168.159.132:/home/yhw-miracle/demo.git\\r\\n    git clone git@{A}:{B}\\r\\n    ```\\r\\n\\r\\n    * 恭喜，完成上述步骤，你就搭建好了一个简单的 git 服务器。但是，还没完，这样搭建后，每次克隆文件时，都需要输入密码，是不是很机械。\\r\\n\\r\\n* 额外操作\\r\\n    * 免密操作\\r\\n        * 在非 git 用户的 home 目录下生成访问秘钥\\r\\n        ```bash\\r\\n        ssh-keygen -t rsa -C \'demo@demo.com\' \\r\\n        ```\\r\\n\\r\\n        * 将刚刚生成的公钥（在 ~/.ssh/ 目录下）添加到 git 用户的 ~/.ssh/authorized_keys 文件里\\r\\n        ```bash\\r\\n        # I.拷贝非 git 用户 ~/.ssh/id_rsa.pub 文件里内容\\r\\n        # II.切换 git 用户\\r\\n        su git\\r\\n        # III.创建 authorized_keys文件\\r\\n        touch /home/git/.ssh/authorized_keys\\r\\n        # IV.将刚刚复制的公钥添加到 authorized_keys 里\\r\\n        ```\\r\\n\\r\\n    > 补充，`.ssh` 文件下也有`known_hosts`，存放访问客户端的主机地址。\\r\\n\\r\\n    * 设置 git 用户禁止登录\\r\\n        * git 用户只用作 git 服务，为了避免登录权限放大，故设置禁止登录\\r\\n        ```bash\\r\\n        sudo vi /etc/passwd\\r\\n\\r\\n        # 修改 => git:x:1001:1001::/home/git:/usr/bin/git-shell \\r\\n        ```\\r\\n___\\r\\n* 参考\\r\\n    * [搭建Git服务器](https://www.liaoxuefeng.com/wiki/896043488029600/899998870925664)\\r\\n","author":{"username":"yhw-miracle"},"reader":2,"is_comment":true,"comments":[]},"142c92770f592ab19a182ef18e8ffb14020e37349cb768b83f0e85b24482add1":{"title":"learning_python_模块和包","hash":"142c92770f592ab19a182ef18e8ffb14020e37349cb768b83f0e85b24482add1","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"Python"}],"create":"2019-04-12","update":"2019-04-12","content":"### 模块和包\\r\\n* 导入模块的方式\\r\\n\\r\\n```python\\r\\nimport {模块名}   # 全部导入\\r\\nfrom {模块名} import {资源名称}   # 局部导入\\r\\n# 资源名称包括：类名、函数和全局变量\\r\\n```\\r\\n\\r\\n* 局部导入资源访问控制\\r\\n\\r\\n```python\\r\\nfrom {模块名称} import *\\r\\n```\\r\\n___\\r\\n```python\\r\\n__all__ = [\\"{资源名称}\\", \\"{资源名称}\\"]\\r\\n\\r\\n```\\r\\n\\r\\n* 屏蔽文件的执行代码\\r\\n\\r\\n```python\\r\\nif __name__ = \\"__main__\\":\\r\\n\\tpass\\r\\n```\\r\\n\\r\\n* 模块资源运行工作原理：第一次导入资源文件生成`.pyc`缓存文件。 \\r\\n\\r\\n* 包是项目结构中的目录，用于文件分层管理。","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},"ee416d39dba8e3a3df9fd7539962fb4572e8712c0d4320595bdd88c033cdb0ff":{"title":"learning_python_异常","hash":"ee416d39dba8e3a3df9fd7539962fb4572e8712c0d4320595bdd88c033cdb0ff","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"Python"}],"create":"2019-04-11","update":"2019-04-11","content":"### 异常处理\\r\\n* 异常处理格式\\r\\n\\r\\n```python\\r\\ntry:\\r\\n\\t# 可能引发异常现象的代码\\r\\n\\tpass\\r\\nexcept:\\r\\n\\t# 出现异常时执行的代码\\r\\n\\t# 可有多个 except 代码块，但只执行一条 except 代码块\\r\\n\\t# 一般格式：except 异常类名[ as 变量名]\\r\\n\\t# 一般捕获异常类型从小到大\\r\\n\\t# Exception 类是所有异常类的父类\\r\\n\\tpass\\r\\nelse:\\r\\n\\t# 未出现异常时执行的代码\\r\\n\\tpass\\r\\nfinally:\\r\\n\\t# try 代码块结束时执行的代码\\r\\n\\tpass\\r\\n```\\r\\n\\r\\n* 异常抛出格式\\r\\n\\r\\n```python\\r\\nraise # 异常类对象\\r\\n```\\r\\n\\r\\n* 自定义异常\\r\\n\\r\\n```python\\r\\nclass AAA(Exception):\\r\\n\\t\\"\\"\\" AAA 为自定义异常类名\\"\\"\\"\\r\\n\\tpass\\r\\n```\\r\\n","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},"a61296fcb8bf9dbba163417c8ba74f12493e260b6926e34d512886d7f57bef03":{"title":"learning_python_引用","hash":"a61296fcb8bf9dbba163417c8ba74f12493e260b6926e34d512886d7f57bef03","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"Python"}],"create":"2019-04-09","update":"2019-04-09","content":"### 引用\\r\\n* 引用是一种变量指向数据存储空间的现象，内存地址是数据在物理内存中的存储位置，引用地址是对象在内存中的描述性地址。\\r\\n\\r\\n* 相同数据在内存空间中仅占用一个存储空间。\\r\\n\\r\\n* 获取内存存储地址`id()`。\\r\\n\\r\\n* 使用`固定内存地址`存储数据如下：-5到256的整数、True和False、由字母、数字、下滑线组成的字符串；使用`临时内存地址`存储数据如下：小于-5后大于256的整数、所有小数、包含字母、数字、下滑线之外的字符组成的字符串。\\r\\n\\r\\n* 无变量引用时，列表、集合、字典、对象保存在临时引用地址中，该引用地址可以反复使用；有变量引用时，列表、集合、字典、对象保存在独立引用地址中，该引用地址专用。\\r\\n\\r\\n* 列表变量、集合变量、字典变量指向引用地址，该引用地址保存存储信息的内存地址。当存储空间不足时，会申请新的内存地址，并更新引用地址所指向的内存地址，重新申请的内存地址将复制原始内存地址中的数据。\\r\\n\\r\\n* 空元组（无数据）：空元组指向统一的独立引用地址，所有空元组共用同一个引用地址。非空元组（有数据）：非空元组保存在独立引用地址中，每个元组对象具有独立引用地址，该引用地址保存存储信息的内存地址，元组创建的同时存储的数据已经固定，内存结构也固定。\\r\\n\\r\\n* 元组中的数据如果是引用类型的，对应的数据可以在自身的内存地址中进行数据变更，对元组不影响。\\r\\n\\r\\n* 对象中的变量是通过引用地址的形式查找真实数据。对象中的变量存储形式是一个字典的形式，对变量的操作参照字典的操作方式，变量名为字典的key，变量值为字典的value。\\r\\n\\r\\n* 可变类型数据：列表、集合、字典和对象；不可变类型数据：数值、字符串、布尔和元组。\\r\\n\\r\\n* 变量的引用和定义的区别。\\r\\n","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},"974add8b18ea3d81cdd24b8f1362f73cb8c1916075afcc4dcb7089c5abeb339e":{"title":"learning_python_面向对象","hash":"974add8b18ea3d81cdd24b8f1362f73cb8c1916075afcc4dcb7089c5abeb339e","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"Python"}],"create":"2019-04-08","update":"2019-04-08","content":"### 面向对象\\r\\n#### 类和对象\\r\\n* 类是一系列事物的统称，包括成员变量和成员方法，统称类成员。\\r\\n\\r\\n* 类的关键字是class，命名满足大驼峰命名法。\\r\\n\\r\\n* 对象是类的实例，self仅出现在成员方法中，指代执行该方法的对象。\\r\\n\\r\\n* 类在__init__(self)方法中创建对象时初始化公有成员变量；对象可以声明独有变量；类可以定义属于类的类变量，类变量可以私有化。\\r\\n\\r\\n* 类的方法有成员方法、类方法、私有方法和静态方法。\\r\\n\\r\\n```python\\r\\nclass AAA:\\r\\n\\tdef bbb(self[,args]):\\r\\n\\t\\t\'\'\'成员方法\'\'\'\\r\\n\\t\\t\'\'\'实例变量，实例方法，类变量，类方法均可使用\'\'\'\\r\\n\\t\\tpass\\r\\n```\\r\\n___\\r\\n```python\\r\\nclass AAA:\\r\\n\\t@classmethod\\r\\n\\tdef bbb(cls[,args]):\\r\\n\\t\'\'\'类方法\'\'\'\\r\\n\\t\'\'\'不能使用实例变量和实例方法\'\'\'\\r\\n\\t\'\'\'可以使用类变量和类变量\'\'\'\\r\\n\\tpass\\r\\n```\\r\\n___\\r\\n```python\\r\\nclass AAA:\\r\\n\\tdef __bb(self[,args]):\\r\\n\\t\'\'\'私有方法\'\'\'\\r\\n\\t\'\'\'只能在类的内部使用\'\'\'\\r\\n\\tpass\\r\\n```\\r\\n___\\r\\n```python\\r\\nclass AAA:\\r\\n\\t@staticmethod\\r\\n\\tdef bbb([args]):\\r\\n\\t\'\'\'静态方法\'\'\'\\r\\n\\t\'\'\'一般不访问成员变量和类变量\'\'\'\\r\\n\\tpass\\r\\n```\\r\\n\\r\\n| 成员方法 | 适用范围 |\\r\\n| ------ | ------ |\\r\\n| 成员方法 | 只访问成员变量 |\\r\\n| 类方法 | 只访问类变量 |\\r\\n| 成员方法 | 既访问成员变量，又访问类变量 |\\r\\n| 静态方法 | 既不访问成员变量，又不访问类变量 |\\r\\n\\r\\n* 魔术方法\\r\\n    * __init__(self)，创建对象时初始化公有成员变量。\\r\\n    * __str__(self)，打印对象时自动调用的方法。\\r\\n  * __new__(cls, *args, **kwargs)，创建对象时自动执行（创建对象由object类的__new__方法执行）。\\r\\n    * __del__(self)，销毁对象时自动执行。\\r\\n\\r\\n* ==与is的区别：==判断的是内容，is判断的是地址。\\r\\n\\r\\n* 单例设计模式\\r\\n\\r\\n```python\\r\\nclass AAA:\\r\\n    # 单例设计模式\\r\\n    __instance = None\\r\\n    def __new__(cls, *args, **kwargs):\\r\\n        if cls.__instance is None:\\r\\n            cls.__instance = object.__new__(AAA)\\r\\n        return cls.__instance\\r\\n```\\r\\n\\r\\n#### 封装\\r\\n* 封装是对类成员进行访问控制，保护数据不被非法访问。\\r\\n\\r\\n* 一般对成员变量进行封装，需要给出访问接口。\\r\\n\\r\\n```python\\r\\nclass AAA:\\r\\n\\tself.__bbb = 1\\r\\n\\tdef get_bbb(self):\\r\\n\\t\\treturn self.__bbb\\r\\n\\tdef set_bbb(self):\\r\\n\\t\\tself.__bbb = 2\\r\\n```\\r\\n\\r\\n#### 继承\\r\\n* 子类可以使用父类的成员变量、类变量、成员方法、类方法、静态方法。子类不能使用父类的私有方法。\\r\\n\\r\\n* 获取继承关系的属性__mro__。\\r\\n\\r\\n* 重写：子类重新定义与父类相同的成员方法。\\r\\n\\r\\n* 子类中访问父类被重写的方法\\r\\n\\r\\n```python\\r\\n# 1. 父类名.方法名(对象)\\r\\n# 2. super(本类名, 对象).方法名()\\r\\n# 3. super().方法名()\\r\\n```\\r\\n\\r\\n* python支持多继承，访问父类成员时遇到冲突，访问继承的第一个父类的成员。\\r\\n\\r\\n#### 多态\\r\\n* 父类的引用指向子类对象。不同子类调用相同的父类方法，执行结果不同。\\r\\n\\r\\n* 鸭子类型，类与类之间不用共同继承一个父类，只需要将它们做得像一种事物即可。\\r\\n\\r\\n> Duck typing 这个概念来源于美国印第安纳州的诗人詹姆斯·惠特科姆·莱利（James Whitcomb Riley,1849- 1916）的诗句：”When I see a bird that walks like a duck and swims like a duck and quacks like a duck, I call that bird a duck.” \\r\\n","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},"167fa77db6534dbbdc2691c0dd038699518b895aebc9d059df58ebb04012e6b6":{"title":"learning_python_function","hash":"167fa77db6534dbbdc2691c0dd038699518b895aebc9d059df58ebb04012e6b6","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"Python"}],"create":"2019-04-07","update":"2019-04-07","content":"### 函数\\r\\n* 函数是将具有独立给你的代码块组织成为一个整体，使其具有特殊功能的代码集。函数的作用主要是加强代码的复用性，提高程序编写的效率。\\r\\n\\r\\n* 无参函数、有参函数、带返回值的函数。\\r\\n\\r\\n```python\\r\\n# def 函数名([参数]):\\r\\n\\t# 函数体\\r\\n\\t# [return ...]\\r\\n\\r\\n# 调用格式 ---\x3e [变量=]函数名([参数])\\r\\n```\\r\\n\\r\\n* 若函数没有返回值，使用变量接收时结果为`None`。\\r\\n\\r\\n* 函数定义时规定的参数为形参，函数调用时使用的参数为实参，形参的作用域为函数定义开始到定义结束。\\r\\n\\r\\n* 变量的作用域可划分为局部变量（整个函数内部）和全局变量（整个文件）。\\r\\n\\r\\n* 局部变量可添加关键字`global`提升作用域。\\r\\n\\r\\n* 定义函数时，在函数名下用一对`\\"\\"\\"`进行文档注释。\\r\\n\\r\\n* 默认参数是函数或方法定义时指定形参的值，位置在位置形参的后面，调用该函数或方法时可以不指定默认参数的值，也可以指定默认参数的值，指定多个默认参数的值需要从左到右依次赋值。\\r\\n\\r\\n* 关键字参数是在调用函数或方法时为指定名称的形参赋值所对应的实参.关键字参数需要在位置参数后面；不能对同一形参多次赋值；既可以为位置参数赋值，也可以为默认参数赋值。通常使用关键字参数是解决默认参数选择性赋值的问题。\\r\\n\\r\\n* 可变参数是函数或方法定义时用于接收多个实参的形参，接收的多个实参组装成元组对象，定义可变参数的格式是`*args`。可变参数只能定义一个，定义在位置参数的后面。可变参数定义在位置参数后面。\\r\\n\\r\\n* 字典参数是在函数或方法定义时，用于接收若干组未定义直接使用的关键字参数（调用后，会组装成字典对象），对应的形参。其定义格式是`**kwargs`。字典参数只能定义一个。\\r\\n\\r\\n* 形参定义的顺序：先位置参数，再可变参数，后默认参数，再后字典参数。 \\r\\n\\r\\n* 匿名函数，也称`lambda`表达式。\\r\\n\\r\\n```python\\r\\n# 方式一：\\r\\n# 函数名 = lambda [形参] : 返回值\\r\\n# 结果 = 函数名([实参])\\r\\n\\r\\n# 方式二：\\r\\n# 结果 = (lambda [形参] : 返回值)([实参])\\r\\n```\\r\\n","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},"7ab5b23a22158d4e9903d63092a7d71e249432f1234a71a16ccba4b15a474508":{"title":"learning_python_str_2","hash":"7ab5b23a22158d4e9903d63092a7d71e249432f1234a71a16ccba4b15a474508","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"Python"}],"create":"2019-04-06","update":"2019-04-06","content":"### 字符串的一些函数\\r\\n* 划分函数\\r\\n    * partition(self, *args, \\\\*\\\\*kwargs): Partition the string into three parts using the given separator. This will search for the separator in the string.  If the separator is found, returns a 3-tuple containing the part before the separator, the separator itself, and the part after it. If the separator is not found, returns a 3-tuple containing the original string and two empty strings.\\r\\n\\r\\n    * rpartition(self, *args, \\\\*\\\\*kwargs): Partition the string into three parts using the given separator. This will search for the separator in the string, starting at the end. If the separator is found, returns a 3-tuple containing the part before the separator, the separator itself, and the part after it. If the separator is not found, returns a 3-tuple containing two empty strings and the original string.\\r\\n\\r\\n    * split(self, *args, \\\\*\\\\*kwargs): Return a list of the words in the string, using sep as the delimiter string. sep: The delimiter according which to split the string. None (the default value) means split according to any whitespace, and discard empty strings from the result. maxsplit: Maximum number of splits to do. -1 (the default value) means no limit.\\r\\n\\r\\n    * rsplit(self, *args, \\\\*\\\\*kwargs): Return a list of the words in the string, using sep as the delimiter string. sep: The delimiter according which to split the string. None (the default value) means split according to any whitespace, and discard empty strings from the result. maxsplit: Maximum number of splits to do. -1 (the default value) means no limit. Splits are done starting at the end of the string and working to the front.\\r\\n\\r\\n    * splitlines(self, *args, \\\\*\\\\*kwargs): Return a list of the lines in the string, breaking at line boundaries. Line breaks are not included in the resulting list unless keepends is given and true.\\r\\n\\r\\n    > * 翻译\\r\\n    > * partition(self, *args, \\\\*\\\\*kwargs): 从字符串左侧开始，根据指定参数将字符串划分为三部分，参数左侧、参数和参数右侧，组成三元元组并返回。如果指定参数不存在，三元元组由两个空项和自身组成。\\r\\n    > * rpartition(self, *args, \\\\*\\\\*kwargs): 从字符串右侧开始，根据指定参数将字符串划分为三部分，参数左侧、参数和参数右侧，组成三元元组并返回。如果指定参数不存在，三元元组由两个空项和自身组成。\\r\\n    > * split(self, *args, \\\\*\\\\*kwargs): 用指定参数作为分隔符将原字符串划分为若干字符串，组成列表返回。\\r\\n    > * rsplit(self, *args, \\\\*\\\\*kwargs): 用指定参数作为分隔符将原字符串从右侧开始划分为若干字符串，组成列表返回。\\r\\n    > * splitlines(self, *args, \\\\*\\\\*kwargs): 用分行符作为分隔符将原字符串划分若干个字符串，组成列表返回，其中分行符不会包括在结果字符串中。\\r\\n\\r\\n    <hr />\\r\\n\\r\\n * 替换函数\\r\\n    * replace(self, *args, \\\\*\\\\*kwargs): Return a copy with all occurrences of substring old replaced by new. count: Maximum number of occurrences to replace. -1 (the default value) means replace all occurrences. If the optional argument count is given, only the first count occurrences are replaced.\\r\\n    * expandtabs(self, *args, \\\\*\\\\*kwargs): Return a copy where all tab characters are expanded using spaces. If tabsize is not given, a tab size of 8 characters is assumed.\\r\\n\\r\\n    > * 翻译\\r\\n    > * replace(self, *args, \\\\*\\\\*kwargs): 使用新字符串替换原字符串中指定的字符串。\\r\\n    > * expandtabs(self, *args, \\\\*\\\\*kwargs): 返回用空格替换字符串中的制表位的拷贝。\\r\\n\\r\\n    <hr />\\r\\n\\r\\n* 字符转换函数\\r\\n    * lower(self, *args, \\\\*\\\\*kwargs): Return a copy of the string converted to lowercase.\\r\\n    * upper(self, *args, \\\\*\\\\*kwargs): Return a copy of the string converted to uppercase.\\r\\n\\r\\n    * swapcase(self, *args, \\\\*\\\\*kwargs): Convert uppercase characters to lowercase and lowercase characters to uppercase. \\r\\n\\r\\n    * title(self, *args, \\\\*\\\\*kwargs): Return a version of the string where each word is titlecased. More specifically, words start with uppercased characters and all remaining cased characters have lower case.\\r\\n\\r\\n    * capitalize(self, *args, 、\\\\*\\\\*kwargs): Return a capitalized version of the string. More specifically, make the first character have upper case and the rest lower case.\\r\\n\\r\\n    * casefold(self, *args, \\\\*\\\\*kwargs): Return a version of the string suitable for caseless comparisons.\\r\\n\\r\\n    * startswith(self, prefix, start=None, end=None): S.startswith(prefix[, start[, end]]) -> bool   Return True if S starts with the specified prefix, False otherwise. With optional start, test S beginning at that position. With optional end, stop comparing S at that position. prefix can also be a tuple of strings to try.\\r\\n\\r\\n    * endswith(self, suffix, start=None, end=None): S.endswith(suffix[, start[, end]]) -> bool   Return True if S ends with the specified suffix, False otherwise. With optional start, test S beginning at that position. With optional end, stop comparing S at that position. suffix can also be a tuple of strings to try.\\r\\n\\r\\n    > * 翻译\\r\\n    > * lower(self, *args, \\\\*\\\\*kwargs): 返回字符串中各字符转换为小写字符的拷贝。\\r\\n    > * upper(self, *args, \\\\*\\\\*kwargs): 返回字符串中各个字符转换为大写的拷贝。\\r\\n    > * swapcase(self, *args, \\\\*\\\\*kwargs): 将字符串的大写字符转换为小写字符，小写字符转换为大写字符。\\r\\n    > * title(self, *args, \\\\*\\\\*kwargs): 返回首字母大写，其他小写的字符串。\\r\\n    > * capitalize(self, *args, 、\\\\*\\\\*kwargs): 返回字符串首字母大写，其他小写。\\r\\n    > * casefold(self, *args, \\\\*\\\\*kwargs): 返回字符串中所有字母转换为小写字母。\\r\\n\\r\\n    > * startswith(self, prefix, start=None, end=None): 如果字符串以给定字符参数`prefix`开头，返回`True`；否则，返回`False`。如果给定`start`和`end`参数，则从`start`和`end`的位置进行检测。\\r\\n    > * endswith(self, suffix, start=None, end=None): 如果字符串以给定字符参数`suffix`结尾，返回`True`；否则，返回`False`。如果给定`start`和`end`参数，则从`start`和`end`的位置进行检测。\\r\\n\\r\\n    <hr />\\r\\n\\r\\n* 其他函数\\r\\n    * format(self, *args, \\\\*\\\\*kwargs): S.format(*args, \\\\*\\\\*kwargs) -> str   Return a formatted version of S, using substitutions from args and kwargs. The substitutions are identified by braces (\'{\' and \'}\').\\r\\n\\r\\n    * format_map(self, mapping): S.format_map(mapping) -> str   Return a formatted version of S, using substitutions from mapping. The substitutions are identified by braces (\'{\' and \'}\').\\r\\n\\r\\n    * count(self, sub, start=None, end=None): S.count(sub[, start[, end]]) -> int   Return the number of non-overlapping occurrences of substring sub in string S[start:end].  Optional arguments start and end are interpreted as in slice notation.\\r\\n\\r\\n    * encode(self, *args, \\\\*\\\\*kwargs): Encode the string using the codec registered for encoding.   encoding: The encoding in which to encode the string.   errors: The error handling scheme to use for encoding errors. The default is \'strict\' meaning that encoding errors raise a UnicodeEncodeError.  Other possible values are \'ignore\', \'replace\' and \'xmlcharrefreplace\' as well as any other name registered with codecs.register_error that can handle UnicodeEncodeErrors.\\r\\n\\r\\n    * join(self, ab=None, pq=None, rs=None): Concatenate any number of strings. The string whose method is called is inserted in between each given string. The result is returned as a new string. `Example: \'.\'.join([\'ab\', \'pq\', \'rs\']) -> \'ab.pq.rs\'`\\r\\n\\r\\n    * maketrans(self, *args, \\\\*\\\\*kwargs): Return a translation table usable for str.translate(). If there is only one argument, it must be a dictionary mapping Unicode ordinals (integers) or characters to Unicode ordinals, strings or None. Character keys will be then converted to ordinals. If there are two arguments, they must be strings of equal length, and in the resulting dictionary, each character in x will be mapped to the character at the same position in y. If there is a third argument, it must be a string, whose characters will be mapped to None in the result.\\r\\n\\r\\n    * translate(self, *args, \\\\*\\\\*kwargs): Replace each character in the string using the given translation table.table: Translation table, which must be a mapping of Unicode ordinals to Unicode ordinals, strings, or None. The table must implement lookup/indexing via \\\\_\\\\_getitem\\\\_\\\\_, for instance a dictionary or list.  If this operation raises LookupError, the character is left untouched.  Characters mapped to None are deleted.\\r\\n\\r\\n    > * 翻译\\r\\n    > * format(self, *args, \\\\*\\\\*kwargs): 使用元组数据格式化字符串。\\r\\n    > * format_map(self, mapping): 使用字典类型数据格式化字符串。\\r\\n    > * count(self, sub, start=None, end=None): 返回指定的字符串在原字符串中出现的次数。如果给定`start`和`end`参数，则从`start`和`end`的位置进行检测。\\r\\n    > * encode(self, *args, \\\\*\\\\*kwargs): 使用指定的编码方式给字符串编码。\\r\\n    > * join(self, ab=None, pq=None, rs=None): 连接字符串，返回新的字符串。\\r\\n    > * maketrans(self, *args, \\\\*\\\\*kwargs): 返回函数`tranlate()`需要的翻译表。一般是`maketrans(str1, str2)`。\\r\\n    > * translate(self, *args, \\\\*\\\\*kwargs): 用给定的翻译表替换字符串中的每一个字符。一般是`translate(dict)`。\\r\\n","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},"1412db9ffe17e323e564c6a597452d6470a93d39980867076b86c99d3fbdffff":{"title":"learning_python_str_1","hash":"1412db9ffe17e323e564c6a597452d6470a93d39980867076b86c99d3fbdffff","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"Python"}],"create":"2019-04-05","update":"2019-04-05","content":"### 字符串\\r\\n* 字符串是一个包含若干个字符并按照一定顺序排列成整体的容器，支持`索引`操作，字符串定义可以是`\\"xxxx\\"`,`\'xxx\'`,`\\"\\"\\"xxx\\"\\"\\"`,`\'\'\'xxx\'\'\'`。\\r\\n\\r\\n> 字符串的一些函数，函数较多，用分割线划分。\\r\\n\\r\\n * 判断函数\\r\\n    * isalnum(self, *args, \\\\*\\\\*kwargs): Return True if the string is an alpha-numeric string, False otherwise. A string is alpha-numeric if all characters in the string are alpha-numeric and there is at least one character in the string.\\r\\n\\r\\n    * isalpha(self, *args, \\\\*\\\\*kwargs): Return True if the string is an alphabetic string, False otherwise. A string is alphabetic if all characters in the string are alphabetic and there is at least one character in the string.\\r\\n\\r\\n    * isascii(self, *args, \\\\*\\\\*kwargs): Return True if all characters in the string are ASCII, False otherwise. ASCII characters have code points in the range U+0000-U+007F. Empty string is ASCII too.\\r\\n\\r\\n    * isdecimal(self, *args, \\\\*\\\\*kwargs): Return True if the string is a decimal string, False otherwise. A string is a decimal string if all characters in the string are decimal and there is at least one character in the string.\\r\\n\\r\\n    * isdigit(self, *args, \\\\*\\\\*kwargs): Return True if the string is a digit string, False otherwise. A string is a digit string if all characters in the string are digits and there is at least one character in the string.\\r\\n\\r\\n    * isidentifier(self, *args, \\\\*\\\\*kwargs): Return True if the string is a valid Python identifier, False otherwise. Use keyword.iskeyword() to test for reserved identifiers such as \\"def\\" and \\"class\\".\\r\\n\\r\\n    * islower(self, *args, \\\\*\\\\*kwargs): Return True if the string is a lowercase string, False otherwise. A string is lowercase if all cased characters in the string are lowercase and there is at least one cased character in the string.\\r\\n\\r\\n    * isnumeric(self, *args, \\\\*\\\\*kwargs): Return True if the string is a numeric string, False otherwise. A string is numeric if all characters in the string are numeric and there is at least one character in the string.\\r\\n\\r\\n    * isprintable(self, *args, \\\\*\\\\*kwargs): Return True if the string is printable, False otherwise. A string is printable if all of its characters are considered printable in repr() or if it is empty.\\r\\n\\r\\n    * isspace(self, *args, \\\\*\\\\*kwargs): Return True if the string is a whitespace string, False otherwise. A string is whitespace if all characters in the string are whitespace and there is at least one character in the string.\\r\\n\\r\\n    * istitle(self, *args, \\\\*\\\\*kwargs): Return True if the string is a title-cased string, False otherwise. In a title-cased string, upper- and title-case characters may only follow uncased characters and lowercase characters only cased ones.\\r\\n\\r\\n    * isupper(self, *args, \\\\*\\\\*kwargs): Return True if the string is an uppercase string, False otherwise. A string is uppercase if all cased characters in the string are uppercase and there is at least one cased character in the string.\\r\\n\\r\\n    > * 翻译\\r\\n    > * isalpha(self, *args, \\\\*\\\\*kwargs): 判断字符串是否全是字母。\\r\\n    > * isalnum(self, *args, \\\\*\\\\*kwargs): 判断字符串是否字母数字。\\r\\n    > * isascii(self, *args, \\\\*\\\\*kwargs): 判断字符串是否全是`ASCII`字符。\\r\\n    > * isdecimal(self, *args, \\\\*\\\\*kwargs): 判断字符串是否全是数字。\\r\\n    > * isdigit(self, *args, \\\\*\\\\*kwargs): 判断字符串是否全是数字。\\r\\n    > * isidentifier(self, *args, \\\\*\\\\*kwargs): 判断字符串是否是有效的`python`标识符。\\r\\n    > * islower(self, *args, \\\\*\\\\*kwargs): 判断字符串是否全是小写。\\r\\n    > * isnumeric(self, *args, \\\\*\\\\*kwargs): 判断字符串是否全是数字。\\r\\n    > * isprintable(self, *args, \\\\*\\\\*kwargs): 判断字符串是否是可打印的。\\r\\n    > * isspace(self, *args, \\\\*\\\\*kwargs): 判断字符串是否是空白字符。\\r\\n    > * istitle(self, *args, \\\\*\\\\*kwargs): 判断字符串是否是首字母大写，其他小写。\\r\\n    > * isupper(self, *args, \\\\*\\\\*kwargs): 判断字符串是否全是大写。\\r\\n\\r\\n    <hr />\\r\\n\\r\\n * 格式转换函数\\r\\n    * strip(self, *args, \\\\*\\\\*kwargs): Return a copy of the string with leading and trailing whitespace remove. If chars is given and not None, remove characters in chars instead.\\r\\n\\r\\n    * lstrip(self, *args, \\\\*\\\\*kwargs): Return a copy of the string with leading whitespace removed. If chars is given and not None, remove characters in chars instead.\\r\\n\\r\\n    * rstrip(self, *args, \\\\*\\\\*kwargs): Return a copy of the string with trailing whitespace removed. If chars is given and not None, remove characters in chars instead.\\r\\n\\r\\n    * ljust(self, *args, \\\\*\\\\*kwargs): Return a left-justified string of length width. Padding is done using the specified fill character (default is a space).\\r\\n\\r\\n    * rjust(self, *args, \\\\*\\\\*kwargs): Return a right-justified string of length width. Padding is done using the specified fill character (default is a space).\\r\\n\\r\\n    center(self, *args, \\\\*\\\\*kwargs): Return a centered string of length width. Padding is done using the specified fill character (default is a space).\\r\\n\\r\\n    zfill(self, *args, \\\\*\\\\*kwargs): Pad a numeric string with zeros on the left, to fill a field of the given width.The string is never truncated.\\r\\n\\r\\n    > * 翻译\\r\\n    > * strip(self, *args, \\\\*\\\\*kwargs): 返回去掉字符串左右两侧空白字符或指定字符的拷贝。\\r\\n    > * lstrip(self, *args, \\\\*\\\\*kwargs): 返回去掉字符串左侧空白字符或指定字符的拷贝。\\r\\n    > * rstrip(self, *args, \\\\*\\\\*kwargs): 返回去掉字符串右侧空白字符或指定字符的拷贝。\\r\\n\\r\\n    > * ljust(self, *args, \\\\*\\\\*kwargs): 返回右侧用空格或指定字符补齐指定宽度的字符串。\\r\\n    > * rjust(self, *args, \\\\*\\\\*kwargs): 返回左侧用空格或指定字符补齐指定宽度的字符串。\\r\\n\\r\\n    > * center(self, *args, \\\\*\\\\*kwargs): 填充字符串左右两侧几乎相等的指定字符或空格，是字符串居于中间位置，返回这样的字符串。\\r\\n\\r\\n    > * zfill(self, *args, \\\\*\\\\*kwargs): 用`0`在数字字符串的左边补齐给定的宽度，字符串不会`truncated`。\\r\\n\\r\\n    <hr />\\r\\n\\r\\n* 查询函数\\r\\n    * find(self, sub, start=None, end=None): S.find(sub[, start[, end]]) -> int   Return the lowest index in S where substring sub is found, such that sub is contained within S[start:end].  Optional arguments start and end are interpreted as in slice notation. Return -1 on failure.\\r\\n\\r\\n    * rfind(self, sub, start=None, end=None): S.rfind(sub[, start[, end]]) -> int   Return the highest index in S where substring sub is found, such that sub is contained within S[start:end].  Optional arguments start and end are interpreted as in slice notation. Return -1 on failure.\\r\\n\\r\\n    * index(self, sub, start=None, end=None): S.index(sub[, start[, end]]) -> int   Return the lowest index in S where substring sub is found, such that sub is contained within S[start:end].  Optional arguments start and end are interpreted as in slice notation. Raises ValueError when the substring is not found.\\r\\n\\r\\n    * rindex(self, sub, start=None, end=None): S.rindex(sub[, start[, end]]) -> int   Return the highest index in S where substring sub is found, such that sub is contained within S[start:end].  Optional arguments start and end are interpreted as in slice notation. Raises ValueError when the substring is not found.\\r\\n\\r\\n    > * 翻译\\r\\n    > * find(self, sub, start=None, end=None): 返回指定字符串在原字符串中出现的最小下标。若给定`start`和`end`，则在指定范围里搜索；若指定字符串未发现，则返回`-1`。\\r\\n    > * rfind(self, sub, start=None, end=None): 返回指定字符串在原字符串中出现的最大下标。若给定`start`和`end`，则在指定范围里搜索；若指定字符串未发现，则返回`-1`。\\r\\n    > * index(self, sub, start=None, end=None): 返回指定字符串在原字符串中出现的最小下标。若给定`start`和`end`，则在指定范围里搜索；若指定字符串未发现，则抛出`ValueError`。\\r\\n    > * rindex(self, sub, start=None, end=None): 返回指定字符串在原字符串中出现的最大下标。若给定`start`和`end`，则在指定范围里搜索；若指定字符串未发现，则抛出`ValueError`。\\r\\n","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},"f0071940b8c96e6cec1c5e80c59258665232f5547aeff87b3c42762ff4ede27a":{"title":"learning_python_dict","hash":"f0071940b8c96e6cec1c5e80c59258665232f5547aeff87b3c42762ff4ede27a","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"Python"}],"create":"2019-04-04","update":"2019-04-04","content":"### 字典\\r\\n* 字典（dict）（`{xx: xx,...}`）是一种使用“键值对结构”存储数据的存储模型，没有索引概念，利用键（键是**唯一**的）来索引，可以根据键对字典数据进行增、删、改、查操作。\\r\\n\\r\\n* 字典中的函数\\r\\n    * clear(self):  D.clear() :  None.  Remove all items from D.\\r\\n    * copy(self): D.copy() :  a shallow copy of D.\\r\\n    * fromkeys(seq): Create a new dictionary with keys from iterable and values set to value.\\r\\n    > * 翻译\\r\\n    > * clear(self): 清空字典中的所有项。\\r\\n    > * copy(self): 返回字典的一个拷贝。\\r\\n    > * fromkeys(seq): 用来自迭代器作为键，值集合作为值，创建新的字典。\\r\\n\\r\\n    <hr />\\r\\n\\r\\n    * get(self, k): Return the value for key if key is in the dictionary, else default.\\r\\n    * items(self): D.items() :  a set-like object providing a view on D\'s items.\\r\\n    * keys(self): D.keys() :  a set-like object providing a view on D\'s keys.\\r\\n    * values(self): D.values() :  an object providing a view on D\'s values.\\r\\n    > * 翻译\\r\\n    > * get(self, k): 返回指定的键对应的值。\\r\\n    > * items(self): 获取字典中所有键值对，以列表形式返回。\\r\\n    > * keys(self): 获取字典中所有键，以列表的形式返回。\\r\\n    > * values(self): 获取字典中所有值，以列表的形式返回。\\r\\n\\r\\n    <hr />\\r\\n\\r\\n    * pop(self,  k): D.pop(k[,d]) :  v, remove specified key and return the corresponding value.If key is not found, d is returned if given, otherwise KeyError is raised.\\r\\n    * popitem(self): D.popitem() :  (k, v), remove and return some (key, value) pair as a 2-tuple; but raise KeyError if D is empty.\\r\\n    > * 翻译\\r\\n    > * pop(self,  k[, d]): 移除字典中指定的键，并返回对应的值。如果指定的键不存在，若给出d，则返回d；否则将抛出KeyError。\\r\\n    > * popitem(self): 移除字典中最后一对键值对，并以二元元组的形式返回。若字典为空，抛出KeyError。\\r\\n\\r\\n    <hr />\\r\\n\\r\\n    * setdefault(self, k,  default): Insert key with a value of default if key is not in the dictionary.Return the value for key if key is in the dictionary, else default.\\r\\n    > * 翻译\\r\\n    > * setdefault(self, k,  default): 如果指定的键不在字典中，将指定的键和值（没有，默认为None）插入到字典中，并返回值。\\r\\n\\r\\n    <hr />\\r\\n\\r\\n    * update(self, E=None, \\\\*\\\\*F): D.update([E, ]\\\\*\\\\*F) :  None.  Update D from dict/iterable E and F. If E is present and has a .keys() method, then does:  for k in E: D[k] = E[k]. If E is present and lacks a .keys() method, then does:  for k, v in E: D[k] = v. In either case, this is followed by: for k in F:  D[k] = F[k].\\r\\n    > * 翻译\\r\\n    > * update(self, E=None, \\\\*\\\\*F): 使用新字典中的数据对原始字典数据进行更新。如果字典E存在，有keys()方法，则执行代码for k in E: D[k] = E[K]；如果迭代器E存在，缺失keys()方法，则执行代码for k, v in E: D[k] = v；如果字典或迭代器E不存在，则执行代码for k in F: D[k] = F[k]。\\r\\n\\r\\n* 当需要存储大量数据，并且期望在编程期以最快速度获取单个数据，或者使用非对象格式保存单个对象的属性值，推荐选择字典来存储。\\r\\n","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},"385f944f2bf7d66c6ff4d097b278c2096907ed6fe42f32d6b0030d854ac9b720":{"title":"learning_python_tuple&set","hash":"385f944f2bf7d66c6ff4d097b278c2096907ed6fe42f32d6b0030d854ac9b720","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"Python"}],"create":"2019-04-03","update":"2019-04-03","content":"### 元组\\r\\n* 元组（tuple）（`()`）是一种存储固定数据的存储模型，元组中的数据通过索引修改。\\r\\n\\r\\n* 元组中的数据若是非引用类型数据，不允许修改；若是引用类型数据，不允许修改对象，可以修对象的值。\\r\\n\\r\\n* 元组函数\\r\\n    * count(self, x): Return number of occurrences of value.\\r\\n    * index(self, x, start, end): Return first index of value.Raises ValueError if the value is not present\\r\\n    > * 翻译\\r\\n    > * count(self, x): 返回元组中指定数据出现的次数。\\r\\n    > * index(self, x, start, end): 返回指定数据在元组中出现的第一个位置，若指定数据不存在，抛出ValueError。\\r\\n\\r\\n### 集合\\r\\n* 集合（set）（`{,,...}`）是一种存储无序不重复数据的存储模型，没有索引概念。\\r\\n\\r\\n* 集合中的函数\\r\\n    * add(self, element): Add an element to a set.This has no effect if the element is already present.\\r\\n    * clear(self): Remove all elements from this set.\\r\\n    * copy(self): Return a shallow copy of a set.\\r\\n    * pop(self): Remove and return an arbitrary set element.Raises KeyError if the set is empty.\\r\\n    * remove(self ,element): Remove an element from a set; it must be a member.If the element is not a member, raise a KeyError.\\r\\n    > * 翻译\\r\\n    > * add(self, element): 添加一个元素到集合中，若改元素已经存在，集合将无任何影\\r\\n    > * clear(self): 移除集合中所有元素。\\r\\n    > * copy(self): 返回集合的拷贝体。\\r\\n    > * pop(self): 移除并返回这个该集合中随意一个元素，若集合为空，抛出KeyError\\r\\n    > * remove(self ,element): 移除集合中指定的元素，若指定元素不存在，抛出KeyError\\r\\n\\r\\n    <hr />\\r\\n\\r\\n    * isdisjoint(self, s): Return True if two sets have a null intersection.\\r\\n    * issubset(self ,s): Report whether another set contains this set.\\r\\n    * issuperset(self, s): Report whether this set contains another set.\\r\\n    > * 翻译\\r\\n    > * isdisjoint(self, s): 若两个集合没有交集，返回True。\\r\\n    > * issubset(self ,s): 报告另一个集合是否包含该集合，若包含，返回True；若不包含，返回False。\\r\\n    > * issuperset(self, s): 报告这个集合是否包含另一个集合，若包含，返回True；若不包含，返回False。\\r\\n\\r\\n    <hr />\\r\\n\\r\\n    * difference(self, s): Return the difference of two or more sets as a new set.(i.e. all elements that are in this set but not the others.)\\r\\n    * difference_update(self,  s): Remove all elements of another set from this set.\\r\\n    * discard(self, element): Remove an element from a set if it is a member.If the element is not a member, do nothing.\\r\\n    > * 翻译\\r\\n    > * difference(self, s): 记录该集合与其他集合之间的不同元素，组成新的集合并返回（简单来说，返回集合中的所有元素在该集合中，不在其他集合中）。\\r\\n    > * difference_update(self,  s): 移除另一个集合中与该集合相同的元素。\\r\\n    > * discard(self, element): 移除集合中的指定元素，若该元素不存，则不做任何事。\\r\\n\\r\\n    <hr />\\r\\n\\r\\n    * intersection(self, s): Return the intersection of two sets as a new set.(i.e. all elements that are in both sets.)\\r\\n    * intersection_update(self,  s): Update a set with the intersection of itself and another.\\r\\n    > * 翻译\\r\\n    > * intersection(self, s): 记录两个集合的交集，组成新的集合并返回（简单来说，新的集合中元素是两个集合中都有的元素）。\\r\\n    > * intersection_update(self,  s): 将该集合和另一个集合的交集更新到该集合中。\\r\\n\\r\\n    <hr />\\r\\n\\r\\n    * symmetric_difference(self,  s): Return the symmetric difference of two sets as a new set.(i.e. all elements that are in exactly one of the sets.)\\r\\n    * symmetric_difference_update(self,  s): Update a set with the symmetric difference of itself and another.\\r\\n    * union(self, s): Return the union of sets as a new set.(i.e. all elements that are in either set.)\\r\\n    * update(self,  s): Update a set with the union of itself and others.\\r\\n    > * 翻译\\r\\n    > * symmetric_difference(self,  s): 记录两个集合的均匀区别，组成新的集合并返回（简单来说，新的集合中元素只存在于其中一个集合中）。\\r\\n    > * symmetric_difference_update(self,  s): 将两个集合的均匀区别更新到该集合中。\\r\\n    > * union(self, s): 记录两个集合之间的并集，组成新的集合并返回（简单来说，两个集合中所有元素）。\\r\\n    > * update(self,  s): 将两个集合之间的并集更新到该集合中。\\r\\n","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},"75e35d380259c0cd18fd5f6aeb7263db6f94fd17a1164ab91a7c6089edd0f77f":{"title":"learning_python_list","hash":"75e35d380259c0cd18fd5f6aeb7263db6f94fd17a1164ab91a7c6089edd0f77f","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"Python"}],"create":"2019-04-02","update":"2019-04-02","content":"### 数据结构\\r\\n* python 中的数据结构\\r\\n    * 不可变类型\\r\\n        * int：整型\\r\\n        * float：浮点型\\r\\n        * bool：布尔型\\r\\n        * str：字符串\\r\\n    * 可变类型\\r\\n        * list：列表\\r\\n        * tuple：元组\\r\\n        * set：集合\\r\\n        * dict：字典\\r\\n\\r\\n* 获取数据类型：`type()`\\r\\n> 如：\\r\\n> ```ipython\\r\\n> In [1]: type(1)\\r\\n> Out[1]: int\\r\\n> In [2]: type(1.1)\\r\\n> Out[2]: float\\r\\n> In [3]: type(True)\\r\\n> Out[3]: bool\\r\\n> In [3]: type(False)\\r\\n> Out[3]: bool \\r\\n> ```\\r\\n\\r\\n### 列表\\r\\n* 列表（list）（`[]`）是一种存储大量数据的存储模型，可以对数据进行增、删、改、查操作。\\r\\n* 增加数据\\r\\n    * append(self, object): Append object to the end of the list.\\r\\n    * insert(self, index, object): Insert object before index.\\r\\n    * extend(self, iterable): Extend list by appending elements from the iterable.\\r\\n    > * 翻译：\\r\\n    > * append(self, object): 在列表的末尾添加元素。\\r\\n    > * insert(self, index, object): 在指定位置之前插入元素。\\r\\n    > * extend(self, iterable): 从可迭代数据存储器中扩充到列表末尾。\\r\\n\\r\\n* 删除数据\\r\\n    * remove(self, object): Remove first occurrence of value.Raises ValueError if the value is not present.\\r\\n    * pop(self, index): Remove and return item at index (default last).Raises IndexError  if list is empty or index is out of range.\\r\\n    * clear(self): Remove all items from list.\\r\\n    > * 翻译：\\r\\n    > * remove(self, object): 移除列表中第一个指定数据，若指定数据不存在，抛出ValueError。\\r\\n    > * pop(self, index): 移除并返回列表中指定位置的数据（默认为最后一个），若列表为空或者指定位置超过范围，抛出IndexError。\\r\\n    > * clear(self): 移除列表中所有元素。\\r\\n\\r\\n* 修改数据和查询数据：**根据索引**\\r\\n\\r\\n* 其他函数\\r\\n    * count(self, object): Return number of occurrences of value.\\r\\n    * index(self, object, start, stop): Return first index of value.Raises ValueError if the value is not present.\\r\\n    * copy(self): Return a shallow copy of the list.\\r\\n    * reverse(self): Reverse *IN PLACE*.\\r\\n    * sort(self, key, reverse): Stable sort *IN PLACE*.\\r\\n    > * 翻译\\r\\n    > * count(self, object): 返回指定数据在列表中的个数。\\r\\n    > * index(self, object, start, stop): 返回指定数据在列表中第一个位置，若指定数据不存在，抛出ValueError。\\r\\n    > * copy(self): 返回一个列表的拷贝。\\r\\n    > * reverse(self): 在列表上反转。\\r\\n    > * sort(self, key, reverse): 在列表上执行稳定排序。\\r\\n","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},"3326857c04461b86d2a010ed06e6fa394461b975fd2547c4b21cbb621596a0d2":{"title":"learning_python_start","hash":"3326857c04461b86d2a010ed06e6fa394461b975fd2547c4b21cbb621596a0d2","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"Python"}],"create":"2019-04-01","update":"2019-04-01","content":"### 初识 Python\\r\\n* 在 python 控制台键入`import this`看 python 告诉我们的话：\\r\\n\\r\\n```text\\r\\nThe Zen of Python, by Tim Peters\\r\\n\\r\\nBeautiful is better than ugly.\\r\\nExplicit is better than implicit.\\r\\nSimple is better than complex.\\r\\nComplex is better than complicated.\\r\\nFlat is better than nested.\\r\\nSparse is better than dense.\\r\\nReadability counts.\\r\\nSpecial cases aren\'t special enough to break the rules.\\r\\nAlthough practicality beats purity.\\r\\nErrors should never pass silently.\\r\\nUnless explicitly silenced.\\r\\nIn the face of ambiguity, refuse the temptation to guess.\\r\\nThere should be one-- and preferably only one --obvious way to do it.\\r\\nAlthough that way may not be obvious at first unless you\'re Dutch.\\r\\nNow is better than never.\\r\\nAlthough never is often better than *right* now.\\r\\nIf the implementation is hard to explain, it\'s a bad idea.\\r\\nIf the implementation is easy to explain, it may be a good idea.\\r\\nNamespaces are one honking great idea -- let\'s do more of those!\\r\\n```\\r\\n\\r\\n* python 是解释型编程语言。\\r\\n* python 中单行注释: `#`。\\r\\n* python 中多行注释: 一对三引号，即`\\"\\"\\"`和`\\"\\"\\"`。\\r\\n* python 中提供`todo`功能，在代码中注明`# TODO`即可。\\r\\n\\r\\n### 变量\\r\\n* 变量用于描述计算机中的数据存储空间，作用是在计算机内存中动态地保存数据。\\r\\n* 变量名的命名规则是由**数字、字母和下划线**组成，不能以数字开头，不能是关键字，区分大小写。\\r\\n* 变量的书写规范有下划线连接，驼峰命名法等\\r\\n> 如\\r\\n> ```python\\r\\n> demo_demo = 1\\r\\n> demoDemo = 2\\r\\n> DemoDemo = 3\\r\\n>```\\r\\n* 查看 python 中关键字可用下面的语句，运行结果如图所示。\\r\\n> ```python\\r\\n> import keyword\\r\\n> print(keyword.kwlist)\\r\\n> ```\\r\\n\\r\\n![](images/2019/Apr/01.png)\\r\\n\\r\\n### 标准输入输出\\r\\n* 输入：`input()`\\r\\n\\r\\n* 输出：`print()`\\r\\n\\t* %s，字符串占位符\\r\\n\\t* %d，整数占位符\\r\\n\\t* %f，浮点数占位符\\r\\n\\t* %%，输入\\\\%\\\\\\r\\n\\r\\n### python运算\\r\\n* 字符串运算\\r\\n\\t* `+`：拼接\\r\\n\\t* `*`：连续拼接\\r\\n\\r\\n* 算术运算符\\r\\n\\t* `+`，加\\r\\n\\t* `-`，减\\r\\n\\t* `*`，乘\\r\\n\\t* `/`，除\\r\\n\\t* `/`，整除\\r\\n\\t* `%`，取余\\r\\n\\t* `**`，乘方\\r\\n\\t* 优先级，乘方 > [乘，除，整除，取余] > [加，减]\\r\\n\\r\\n* 赋值运算符\\r\\n\\t* `=`，赋值\\r\\n\\t* `+=`，加后赋值\\r\\n\\t* `-=`，减后赋值\\r\\n\\t* `*=`，乘后赋值\\r\\n\\t* `/=`，除后赋值\\r\\n\\t* `//=`，整除后赋值\\r\\n\\t* `%=`，取余后赋值\\r\\n\\t* `**=`，次方后赋值\\r\\n\\r\\n* 比较运算符\\r\\n\\t* `>`，大于\\r\\n\\t* `>=`，大于等于\\r\\n\\t* `<`，小于\\r\\n\\t* `<=`，小于等于\\r\\n\\t* `!=`，不低于\\r\\n\\t* `==`，等于\\r\\n\\t> 如何比较字符大小？\\r\\n\\t> * 查看字母和数字的ASCII值；\\r\\n\\t> * 查看指定字符的 ASCII 值：`ord()`；\\r\\n\\t> * 已知 ASCII 值查看对应的字符：`chr()`。\\r\\n\\t> <hr />\\r\\n\\t> ```ipython\\r\\n\\t> In [1]: ord(\'a\')\\r\\n\\t> Out[1]: 97\\r\\n\\t> In [2]: chr(97)\\r\\n\\t> Out[2]: \'a\' \\r\\n\\t> ```\\r\\n\\r\\n* 关系运算符（逻辑运算符）\\r\\n\\t* `and`：短路与，若左操作数为 False，表达式结果为 False，。 \\r\\n\\t* `or`：短路或，若左操作数为 True ，表达式结果为 True。\\r\\n\\t* `not`：取反操作。\\r\\n\\t* 一些例子：\\r\\n\\r\\n\\t| 表达式 | 结果 |\\r\\n\\t| ------ | ------ |\\r\\n\\t| 1 and True | True |\\r\\n\\t| 0 and True | 0 |\\r\\n\\t| 1 or True | 1 |\\r\\n\\t| 0 or True | True |\\r\\n\\t| 1 and False | False |\\r\\n\\t| 0 and False | 0 |\\r\\n\\t| 1 or False | 1 |\\r\\n\\t| 0 or False | False |\\r\\n\\t| True and 1 | 1 |\\r\\n\\t| True and 0 | 0 |\\r\\n\\t| True or 1 | True |\\r\\n\\t| True or 0 | True |\\r\\n\\t| False and 1 | False |\\r\\n\\t| False and 0 | False |\\r\\n\\t| False or 1 | 1 |\\r\\n\\t| False or 0 | 0 |\\r\\n\\r\\n### 三大语句\\r\\n* 顺序语句：自上而下执行语句\\r\\n\\r\\n* 分支语句\\r\\n\\t* if...\\r\\n\\t* if...else...\\r\\n\\t* if...elif...else...\\r\\n\\t* 分支嵌套\\r\\n\\r\\n* 循环结构\\r\\n\\t* while\\r\\n\\t* for...in...\\r\\n\\t* for...in...else...，循环正常结束后执行else部分。\\r\\n\\t* while...else...\\r\\n\\t* break，终止循环的执行\\r\\n\\t* continue，终止本轮循环的执行\\r\\n\\t* range(m, n, s): 生成 m（默认为0） 到 n-1 的整数，整数间隔为 s（默认为1）。\\r\\n\\t* 推导式的使用\\r\\n\\t> ```python\\r\\n\\t> list1 = [data for data in range(5)]\\r\\n\\t> list1 = [data**2 for data in range(5)]\\r\\n\\t> list1 = [data for data in range(5) if data > 2]\\r\\n\\t> ```\\r\\n","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},"d9d416d42350a37a71b63d5d2325bd06f418ecd4b832590d25d6473739eaa4ee":{"title":"详解基础爬虫架构","hash":"d9d416d42350a37a71b63d5d2325bd06f418ecd4b832590d25d6473739eaa4ee","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"Python"},{"name":"爬虫框架"}],"create":"2019-01-15","update":"2019-01-15","content":"基础爬虫框架主要包括五大模块，分别为`URL`管理器、`HTML`下载器、`HTML`解析器、数据存储器和爬虫调度器。它们之间关系如下图所示。\\r\\n\\r\\n![](images/2019/Jan/2.png)\\r\\n\\r\\n`URL`管理器负责管理`URL`链接，维护已爬取的`URL`集合和为未爬取的`URL`集合，并提供外部访问接口。\\r\\n\\r\\n`HTML`下载器负责从`URL`管理器中获取未爬取的`URL`链接，并下载相应的`HTML`网页。\\r\\n\\r\\n`HTML`解析器负责解析`HTML`下载器下载的网页信息，解析出的信息交给数据存储器，解析出的新的`URL`链接交给`URL`管理器。\\r\\n\\r\\n数据存储器负责将`HTML`解析器解析出来的数据通过文件或数据库的形式存储起来。\\r\\n\\r\\n爬虫调度器负责统筹以上四个模块之间协调工作。\\r\\n\\r\\n以爬取百度百科`100`条词条的词条标题、摘要和链接为例。\\r\\n\\r\\n### URL 管理器\\r\\n`URL`管理器维护了两个变量，已爬取`URL`集合和未爬取`URL`集合；对外提供了四类访问这两个变量的方法，包括是否有待爬取的`URL`、获取未爬取的`URL`、添加新的`URL`到未爬取集合中、已爬取`URL`集合和未爬取`URL`集合的大小。\\r\\n\\r\\n`URL`管理器需要对爬取的`URL`进行去重处理，常见的去重方案有三种，分别是内存去重、关系数据库去重和缓存数据库去重。\\r\\n\\r\\n两个变量\\r\\n```python\\r\\nself.new_urls = set()\\r\\nself.old_urls = set()\\r\\n```\\r\\n\\r\\n六个方法\\r\\n```python\\r\\nhave_new_url(self)\\r\\nget_new_url(self)\\r\\nadd_new_url(self, url)\\r\\nadd_new_urls(self, urls)\\r\\nnew_url_size(self)\\r\\nold_url_size(self)\\r\\n```\\r\\n\\r\\n```python\\r\\n# coding: utf-8\\r\\n\\r\\n\\r\\nclass URLManager(object):\\r\\n    def __init__(self):\\r\\n        self.new_urls = set()\\r\\n        self.old_urls = set()\\r\\n\\r\\n    def have_new_url(self):\\r\\n        \\"\\"\\"\\r\\n        判断是否有待爬取的 url\\r\\n        :return: 待爬取的 url 集合的大小\\r\\n        \\"\\"\\"\\r\\n        return self.new_url_size() != 0\\r\\n\\r\\n    def get_new_url(self):\\r\\n        \\"\\"\\"\\r\\n        获取待爬取的 url\\r\\n        :return: 一个待爬取的 url\\r\\n        \\"\\"\\"\\r\\n        new_url = self.new_urls.pop()\\r\\n        if new_url is not None:\\r\\n            self.old_urls.add(new_url)\\r\\n            return new_url\\r\\n\\r\\n    def add_new_url(self, url):\\r\\n        \\"\\"\\"\\r\\n        添加一个待爬取的 url\\r\\n        :param url:\\r\\n        :return:\\r\\n        \\"\\"\\"\\r\\n        if url is None:\\r\\n            return\\r\\n        if url not in self.new_urls and url not in self.old_urls:\\r\\n            self.new_urls.add(url)\\r\\n\\r\\n    def add_new_urls(self, urls):\\r\\n        \\"\\"\\"\\r\\n        添加待爬取的 url 集合\\r\\n        :param urls:\\r\\n        :return:\\r\\n        \\"\\"\\"\\r\\n        if urls is None or len(urls) == 0:\\r\\n            return\\r\\n        for url in urls:\\r\\n            self.add_new_url(url)\\r\\n\\r\\n    def new_url_size(self):\\r\\n        \\"\\"\\"\\r\\n        待爬取的 url 集合的大小\\r\\n        :return:\\r\\n        \\"\\"\\"\\r\\n        return len(self.new_urls)\\r\\n\\r\\n    def old_url_size(self):\\r\\n        \\"\\"\\"\\r\\n        已爬取的 url 集合的大小\\r\\n        :return:\\r\\n        \\"\\"\\"\\r\\n        return len(self.old_urls)\\r\\n\\r\\n```\\r\\n\\r\\n### HTML 下载器\\r\\n```python\\r\\n# coding: utf-8\\r\\n\\r\\nimport requests\\r\\n\\r\\n\\r\\nclass HtmlDownloader(object):\\r\\n    def download(self, url):\\r\\n        if url is None:\\r\\n            return\\r\\n        user_agent = \\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) \\" \\\\\\r\\n                     \\"Chrome/71.0.3578.98 Safari/537.36\\"\\r\\n        headers = {\\"User-Agent\\": user_agent}\\r\\n        req = requests.get(url, headers=headers)\\r\\n        if req.status_code == 200:\\r\\n            req.encoding = \\"utf-8\\"\\r\\n            return req.text\\r\\n        return None\\r\\n\\r\\n\\r\\n```\\r\\n\\r\\n### HTML 解析器\\r\\n```python\\r\\n# coding: utf-8\\r\\n\\r\\nfrom bs4 import BeautifulSoup\\r\\nimport re, urlparse\\r\\n\\r\\n\\r\\nclass HtmlParser(object):\\r\\n    def parser(self, page_url, html_content):\\r\\n        \\"\\"\\"\\r\\n\\r\\n        :param page_url:\\r\\n        :param html_content:\\r\\n        :return:\\r\\n        \\"\\"\\"\\r\\n        if page_url is None or html_content is None:\\r\\n            return\\r\\n        soup = BeautifulSoup(html_content, \\"lxml\\")\\r\\n        new_urls = self.get_new_urls(page_url, soup)\\r\\n        new_data = self.get_new_data(page_url, soup)\\r\\n        return new_urls, new_data\\r\\n\\r\\n    def get_new_urls(self, page_url, soup):\\r\\n        \\"\\"\\"\\r\\n\\r\\n        :param page_url:\\r\\n        :param soup:\\r\\n        :return:\\r\\n        \\"\\"\\"\\r\\n        new_urls = set()\\r\\n        links = soup.find_all(\\"a\\", href=re.compile(r\'/item/(%\\\\w+)+/\\\\d+\'))\\r\\n        for link in links:\\r\\n            new_url = link[\\"href\\"]\\r\\n            new_full_url = urlparse.urljoin(page_url, new_url)\\r\\n            new_urls.add(new_full_url)\\r\\n        return new_urls\\r\\n\\r\\n    def get_new_data(self, page_url, soup):\\r\\n        \\"\\"\\"\\r\\n\\r\\n        :param page_url:\\r\\n        :param soup:\\r\\n        :return:\\r\\n        \\"\\"\\"\\r\\n        data = {}\\r\\n        data[\\"url\\"] = page_url.encode(\\"utf-8\\")\\r\\n\\r\\n        title = soup.find(\\"dd\\", class_=\\"lemmaWgt-lemmaTitle-title\\").find(\\"h1\\")\\r\\n        data[\\"title\\"] = title.string.encode(\\"utf-8\\")\\r\\n\\r\\n        summary = soup.find(\\"div\\", class_=\\"lemma-summary\\")\\r\\n        data[\\"summary\\"] = summary.get_text().encode(\\"utf-8\\")\\r\\n\\r\\n        return data\\r\\n\\r\\n```\\r\\n\\r\\n### 数据存储器\\r\\n```python\\r\\n# coding: utf-8\\r\\n\\r\\nimport csv\\r\\n\\r\\n\\r\\nclass DataOutput(object):\\r\\n    def __init__(self):\\r\\n        self.datas = []\\r\\n\\r\\n    def store_data(self, data):\\r\\n        if data is None:\\r\\n            return\\r\\n        self.datas.append(data)\\r\\n\\r\\n    def output_html(self):\\r\\n        headers = [\\"url\\", \\"title\\", \\"summary\\"]\\r\\n        with open(\\"baike.csv\\", \\"w\\") as fp:\\r\\n            fp_csv = csv.DictWriter(fp, headers)\\r\\n            fp_csv.writeheader()\\r\\n            fp_csv.writerows(self.datas)\\r\\n\\r\\n```\\r\\n\\r\\n### 爬虫调度器\\r\\n```python\\r\\n# coding: utf-8\\r\\n\\r\\nfrom URLManager import URLManager\\r\\nfrom HtmlDownloader import HtmlDownloader\\r\\nfrom HtmlParser import HtmlParser\\r\\nfrom DataOutput import DataOutput\\r\\n\\r\\n\\r\\nclass Spider(object):\\r\\n    def __init__(self):\\r\\n        self.manager = URLManager()\\r\\n        self.downloader = HtmlDownloader()\\r\\n        self.parser = HtmlParser()\\r\\n        self.output = DataOutput()\\r\\n\\r\\n    def crawl(self, root_url):\\r\\n        self.manager.add_new_url(root_url)\\r\\n        while(self.manager.have_new_url() and self.manager.old_url_size() < 100):\\r\\n            try:\\r\\n                new_url = self.manager.get_new_url()\\r\\n                html = self.downloader.download(new_url)\\r\\n                new_urls, data = self.parser.parser(new_url, html)\\r\\n                self.manager.add_new_urls(new_urls)\\r\\n                self.output.store_data(data)\\r\\n                print \\"已经爬取 %s 个链接\\" % self.manager.old_url_size()\\r\\n            except Exception, e:\\r\\n                print \\"crawl failed.\\"\\r\\n                print e\\r\\n        self.output.output_html()\\r\\n\\r\\n\\r\\nif __name__ == \\"__main__\\":\\r\\n    spider = Spider()\\r\\n    spider.crawl(\\"https://baike.baidu.com/item/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB\\")\\r\\n\\r\\n```\\r\\n","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},"372dee48bcd85cb8c3d87dca01b84070d61bc8b44379fe46e642d8b42092149f":{"title":"Python 实现邮件发送","hash":"372dee48bcd85cb8c3d87dca01b84070d61bc8b44379fe46e642d8b42092149f","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"Python"},{"name":"邮件发送"}],"create":"2019-01-15","update":"2019-01-15","content":"在爬虫开发中，爬虫运行过程中遇到异常或服务器遇到问题时，我们可以采用发送邮件，及时报告爬虫程序当前故障问题。\\r\\n\\r\\n邮件发送协议是`SMTP`，`python`内置对`SMTP` 的支持，可以发送纯文本邮件、`HTML` 邮件以及带附件的邮件。`python`中对`SMTP`支持有 `smtpplib`和`email`模块，`email` 负责构造邮件，`smtplib`负责发送邮件。\\r\\n\\r\\n* 以网易的邮件发送服务器为例`smtp.163.com`，需要开启网易邮箱的`smtp`功能。\\r\\n\\r\\n* 构造纯文本邮件。\\r\\n\\r\\n```python\\r\\nfrom email.mime.text import MIMEText\\r\\nmsg = MIMEText(\\"你好，世界！\\", \\"plain\\", \\"utf-8\\")\\r\\n```\\r\\n构造`html`邮件。\\r\\n```python\\r\\nfrom email.mime.text import MIMEText\\r\\nmsg = MIMEText(\\"<a href=\'https://痛点就是起点.win/\'>my blog</a>\\", \\"html\\", \\"utf-8\\")\\r\\n```\\r\\n\\r\\n* 设置发件人信息、收件人信息和邮件主题信息。\\r\\n\\r\\n```python\\r\\nfrom_addr = \\"yhw_software@163.com\\"\\r\\npassword = \\"********\\"\\r\\n\\r\\nto_addr = \\"yhw_software@qq.com\\"\\r\\n\\r\\nsmtp_server = \\"smtp.163.com\\"\\r\\n\\r\\nmsg[\'From\'] = format_addr(\\"我是 <%s>\\" % from_addr)\\r\\nmsg[\\"To\\"] = format_addr(\\"你是 <%s>\\" % to_addr)\\r\\nmsg[\\"Subject\\"] = Header(\\"晚安\\", \\"utf-8\\").encode()\\r\\n```\\r\\n\\r\\n* 发送邮件。\\r\\n\\r\\n```python\\r\\nserver = smtplib.SMTP(smtp_server, 25)\\r\\nserver.login(from_addr, password)\\r\\nserver.sendmail(from_addr, [to_addr], msg.as_string())\\r\\nserver.quit()\\r\\n```\\r\\n\\r\\n___\\r\\n\\r\\n完整代码如下所示。\\r\\n```python\\r\\n# coding: utf-8\\r\\n\\r\\nfrom email.header import Header\\r\\nfrom email.mime.text import MIMEText\\r\\nfrom email.utils import parseaddr, formataddr\\r\\n\\r\\nimport smtplib\\r\\n\\r\\n\\r\\ndef format_addr(s):\\r\\n    name, addr = parseaddr(s)\\r\\n    return formataddr((Header(name, \\"utf-8\\").encode(), addr))\\r\\n\\r\\n\\r\\nfrom_addr = \\"yhw_software@163.com\\"\\r\\npassword = \\"*********\\"\\r\\n\\r\\nto_addr = \\"yhw_software@qq.com\\"\\r\\n\\r\\nsmtp_server = \\"smtp.163.com\\"\\r\\n\\r\\nmsg = MIMEText(\\"晚上好！\\", \\"plain\\", \\"utf-8\\")\\r\\n\\r\\nmsg[\'From\'] = format_addr(\\"我是 <%s>\\" % from_addr)\\r\\nmsg[\\"To\\"] = format_addr(\\"你是 <%s>\\" % to_addr)\\r\\nmsg[\\"Subject\\"] = Header(\\"晚安\\", \\"utf-8\\").encode()\\r\\n\\r\\nserver = smtplib.SMTP(smtp_server, 25)\\r\\nserver.login(from_addr, password)\\r\\nserver.sendmail(from_addr, [to_addr], msg.as_string())\\r\\nserver.quit()\\r\\n\\r\\n```","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},"327fde745e53205a8604543d1e4dd40ebaddfc13cde5c949b2eb81d0a8b20411":{"title":"提取多媒体文件","hash":"327fde745e53205a8604543d1e4dd40ebaddfc13cde5c949b2eb81d0a8b20411","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"多媒体文件"}],"create":"2019-01-14","update":"2019-01-14","content":"利用 python 爬取多媒体文件，存储它们有两种方式，一是只存储 url 链接，二是将文件下载下来。存储文件链接可以将文件的链接信息存储到 json 文件或 csv 文件；下载文件需要用到 urllib 模块提供的 urlretrieve() 函数，urlretrieve() 函数可以将远程数据下载到本地。\\r\\n\\r\\n```python\\r\\nurlretrieve(url,filename=None,reporthook=None,data=None,context=None)\\r\\n```\\r\\n\\r\\n参数 filename 是指存储的本地路径；reporthook 是一个回调函数，当连接到服务器以及传输完毕相应的数据块，会调用该回调函数，一般用于显示下载进度。\\r\\n\\r\\n以爬取天堂网图片为例 [http://www.ivsky.com/tupian/ziranfengguang/](http://www.ivsky.com/tupian/ziranfengguang/)，下载图片的代码如下所示：\\r\\n\\r\\n```python\\r\\nimport urllib\\r\\nfrom lxml import etree\\r\\nimport requests\\r\\n\\r\\n\\r\\ndef schedule(blocknum, blocksize, totalsize):\\r\\n    per = 100.0 * blocknum * blocksize / totalsize\\r\\n    if per > 100:\\r\\n        per = 100\\r\\n    print \\"当前下载进度： %d\\" % per\\r\\n\\r\\n\\r\\nuser_agent = \\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) \\" \\\\\\r\\n             \\"Chrome/71.0.3578.98 Safari/537.36\\"\\r\\nheaders = {\\"User-Agent\\": user_agent}\\r\\nreq = requests.get(\\"http://www.ivsky.com/tupian/ziranfengguang/\\", headers=headers)\\r\\n\\r\\nhtml = etree.HTML(req.text)\\r\\nimg_urls = html.xpath(\\".//img/@src\\")\\r\\ni = 0\\r\\nfor img_url in img_urls:\\r\\n    urllib.urlretrieve(img_url, \\".images/img\\"+str(i)+\\".jpg\\", schedule)\\r\\n    i += 1\\r\\n```\\r\\n\\r\\n![](images/2019/Jan/1.png)\\r\\n","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},"3dd4f58ce2c3444c9e65d892fb86d74c6de1b1036edf6e0f1523ba9784fd1950":{"title":"数据存储为 json 和 csv","hash":"3dd4f58ce2c3444c9e65d892fb86d74c6de1b1036edf6e0f1523ba9784fd1950","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"json"},{"name":"csv"}],"create":"2019-01-14","update":"2019-01-14","content":"进行 python 爬虫时，我们需要将数据存储起来。对于小数据量，我们可以存储到 json 文件或 csv 文件。\\r\\n\\r\\n### json存储\\r\\nPython 对 json 文件的操作是通过 JSON 模块实现的，分为编码和解码两个过程。\\r\\n\\r\\n编码是指将 python 对象转换为 json 对象，常用的函数是 dump() 和 dumps()，区别是 dump() 将 python 对象转换为 json 对象，并将 json 对象通过文件流写入文件，dumps() 函数是返回字符串。\\r\\n\\r\\n```python\\r\\ndumps(obj,skipkeys=False,ensure_ascii=True,check_circular=True,allow_nan=True,cls=None,indent=None,separators=None,encoding=\'utf-8\',default=None,sort_keys=False,**kw)\\r\\ndumps(obj,skipkeys=False,ensure_ascii=True,check_circular=True,allow_nan=True,cls=None,indent=None,separators=None,encoding=\'utf-8\',default=None,sort_keys=False,**kw)\\r\\n```\\r\\n\\r\\n解码是指将 json 对象转换为 python 对象，常用的函数为 load() 和loads()，区别是 load() 是将 json 对象转换为 python 对象，并将 python 对象写入到文件，而 loads() 是返回字符串。\\r\\n\\r\\n```python\\r\\nload(fp,encoding=None,cls=None,object_hook=None,parse_float=None,parse_int=None,parse_constant=None,object_pairs_hook=None,**kw)\\r\\nloads(s,encoding=None,cls=None,object_hook=None,parse_float=None,parse_int=None,parse_constant=None,object_pairs_hook=None,**kw)\\r\\n```\\r\\n\\r\\n### csv存储\\r\\nCSV(Comma-Separated Values，逗号分隔值，有时也称为字符分隔值)，其文件是以纯文本形式存储表格数据。CSV 文件由任意数目的记录组成，记录间以换行符分隔，每条记录由字段组成，字段间的分隔符是其他字符或字符串，最常见的是逗号和制表符。CSV 文件示例如下：\\r\\n\\r\\n```text\\r\\nID,Username,Password,Age,Country\\r\\n\\r\\n1001,yhw,123456,24,China\\r\\n\\r\\n1002,Mary,654321,25,USA\\r\\n\\r\\n1003,Jack,123567,22,English\\r\\n```\\r\\n\\r\\nPython 通过 csv 库来读写 csv 文件。Python 写 csv 文件，需要用到 write 对象，然后按行写每一个记录；\\r\\n\\r\\n```python\\r\\nimport csv\\r\\n\\r\\nheader = (\\"ID\\", \\"Username\\", \\"Password\\", \\"Age\\", \\"Country\\")\\r\\nrows = [(1001, \\"yhw\\", \\"123456\\", 24, \\"China\\"),\\r\\n        (1002, \\"Mary\\", \\"654321\\", 25, \\"USA\\"),\\r\\n        (1003, \\"Jack\\", \\"123567\\", 22, \\"English\\")]\\r\\n\\r\\nwith open(\\"test3.csv\\", \\"w\\") as fp:\\r\\n    fp_csv = csv.writer(fp)\\r\\n    fp_csv.writerow(header)\\r\\n    fp_csv.writerows(rows)\\r\\n```\\r\\n\\r\\n```python\\r\\nimport csv\\r\\n\\r\\nrows = [{\\"ID\\": 1001, \\"Username\\": \\"yhw\\", \\"Password\\": \\"123456\\", \\"Age\\": 24, \\"Country\\": \\"China\\"},\\r\\n        {\\"ID\\": 1002, \\"Username\\": \\"Mary\\", \\"Password\\": \\"654321\\", \\"Age\\": 25, \\"Country\\": \\"USA\\"},\\r\\n        {\\"ID\\": 1003, \\"Username\\": \\"Jack\\", \\"Password\\": \\"123567\\", \\"Age\\": 22, \\"Country\\": \\"English\\"}]\\r\\n\\t\\t\\r\\nwith open(\\"test3.csv\\", \\"w\\") as fp:\\r\\n\\tfp_csv = csv.DictWriter(fp, header)\\r\\n    fp_csv.writeheader()\\r\\n    fp_csv.writerows(rows)\\r\\n```\\r\\n\\r\\nPython 读取 csv 文件需要用到 reader 对象，然后同样是按行读取每一条记录。要读取特定字段信息，python 可以利用索引、命名元祖、字典这三种方式访问。\\r\\n\\r\\n```python\\r\\nimport csv\\r\\nfrom collections import namedtuple\\r\\n\\r\\nwith open(\\"test3.csv\\", \\"r\\") as fp:\\r\\n    # 遍历记录\\r\\n    fp_csv = csv.reader(fp)\\r\\n    for row in fp_csv:\\r\\n        print row\\r\\n\\r\\n    # 索引\\r\\n    fp_csv = csv.reader(fp)\\r\\n    for row in fp_csv:\\r\\n        print row[0]\\r\\n\\r\\n    # 命名元组\\r\\n    fp_csv = csv.reader(fp)\\r\\n    header = next(fp_csv)\\r\\n    Row = namedtuple(\\"Row\\", header)\\r\\n    for r in fp_csv:\\r\\n        row = Row(*r)\\r\\n        print row.Username, row.Password\\r\\n        print row\\r\\n\\r\\n    # 字典\\r\\n    fp_csv = csv.DictReader(fp)\\r\\n    for row in fp_csv:\\r\\n        print row.get(\\"Username\\")\\r\\n```","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},"666c800c2aa18127d0e5200f709e5c69fc2c49a9ad47f2d705ea752a355645ec":{"title":"总结 BeautifulSoup","hash":"666c800c2aa18127d0e5200f709e5c69fc2c49a9ad47f2d705ea752a355645ec","sub_title":null,"category":{"name":"生活感悟"},"tags":[{"name":"Python"},{"name":"BeautifulSoup"}],"create":"2019-01-13","update":"2019-01-13","content":"1. BeautifulSoup4 支持 python 标准库(html.parser)、lxml、html5lib 这些解析器解析文档。\\r\\n\\r\\n2. 格式化输出文档内容 print soup.prettify()，会自动补全文档。\\r\\n\\r\\n3. BeautifulSoup4 将复杂的 html 文档转换成一个复杂的树形结构，每一个节点是 python 对象，所有的对象有四种：Tag、NavigableString、BeautifulSoup、Comment。\\r\\n\\r\\n4. Tag 查找的是文档中第一个符合内容的标记，有两个属性：name 和 attrs，分别为获取标记的名称和属性，.attrs 返回的是字典类型，也可以用 [] 和 get() 来获取特定的属性内容。\\r\\n\\r\\n5. NavigableString 表示的是标记内部的字符串，可以用 .string 来获取。\\r\\n\\r\\n6. BeautifulSoup 表示的是文档的全部内容，.name 返回的是 [document]，.attrs 返回的是 {}。\\r\\n\\r\\n7. Comment 表示的是文档的注释内容，用 .string 可以获取去掉注释符号的注释内容，可以用 type() == bs4.element.Comment 来判断该字符串是否为注释。\\r\\n\\r\\n8. BeautifulSoup 将 html 文档转换为文档树，支持子节点、父节点、兄弟节点和前后节点进行遍历文档树。\\r\\n\\r\\n9. 获取子节点的属性有 contents、children、descendants。contents 以列表的形式返回直接子节点信息；children 返回的是直接子节点迭代器，可以用 for in 循环遍历；descentants 返回的子孙节点迭代器，可以用 for in 循环遍历。\\r\\n\\r\\n10. 获取子节点内容的属性有 string、strings、stripped_strings。string 返回的是标记最内部的内容；strings 返回的是标记内部字符串的迭代器，可以用 for in 循环遍历，包括空格和换行；stripped_string 是去掉 strings 中的空格和换行。\\r\\n\\r\\n11. 获取节点的父节点的属性是 parent，获取节点的父辈节点的属性是 parents，返回父辈节点的迭代器，可以使用 for in 循环遍历。 \\r\\n\\r\\n12. 获取节点的兄弟节点的属性有 next_sibling，next_siblings 和 previous_sibling，previous_siblings。节点的兄弟节点包括字符串节点（字符串、空格、换行）。\\r\\n\\r\\n13. 获取节点的前后节点的属性有 next_element，next_elements 和 previous_element，previous_elements。同样前后节点也包括字符串节点。\\r\\n\\r\\n14. 搜索文档树的方法主要是一系列 find 方法，以列表的形式返回。以 find_all(name, attrs, recursive, text, limit, **kwargs) 为例，其中 name 参数以节点的名称来搜索文档树；attrs 参数以节点的属性信息来搜索文档树，以字典形式给出；text 参数以节点的内容来搜索文档树；kwargs 参数可以以不是 python 内置的关键字参数来搜索文档树，包括标记的 class 属性，id 属性等。name、attrs、text、kwargs 参数支持字符串、正则表达式、列表、TRUE（匹配任何值）。recursive 参数为 False 时，BeautifulSoup 会搜索直接子节点，limit 会限制 BeautifulSoup 搜索节点的个数。\\r\\n\\r\\n15. BeautifulSoup 还支持 CSS 语法来搜索文档树，使用的方法是 select()，返回的类型是列表类型。","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},"ad445a2c57c1c0897dbc57c31a2a07b9b1e92aaebe7ba0fc08568ef44a8a8bde":{"title":"备份是一个好工具","hash":"ad445a2c57c1c0897dbc57c31a2a07b9b1e92aaebe7ba0fc08568ef44a8a8bde","sub_title":null,"category":{"name":"生活感悟"},"tags":[{"name":"备份"}],"create":"2019-01-11","update":"2019-01-11","content":"### 故事发生\\r\\n我是 1 月 5 号晚上使用 ubuntu 系统时，由于编程需要，决定重装 python 3。可是，我在终端中输入卸载原来 python 3 命令“sudo apt-get remove python3”，回车后，先是一系列检测 python 3 所有的程序包，终端中输出有九百多兆大小，我想都没想，直接按了个 y，卸载任务就这样开始执行了。大概持续了5分钟左右，随着卸载任务进行，我发现桌面上的火狐浏览器、chrome 浏览器都都不见了，才意识到我刚刚此举的严重性。等我第二天再打开 ubutnu 系统时，此时的系统已经没有任务栏了，可惜的是，我当时沉浸在深深的自责中，没有截图来记录这一“伟大”的实验。这个现象应该是那个命令卸载了一些系统程序，导致部分系统组件不能正常显示。没办法，此时最好的办法就是重装系统了。\\r\\n\\r\\n### 一波三折\\r\\n在我开始安装 ubuntu16.04 系统时，快要安装成功时，系统却提示引导安装失败（我电脑是window 10 + ubuntu 16.04 双系统，引导失败，意味着双系统安装失败，只能使用 ubuntu 16.04 系统）。虽然，有方法可以修复引导，可是完美主义兼懒癌晚期的我岂能容下这个小瑕疵，尝试三次，依然是引导安装失败，我才悻悻地决定重新安装 windows 10系统 + ubuntu 18.04 系统。\\r\\n\\r\\n有时候不是我们愿意犯错，而是每一次犯错之前，我们都希望这一次会成功，所以，判断出确定的错误是多么实用的能力。\\r\\n\\r\\n### 前路曲折，每步需谨慎\\r\\n走到这一步，我想既然都重装双系统了，那还不如来个“从头再来”，前进路上坑多了，自然会想到回来，去另外一条路。于是，我开始备份数据，从 ubuntu 16.04 系统到 windows 10 系统，而且采用的是最原始的备份方式，拷贝到 U 盘中去。不得不说，300 多 G 数据的备份耗费了五六小时，此时我只有感叹备份效率太低，渴求备份技术能够突破。\\r\\n\\r\\n这里，我要强烈地吐槽一下 ubuntu 系统，人机交互做得太差了！我在复制 ubuntu 16.04 系统中的数据，进度条跑完，我就弹出 U 盘，按理说，这应该是很正确的做法。可是，当我再进入 windows 10 系统，准备复制 windows 10 中的数据时，我在 windows 10 中打开 ubuntu 中复制的数据，发现大多数文件都已乱码，只有小部分数据完好的，很显然，数据拷贝没有完成，可是 ubuntu 中复制进度条已经跑完呀。这里，windows 10 系统做得挺好的，因为从一个磁盘复制到另一个磁盘，不可能一个单位一个单位地复制，需要借助中间缓冲区域，即缓冲区。Windows 10 系统复制文件的进度条百分比展示的是文件到缓冲区的数量，而进度条结束表明文件复制结束。进度条百分比虽然到 100%，但是进度条不一定结束。此时，我只有感叹眼见不一定为实。\\r\\n\\r\\n### 备份时遗留的坑是恢复时付出的汗水\\r\\n双系统安装完后，接下来的任务就是恢复数据，让电脑恢复如初。因为我之前博客是利用 hexo 搭建的，备份数据时导致以前很多博客文章文件拷贝失败，而且我之前弄的博客没有任何备份机制，我只有无奈地采取从网页文件中复制出来，人工地进行恢复博客文件，好在，一切都顺利进行，电脑恢复如初了。\\r\\n\\r\\n写到这里，我深有体会，任何一项工程，凡是加上时间这一因素，数据增长的速度会很惊人的。如果当初在设计该工程时，要么就祈求这个工程永不宕机；要么就考虑备份机制，就设计出好用且方便的备份工具来。很显然，永不宕机的可能性很低，应该这样说，是高效且好用的备份机制保证了长时间不宕机的可能。时间在不停地推着我们前进，但是我们也应该时不时去回顾过去，分析过去，展望未来，让我们更平稳地前进。因此，备份是一个好工具。\\r\\n","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},"eb593752326319802b5d4339a02ab87e1dcb43cf24ff3e55791e73249ecf3da2":{"title":"2018总结","hash":"eb593752326319802b5d4339a02ab87e1dcb43cf24ff3e55791e73249ecf3da2","sub_title":null,"category":{"name":"生活感悟"},"tags":[{"name":"总结"}],"create":"2019-01-01","update":"2019-01-01","content":"得到 APP 创始人罗振宇曾说过，一个好的自我介绍就是四条，任何场合自我介绍，你总有几秒到几十秒甚至几分钟的考虑时间，你可以在这时间里心里考虑这四件事。\\r\\n\\r\\n第一件事，在有限的时间里，我必须给大家介绍那些硬的信息事什么，比如我叫什么名字，我是哪的人，哪个学校毕业的，这都叫硬信息。但请注意，只是第一层，这就是简历那个部分。\\r\\n\\r\\n第二件事，你现在想，我为什么来到这个场合？我跟这个场合的关系的是什么？\\r\\n\\r\\n第三件事，我能够提供给大家的价值的是什么？\\r\\n\\r\\n第四件事，我在这儿需要获得大家的帮助是什么？\\r\\n\\r\\n在做 2018 年总结前，我先正式的写一段自我介绍。\\r\\n\\r\\n我叫痛点就是起点，今天我来复盘自己的 2018 年，这里是我的 2018 年总结。这份总结是自我剖析的产物，是引领我 2019 年成长的旗帜，希望各位不吝赐教，共同成长。\\r\\n\\r\\n时光荏苒，2018 年过去了，回顾这一年，我草草地毕业，被动地接受社会的洗礼，甚至在“修身”和“齐家”这两个目标没有明确的执行计划。总之，从 2 月份确认考研失败以来，我的2018 年是纠结的，是迷茫的，是灰色的。\\r\\n\\r\\n2018 年，有几个词句真的是触动到了我。\\r\\n\\r\\n**自杀式单身**，指的是一直 单身又不主动扩展社交范围去认识新朋友，却每天幻想着能拥有爱情的行为。2018 年的我，不，应该是我人生的前四分之一（以百岁人生为目标）都在诠释这个词，内心渴望充满友谊的聚会，希望有那个她能够与我协同进化，执行 Yes 和 and 的心法，可是一次又一次我却认为孤独很好，一个人世界充满着的奇幻和乐趣。\\r\\n\\r\\n**投资自己是最大的投资。**2018 年，由年初美国的贸易保护，一直持续到年尾，到很多公司被爆出大量裁员，很多投资者纷纷发表言论，2018 的冬天格外冷，认为这个冬天投资自己是最大的投资。其实，这句话无论什么时候都是正确的，无论外部环境好与坏，投资自己，提高自己的认知能力，熟练自己的用脑程度，这些都是必要的。这个世界，走的快的人会把走得慢的落下，认知能力高的终究把能力低的人甩下，向上层阶级涌动的道路一直都很拥挤，阶级下滑的路去畅通无阻。\\r\\n\\r\\n**小趋势是影响趋势的趋势，带来改变的改变。**这句话，出自罗振宇的《时间的朋友·第4场》跨年演讲。关于小趋势，我想回顾一下我过去二十几年。我是一位 95 后，自我出生时，国家执行计划生育政策，“只生一个好”，“生男生女一个样”，等等，而我就是这样的高压政策下来到了这个世界，可能是让我明白我的出生来之不易，希望我明白韶光易逝，劝君善待时间；2007年，我正碰上了小学五年制改六年制，可能是让我明白学生年代的宝贵性，希望我好好珍惜这短暂的学生年代；2011 年夏，我参加完中考，只因为中考分数差点，而不得不选择人们眼中稍差的学校，可是三年的高中生涯让我明白优秀是相对的，成绩是过去的，而成长却是一直陪伴我们始终的；2014 年我步入了大学的门槛，而这一切可能是上天故意安排的，偏偏我们这一届一个班，偏偏我们这一届教学计划是老计划，偏偏在大学快结束时，我才明白过来，所谓的教育，只不过是便于管理。2018 年，我毕业了，在缺乏社会经验，应该说是很缺乏社会经验，面对未来的生活和失败的考研的经历，我又一次跳进去，由社会的浪潮推着前进，全然不知这一切的小趋势。也许，这就是生活吧，它糟糕得要命，容不得你有半点重来的机会，但你会爱上它的。\\r\\n\\r\\n2019 年已经到来，我只希望这一年我能一直成长，时刻感受、抓住并记录身边的小趋势。2019 年，我想发下一个大愿，未来十二年，公众号日更，继续英语学习，并定期推送计算机专业知识以及其他知识的学习，每天成长一点。**~~简单来说，未来十二年，公众号日更，每天推送自己的学习和思考内容。~~**2019 年加油，忘了说了，2019 年是我的本命年，本命年，加油！\\r\\n\\r\\n\\r\\n","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},"644ac7cbfb5c2a78311a11456607536eb97c60b4e5f185d35ab677c58890ece5":{"title":"考研政治选择题命题人思路","hash":"644ac7cbfb5c2a78311a11456607536eb97c60b4e5f185d35ab677c58890ece5","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"考研政治"}],"create":"2018-11-09","update":"2018-11-09","content":"### 马原\\r\\n#### 绪论\\r\\n1. 人类社会发展的根本动力：社会基本矛盾。易将重要动力与根本动力混为一谈，如，阶级斗争是重要动力。\\r\\n2. 马克思主义之所以具有如此强大的生命力：实践性，科学性，革命性。\\r\\n3. 马克思主义鲜明特征：实践性，科学性，革命性，人民性，发展性。\\r\\n4. 马克思主义包含马哲、政经和科社，其中马哲是基础，方法；政经是主体内容；科社是归宿。\\r\\n5. 矛盾是普遍存在，和谐社会也存在矛盾（非对抗性）。\\r\\n6. 共产主义社会：物质财富极大丰富、人民精神境界极大提高、每个人自由而全面发展。\\r\\n7. 自由是尊重规律和不牺牲别人的自由。\\r\\n8. 科学性表现在按照世界的本来面目去认识世界。\\r\\n#### 唯物论\\r\\n9. 不彻底的唯物主义：自然观上是唯物主义，历史观上是唯心主义。\\r\\n10. 不彻底的唯心主义：否认物质与意识的同一性。\\r\\n11. 马克思在哲学史上两大贡献：辩证唯物主义和历史唯物主义；理论上是两大贡献：唯物史观和剩余价值。\\r\\n12. 唯物主义与唯心主义：物质与意识何者为第一性；可知论与不可知论：思维和存在是否具有同一性；辩证法和1形而上学：世界是怎样发展的；唯物史观和唯心史观：社会意识和社会存在何者为第一性。\\r\\n13. 夸大规律，导致宿命论；夸大主观能动性，导致唯意志论。\\r\\n14. 意识的能动作用具有两面性。错误论述：意识的能动作用使事物向正确方向发展。错误论述：只有正确的意识才能反作用于客观事物。\\r\\n15. 正确论述：意识能够改造（创造）客观事物。\\r\\n16. 物质是运动的基础和承担者；运动的原因和根据是矛盾；运动的根本属性和存在方式是时空；静止是过去运动的结果和未来运动的出发点。\\r\\n17. 错误论述：唯心主义哲学同人类认识伴随始终。\\r\\n18. 错误论述：物质的各种实物的总和。“实物”，“总和”。物质是…的抽象。\\r\\n19. 意识和物质是对立统一；在一定范围，只对立（只统一）。\\r\\n20. 错误论述：鬼神观念是人脑对鬼神的虚幻反映。意识是对物质的反映。\\r\\n21. 正确论述：意识只是对客观存在近似的反映。错误论述：意识不能准确、完整地反映客观存在。\\r\\n22. 意识和物质的统一性：意识对物质具有相对独立性。\\r\\n23. 错误论述：电脑和机器人也能进行某些实践活动。\\r\\n24. 错误论述：人类能够发现、改造、创造客观规律。正确论述：人类可以发现规律，改变规律起作用的条件和方式。正确论述：人类能够发现、认识、利用客观规律。\\r\\n#### 辩证法\\r\\n25. 事物内部的肯定反面和否定反面的对立统一运动，表现形式是螺旋式上升的过程；实质是事物自我完善和发展的过程。\\r\\n26. 感性认识与理性认识是深浅区别，不是对错区别。\\r\\n27. 假象是错误的现象；错觉是错误的感觉。\\r\\n28. 主观辩证法与客观辩证法是反映与被反映的关系。\\r\\n29. 自然规律与社会规律的联系是客观性。它们的区别是：自然规律是盲目的，自发的，没有主观参与，精确重复；社会规律是有意识的，自觉的，主客观相互制约，是一种趋势。\\r\\n30. 矛盾的解决：矛盾一方克服另外一方；矛盾双方达到谐同运动的状态；矛盾双方毁灭，转化为新矛盾。\\r\\n31. 矛盾的斗争性寓于同一性之中。\\r\\n32. 普遍和特殊，一般和个别，共性和个性。\\r\\n33. 矛盾的普遍性寓于（存在于）特殊性之中。必然性寓于偶然性之中。\\r\\n34. 外因只能通过内因才能起作用。\\r\\n35. 社会规律实现的特点是既有不以人的意志为转移的规律，又有人的主观能动性。\\r\\n36. 错误论述：新事物在任何时候都能战胜旧事物。正确论述：新事物一定会战胜旧事物。\\r\\n37. 正确论述：凡是在历史上产生的都会在历史上灭亡。\\r\\n#### 认识论\\r\\n38. 正确论述：认识是实践的先导。错误论述：认识先于实践。\\r\\n39. 正确论述：实践作为检验真理的标准即是确定的，又是不确定的。\\r\\n40. 旧唯物主义认识论：直观反映论；辩证唯物主义认识论：能动反映论。\\r\\n41. 唯物主义认识论：反映论；唯心主义认识论：先验论。\\r\\n42. 正确论述：感性认识是理性认识的基础。\\r\\n43. 唯心主义观点：理性认识能够建构认识对象。\\r\\n44. 正确论述：认识的根本目的是实践。错误论述：认识的根本目的是通过现象认识本质。这类错误论述一般将认识的根本目的论述为其他。\\r\\n45. 哲学概念之间有级别高低，没有重要高低。\\r\\n46. 错误论述：真理和谬误没有原则界限。\\r\\n47. 错误论述：科学实验是社会存在的基础。实践包括物质生产，政治实践和科学实验，其中物质生产是社会存在的基础。\\r\\n48. 错误论述：理性认识能指导人们推动事物的发展。正确论述：；理性认识能够指导人们推动或阻碍事物的发展。\\r\\n49. 感性认识和理性认识是深浅区别，不是对错区别。\\r\\n50. 正确论述：真理只能是主观对客观事物近似正确即相对正确的反映。\\r\\n51. 真理与价值，规律与能动。真理，规律（该这么做），价值，能动（想怎么做）。\\r\\n52. 正确论述：认识的基础是实践。错误论述：感性认识是认识的基础。只能说感性认识的认识的第一个阶段。\\r\\n53. 正确论述：实践决定认识的产生和发展。\\r\\n54. 正确论述：实践是认识的唯一来源。\\r\\n55. 正确论述：实践是实现思想目的的感性物质活动。实践过程体现主体的目的，受主体的意识指导，体现主体的能动性。\\r\\n56. 错误论述；认识只是客体在主体的头脑中的直接再现。这是一种直观（机械）反映论。\\r\\n57. 错误论述：对同一件事件的不同看法可以都是正确的。违背了真理的一元性。\\r\\n58. 有用未必是真理，真理一定是有用的。\\r\\n59. 人类的认识能力是无限和有限的统一，至上性和非至上性的统一。\\r\\n60. 自由的条件性：认识上，认知越多，越自由；实践上，尊重客观规律，尊重别人的自由。\\r\\n61. 事物发展和人类的认识能力有待发展决定了真理的相对性。\\r\\n#### 唯物史观\\r\\n62. 社会存在决定社会意识。\\r\\n63. 错误论述：社会心理可以左右社会发展方向。\\r\\n64. 生产方式是生产力和生产关系的统一；社会形态是经济基础和上层建筑的统一；人的本质是一切社会关系的总和；生产力是劳动资料、劳动对象和劳动力的统一；生产资料是劳动资料和劳动对象的统一。\\r\\n65. 错误论述：人类的活动目的本身就是历史规律。\\r\\n66. 错误论述：人民群众的意志就是历史的发展方向。\\r\\n67. 错误论述：人们在实践活动中所形成的各种社会关系属于社会存在范畴。生产关系是属于社会存在范畴。\\r\\n68. 生产关系是生产的形式，是人们在生产过程中结成的人与人的物质利益关系。\\r\\n69. 错误论述：社会基本矛盾都可以通过自我完善和自我发展的方式加以解决。社会基本矛盾在剥削社会是对抗性的，在非剥削社会是对抗性的。\\r\\n70. 人类社会的发展是由物质力量决定的，并受精神力量影响的。\\r\\n71. 错误论述：社会发展是由多种力量最终决定的。\\r\\n72. 人性包括自然属性和社会属性，社会属性是本质属性。\\r\\n#### 政治经济学\\r\\n73. 商品的交换是解决商品内在的使用价值和价值的矛盾。\\r\\n74. 错误论述：使用价值越高，所含价值就越高。\\r\\n75. 正确论述：使用价值是价值的物质承担者。\\r\\n76. 资本的本质是在物的外壳掩盖下的一种社会关系。价值、资本、货币的本质是人与人的关系。\\r\\n77. 工资是劳动者必要劳动时间创造的价值（剩余劳动被资本家无偿占有），是劳动力的价值（本质），是劳动力的价格（本质），表现为了劳动的价格（掩盖资本主义剥削的实质）。\\r\\n78. 行业，部门（生产资料部门和生活资料部门），全社会。\\r\\n79. 利润被看作全部预付资本的产物，而剩余价值不是（c+v—>r,v—>m）。\\r\\n80. 利润和剩余价值的相同点：剩余价值和利润在量上是相等的；剩余价值和利润归根到底都是由工人的劳动创造出来的。\\r\\n81. 错误论述：资本输出是区分自由竞争和垄断两个发展阶段的根本标志。\\r\\n82. 商品本质上体现的是人与人之间的关系，是把人与人之间的关系物化了。\\r\\n83. 错误论述：商品之所以成为商品是因为它是劳动产品。进行交换的劳动产品的商品。\\r\\n84. 价值规律是内容是商品的价值是由生产商品的社会必要劳动时间决定的；商品交换以价值量为基础，按照等价原则进行。\\r\\n85. 价值规律的表现形式的价格围绕价值、生产价格、垄断价格上下波动，在不同阶段表现形式会不同。\\r\\n86. 价值规律的作用是价值规律可能造成商品生产者的两极分化。\\r\\n87. 劳动是劳动力的使用，它不是商品，没有价值或价格。\\r\\n88. 错误论述：如果竞争不复存在，垄断企业就没有动力和压力壮大自己的实力。垄断企业壮大的内因是获得更多的利润，外因是竞争。\\r\\n89. 错误论述：对于资本输出国来说，垄断资本的扩张只有积极作用，没有不利影响。\\r\\n90. 正确论述：从整个社会来看，商品的价格总额仍然等于商品的价值总量。\\r\\n91. 私人资本所有制、股份、国家、法人资本所有制。\\r\\n#### 科学社会主义\\r\\n92. 社会关系的高度和谐体现在国家消亡，阶级消亡，工业与农业、城市与乡村、脑力劳动与体力劳动—“三大差别”消失，人、自然及社会都达成和谐。\\r\\n93. 错误论述：苏联模式是一条完全适合俄国国情的社会主义道路。\\r\\n### 思修法基\\r\\n#### 思想修养\\r\\n94. 是否爱自己的骨肉同胞是检验一个人爱国的试金石。爱灿烂文化是爱国的摇篮、精神基因。\\r\\n95. 民族精神：伟大的梦想精神，伟大的团结精神，伟大的奋斗精神，伟大的创造精神。\\r\\n96. 在社会主义社会，实现人生价值的标准是个体对社会和他人做贡献。\\r\\n97. 个人与社会、个人与他人关系的核心为利益关系。\\r\\n98. 社会主义核心价值观需要践行，贯穿实践当中，不是理想。\\r\\n99. 错误论述：爱国主义是永恒的。\\r\\n#### 道德修养\\r\\n100. 道德的功能：认识功能（行为前）、规范功能（行为中）、调节功能（行为后）。\\r\\n101. 维护公共生活秩序的基本手段是道德和法律。\\r\\n102. 基本国策：对外开放、一国两制、保护环境、节约资源、男女平等。\\r\\n103. 男女平等是道德要求，也是法律要求，还是基本国策，不是政治要求。\\r\\n104. 爱国主义是道德要求，也是法律要求，还是政治要求。\\r\\n105. 社会主义核心价值观的道义 力量：先进性、人民性、真实性。\\r\\n106. 错误论述：有序的公共生活是提高社会成员物质生活质量的基本保证。错误在于物质。\\r\\n107. 错误论述：个人品德是维护社会成员之间最基本的社会关系秩序的最起码的道德要求。\\r\\n108. 个人品德是经济社会发展进程中重要的主体精神力量。\\r\\n#### 法律修养\\r\\n109. 既是权利又是义务：劳动、教育。\\r\\n110. 未来中国法治国家发展和宪政之路的基本价值取向是保障公民的自由平等。\\r\\n111. 中国特色社会主义法律体系中，法律是主干，宪法是统帅。\\r\\n112. 《中华人民共和国香港特别行政区基本法》属于宪法相关法。\\r\\n113. 法律运行的环节来看，法律公正包括立法公正和执法公正；法律公正的内涵来看，法律公正包括实体公正和程序公正。\\r\\n114. 法律强制的主体是国家（主动主体）、社会成员（被动主体）与社会组织（被动主体）。\\r\\n115. 错误论述：公民在法律判决面前一律平等。\\r\\n116. 正确论述：公民在适用法律上一律平等。\\r\\n117. 法律适用的主体是国家司法机关（法院、检察院）及其公职人员。\\r\\n118. 宪法的修改需由1/5以上的全国人大代表提议，2/3以上全国人大代表通过。\\r\\n119. 我国社会主义法律的本质特征是阶级性与人民性的统一，科学性和先进性的统一。\\r\\n120. 国家机关包括行政机关、司法机关、军事机关、权力机关。\\r\\n121. 思想道德和法律在调解领域、调解方式、调解目标等方面存在很大不同。\\r\\n122. 公正司法是维护社会公平正义的最后一道防线。\\r\\n123. 法律权利和义务之间的关系包括：结构上的相关关系、总量上的等值关系和功能上的互补关系。\\r\\n124. 行政复议：执法部门和群众之间。\\r\\n125. 契约自由是商法中的基本原则。\\r\\n### 史纲\\r\\n#### 旧民主主义革命时期\\r\\n126. 争取名族独立和人民解放是解放民族复兴的前提。\\r\\n127. 洋务运动时期的民用工业的性质是资本主义性质，官督商办。\\r\\n128. 中国近代思想的共同主题是救亡图存。\\r\\n129. 导致中国近代历次反侵略战争失败的原因包括：社会制度腐败，经济技术落后。\\r\\n130. 维新派自身的局限性：不敢否定封建主义、对帝国主义抱有幻想、惧怕人民群众；客观原因：民族资产阶级力量弱小。\\r\\n131. 封建主义，政治上：封建君主专制制度；经济上：封建土地剥削制度。\\r\\n132. 辛亥革命的任务：反帝反封；纲领：不反帝且反封不彻底；结果：打击了帝国主义和封建主义。\\r\\n#### 新民主主义革命时期\\r\\n133. 新民主主义革命与旧民主主义革命的区别：革命指导思想、革命前途和革命领导权。其中革命领导权是区分的根本标志。\\r\\n134. 中国的民族民主革命是无产阶级领导的资产阶级民主革命，但客观上属于世界无产阶级社会主义革命的一部分是在十月革命后。\\r\\n135. 主观主义的实质就是理论脱离实际；表现形式：教条主义、经验主义。\\r\\n136. 阶级局限性（主观原因），敌人太强大（客观原因），自身力量弱小（客观原因）。\\r\\n137. 大革命失败到土地革命兴起的转折点是八七会议。\\r\\n138. 无产阶级反帝反封的态度最坚决。\\r\\n139. 洛川会议开启了全面的全民族抗战新阶段。\\r\\n140. 正确论述：农民是中国革命的主力军，无产阶级是中国革命最基本的动力。错误论述：农民是中国革命最基本的动力。\\r\\n141. 错误论述：民族资产阶级没有提出明确的革命纲领。正确论述：民族资产阶级没有提出科学的革命纲领。\\r\\n142. 构成人民民主专政主要联盟的阶级是工人阶级、农民阶级和城市小资产阶级。各革命阶级联合专政中的阶级是工、农、小、民。\\r\\n#### 新中国时期\\r\\n143. 20世纪的中国经历了三次历史性巨变：辛亥革命、中华人民共和国的成立和社会主义制度的确立、改革开放。\\r\\n144. 新民主主义社会的五种经济成分：社会主义国营经济、合作化经济、个体经济、国家资本主义、私人资本主义。\\r\\n145. 社会主义革命是反资反私。\\r\\n146. 首次科学阐述思想路线是《矛盾论》、《实践论》；思想路线在全党范围内确立是在延安整风运动；重新确立实事求是的思想路线是在十一届三中全会。\\r\\n### 毛中特\\r\\n#### 毛泽东思想\\r\\n147. 毛泽东思想开始形成：大革命到土地革命；走向成熟：遵义会议到抗日战争；写入党章：中共七大；继续发展：建国后。\\r\\n148. 毛泽东思想的活的灵魂：实事求是（精髓）、群众路线和独立自主；邓小平理论的活的灵魂（精髓）：解放思想，实事求是。\\r\\n149. 十一届六中全会，发表的《关于建国以来党的若干历史问题的决议》：评价毛泽东和毛泽东思想；对社会主义初级阶段的主要矛盾作了表述；首次使用社会主义初级阶段的概念（系统论述并作为国情加以把握在十三大）。\\r\\n150. 中国革命的基本问题：农民问题；首要问题：分清敌友问题；中心问题：无产阶级的领导权问题。\\r\\n151. 新民主主义革命时期最重要的关系：与农民；最根本的经验：与资产阶级的关系。\\r\\n152. 错误论述：“剥削阶级的脏东西”主要是指小资产阶级思想。\\r\\n153. 新中国成立是中国人民成为国家和社会的主人；社会主义改造完成是广大劳动人民成为国家和社会的主人。\\r\\n#### 中国特色社会主义理论体系之邓、三、科\\r\\n154. 社会主义的本质是解放生产力，发展生产力，消灭剥削，消除两极分化，最终达到共同富裕。\\r\\n155. 社会主义的根本原则是共同富裕和公有制。\\r\\n156. 依据—>国情；前提—>稳定；根本保证—>党的领导（制度）；重要保障—>法律；战略支撑—>国防军队；出发点，落脚点，归宿—>人；立足点—>独立自主，自力更生。\\r\\n157. 非公有制经济是中国特色社会主义经济的重要组成部分，是社会主义市场经济的重要组成部分，为社会主义服务。\\r\\n158. 按劳分配以外的多种分配方式的实质是按对生产要素的占有情况进行分配。\\r\\n159. 社会主义初级阶段的长期性从根本上取决于中国进入社会主义的历史条件，建设社会主义所需要的物质基础；决定了党的基本路线和基本纲领和社会主义初级阶段的主要矛盾。\\r\\n#### 习近平新时代中国特色社会主义思想\\r\\n160. 全面深化改革、全面依法治国和全面从严治党是战略举措，全面建成小康社会是战略目标。\\r\\n161. 市场作用保证更少的资源生产尽可能多的产品，配置资源有效率。\\r\\n162. 习近平新时代中国特色社会主义思想的核心要义是坚持和发展中国特色社会主义。\\r\\n163. 根本任务：解放和发展生产力；总任务：实现社会主义现代化和中华民族伟大复兴；中国共产党和中国政府的三大历史任务：实现祖国统一，社会主义现代化，维护世界和平；中国共产党的历史使命：统揽伟大斗争、伟大工程、伟大事业、伟大梦想，在全面建成小康社会的基础上全面建成社会主义现代化强国，实现中华民族伟大复兴。\\r\\n164. 四个全面：“鸟之两翼，车之双轮”—>全面深化改革和全面依法治国；引领性环节—>全面建成小康；突破性环节、先导性环节—>全面深化改革；重要组成部分—>全面依法治国和全面从严治党。\\r\\n165. 四个意识：政治意识、核心意识、看齐意识和大局意识。\\r\\n166. 错误论述：非公有制经济在促进共同富裕进程中具有重要作用。共同富裕需要公有制经济，政府的宏观调控来实现。\\r\\n167. 再分配调节机制的主要手段有：税收、社会保障、转移支付。增加财产性收入是初次分配的手段。\\r\\n\\r\\n","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},"4ae0d16297ae629030a3e430ce90d3962910ca9a910e560a3f37a5c739c3b814":{"title":"内务整理有感","hash":"4ae0d16297ae629030a3e430ce90d3962910ca9a910e560a3f37a5c739c3b814","sub_title":null,"category":{"name":"生活感悟"},"tags":[],"create":"2018-09-30","update":"2018-09-30","content":"今天在整理内务时，我无意中在高数书上发现我曾经摘抄的一段话，这段话是“**生活最重要，我很优秀，但并不一定一直要去最好的地方。优秀是为了让自己有更多的选择，当我可以选择时，我甚至可以去放羊。**”\\r\\n\\r\\n努力让自己成为一个优秀的人，在哪不重要！","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},"dad2c2db7579cbaa310794bdc7b5b8aa73b726c77b16048266fec9cf96c31532":{"title":"中秋快乐","hash":"dad2c2db7579cbaa310794bdc7b5b8aa73b726c77b16048266fec9cf96c31532","sub_title":null,"category":{"name":"生活感悟"},"tags":[],"create":"2018-09-24","update":"2018-09-24","content":"![](images/2018/September/mid-autumn.png)","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},"f8dcea177511cfdd678b49853a9eed4eee0ade081beb56781bd54de6fc2b18d6":{"title":"初识 BeautifulSoup","hash":"f8dcea177511cfdd678b49853a9eed4eee0ade081beb56781bd54de6fc2b18d6","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"Python"},{"name":"BeautifulSoup"}],"create":"2018-08-09","update":"2018-08-09","content":"BeautifulSoup 是一个可以从 HTML 或 XML 文件中提取数据的 python 库，它能通过解析器实现文档的查找提取和修改等功能。\\r\\n\\r\\n### BeautifulSoup 的安装\\r\\n对于 BeautifulSoup，目前推荐使用的是 BeautifulSoup 4，BeautifulSoup 3　已经停止开发了。安装 BeautifulSoup 4 有四种方式。\\r\\n\\r\\n> * 最新版的 Debain 或 Ubuntu 系统可以通过系统的软件包管理来安装，sudo apt-get install Python-bs4。\\r\\n> * BeautifulSoup 4 通过 PyPi 发布，可以通过 easy_install 或 pip 来安装，easy_install beautifulsoup4　或 pip install beautifulsoup4。\\r\\n> * 通过源码安装，BeautifulSoup 4 的源码地址为[https://pypi.python.org/pypi/beautifulsoup4/](https://pypi.python.org/pypi/beautifulsoup4/)，下载源码，解压后，运行命令 python setup.py install 即可完成安装。\\r\\n> * 通过 PyCharm　里 Project Interpreter 安装 BeautifulSoup 4。\\r\\n\\r\\n![](images/2018/August/Screenshot%20from%202018-08-09%2012-55-42.png)\\r\\n\\r\\nBeautifulSoup 支持 Python 标准库中的 HTML 解析器，还支持一些第三方解析器，如，lxml，html5lib 等，安装这些解析器方法与安装 BeautifulSoup 4 类似。\\r\\n\\r\\n| 解析器 | 优势 | 劣势 |\\r\\n| ------ | ------ | ------ |\\r\\n| Python 标准库 | Python 的内置标准库，执行速度适中，文档容错能力强 | Python 早期版本文档容错能力差 |\\r\\n| lxml HTML 解析器 | 速度快，文档容错能力强 | 需要安装 C 语言库 |\\r\\n| lxml xml 解析器 | 速度快，唯一支持 xml 的解析器 | 需要安装 c　语言库 |\\r\\n| html5lib | 最好的容错性，以浏览器方式解析文档，生成 HTML5 格式的文档 | 速度慢，不依赖外部扩展 |\\r\\n\\r\\n### BeautifulSoup 的使用\\r\\nBeautifulSoup 将复杂的 HTML 文档转换成一个复杂的树形结构，每个节点是 python 对象，这些对象可以归纳为 Tag、NavigableString、BeautifulSoup、Comment。\\r\\n\\r\\n```html\\r\\n\x3c!-- 测试文档　--\x3e\\r\\n<html><head><title>my blog</title></head>\\r\\n<body>\\r\\n<p class=\\"title\\"><b>One</b></p>\\r\\n<p class=\\"story\\">Two\\r\\n<a href=\\"http://xxx.cn/one\\" class=\\"one\\" id=\\"link1\\">\x3c!-- one --\x3e</a>,\\r\\n<a href=\\"http://xxx.cn/two\\" class=\\"two\\" id=\\"link2\\">\x3c!-- two --\x3e</a> and\\r\\n<a href=\\"http://xxx.cn/three\\" class=\\"three\\" id=\\"link3\\">three</a>;\\r\\nhello,world</p>\\r\\n<p class=\\"story\\">...</p>\\r\\n```\\r\\n\\r\\n#### Tag 对象\\r\\nTag 对象可以直接以标签名获取标签内容，Tag 对象还有两个属性 name 和 attr，分别表示获取到标签的名称和标签属性内容（以字典的形式返回）。\\r\\n\\r\\n```python\\r\\n# coding:utf-8\\r\\n\\r\\nfrom bs4 import BeautifulSoup\\r\\n\\r\\nsoup = BeautifulSoup(htmlStr, \'lxml\', from_encoding=\'utf-8\')\\r\\nprint(soup.a)\\r\\nprint(type(soup.a))\\r\\nprint(soup.a.name)\\r\\nprint(soup.a.attrs)\\r\\n```\\r\\n\\r\\n![](images/2018/August/Screenshot%20from%202018-08-10%2014-18-03.png)\\r\\n\\r\\n#### NavigableString 对象\\r\\nNavigableString 对象用来获取标签内部字符串，利用属性 string 来获取。\\r\\n\\r\\n```python\\r\\n# coding:utf-8\\r\\n\\r\\nfrom bs4 import BeautifulSoup\\r\\n\\r\\nsoup = BeautifulSoup(htmlStr, \'lxml\', from_encoding=\'utf-8\')\\r\\n\\r\\nprint(soup.p.string)\\r\\nprint(type(soup.p.string))\\r\\n```\\r\\n\\r\\n![](images/2018/August/Screenshot%20from%202018-08-10%2014-24-18.png)\\r\\n\\r\\n#### BeautifulSoup 对象\\r\\nBeautifulSoup 对象表示一个文档的全部内容，可以理解为特殊的 Tag 对象。\\r\\n\\r\\n```python\\r\\n# coding:utf-8\\r\\n\\r\\nfrom bs4 import BeautifulSoup\\r\\n\\r\\nsoup = BeautifulSoup(htmlStr, \'lxml\', from_encoding=\'utf-8\')\\r\\n\\r\\nprint(soup.name)\\r\\nprint(type(soup.name))\\r\\n```\\r\\n\\r\\n![](images/2018/August/Screenshot%20from%202018-08-10%2014-29-25.png)\\r\\n\\r\\n#### Comment 对象\\r\\nCommnet 对象用来获取文档中注释的内容。\\r\\n\\r\\n```python\\r\\n# coding:utf-8\\r\\n\\r\\nfrom bs4 import BeautifulSoup\\r\\n\\r\\nsoup = BeautifulSoup(htmlStr, \'lxml\', from_encoding=\'utf-8\')\\r\\n\\r\\nprint(soup.a.string)\\r\\nprint(type(soup.a.string))\\r\\n```\\r\\n\\r\\n![](images/2018/August/Screenshot%20from%202018-08-10%2014-32-08.png)\\r\\n\\r\\n#### BeautifulSoup 支持文档树遍历，可以根据子节点、父节点、兄弟节点和前后节点进行遍历。\\r\\n\\r\\n| 遍历方面 | 属性描述 |\\r\\n| ------ | ------ |\\r\\n| 子节点 | .contents, .children, .descendants |\\r\\n| 父节点 | .parent, .parents |\\r\\n| 兄弟节点 | .previous_sibling(s), .next_sibling(s) |\\r\\n| 前后节点 | .previous_element(s), .next_element(s) |\\r\\n\\r\\nBeautifulSoup 还支持 find*() 方法搜索文档树，以及支持 select() 方法根据　CSS 选择器查找文档中指定的标签。\\r\\n","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},"0fbcc0c5b1e2d3859a7e490db2418d03a45e6a172ff18d18b8c7a5d3861bba82":{"title":"Python 实现正则","hash":"0fbcc0c5b1e2d3859a7e490db2418d03a45e6a172ff18d18b8c7a5d3861bba82","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"Python"},{"name":"正则"}],"create":"2018-08-08","update":"2018-08-08","content":"python 通过 re 模块实现对正则表达式的支持，一般先将正则表达式的字符串形式编译为 Pattern 实例，然后使用 Pattern 实例处理文本并获得匹配结果，最后使用 Match 实例获得信息。\\r\\n\\r\\npython 中常用的实现正则表达式匹配函数有两种调用方式 re 调用和 pattern 调用。\\r\\n\\r\\n```python\\r\\n# re 调用\\r\\n> 1. re.compile(string[,flag])\\r\\n> 2. re.match(pattern, string[,flags])\\r\\n> 3. re.search(pattern, string[,flags])\\r\\n> 4. re.split(pattern, string[,maxsplit[,flags]])\\r\\n> 5. re.findall(pattern, string[,flags])\\r\\n> 6. re.finditer(pattern, string[,flags])\\r\\n> 7. re.sub(pattern, repl, string[,flags[,count]])\\r\\n> 8. re.subn(pattern, repl, string[,flags[,count]])\\r\\n```\\r\\n\\r\\n```python\\r\\n# pattern 调用\\r\\n> 1. re.compile(string[,flag])\\r\\n> 2. pattern.match(string[,flags])\\r\\n> 3. pattern.search(string[,flags])\\r\\n> 4. pattern.split(string[,maxsplit[,flags]])\\r\\n> 5. pattern.findall(string[,flags])\\r\\n> 6. pattern.finditer(string[,flags])\\r\\n> 7. pattern.sub(repl, string[,flags[,count]])\\r\\n> 8. pattern.subn(repl, string[,flags[,count]])\\r\\n```\\r\\n\\r\\n其中，flags 参数表示匹配模式，取值有以下几种情况，并且可以使用 “\\\\|” 同时使用多种匹配模式。\\r\\n\\r\\n> * re.I: 忽略大小写\\r\\n> * re.M: 多行模式，改变 “^” 和 “$” 的含义\\r\\n> * re.S: 点任意匹配模式，改变 “.” 的含义\\r\\n> * re.L: 使预定义字符类 \\\\w\\\\W\\\\b\\\\B\\\\s\\\\S 取决于当前区域设定\\r\\n> * re.U: 使预定义字符类\\\\w\\\\W\\\\b\\\\B\\\\s\\\\S\\\\d\\\\D 取决于 unicode 定义的字符属性\\r\\n> 6.re.X: 详细模式，这个模式下正则表达式可以是多行的，忽略空白符，并可以加入注释\\r\\n\\r\\n以上 7 个函数在 re 模块中进行搜索匹配，如果需要获得匹配的数据，这时可以利用 Match 对象，Match 对象保存了正则表达式匹配的过程。Match 对象的属性有：\\r\\n\\r\\n> * string: 匹配时使用的文本。\\r\\n> * re: 匹配时使用的 pattern 对象。\\r\\n> * pos: 文本中正则表达式开始搜索的索引。\\r\\n> * endpos: 文本中正则表达式结束搜索的索引。\\r\\n> * lastindex: 最后一个被捕获的分组在文本中的索引。\\r\\n> * lastgroup: 最后一个被捕获的分组的别名。\\r\\n> * group(group1,…): 获得一个或多个分组截获的字符串。\\r\\n> * groups(): 以元组形式返回全部分组截获的字符串。\\r\\n> * groupdict(): 返回以有别名的组的别名为键，以改组截获的子串为值的字典，没有别名的组不包含在内。\\r\\n> * start(group): 返回指定的组截获的子串在 string 中的起始索引。\\r\\n> * end(group): 返回指定的组截获的子串在 string 中的结束索引。\\r\\n> * span(group): 返回 (start(group), end(group))。\\r\\n> * expand(template): 将匹配到的分组代入 template 中然后返回。\\r\\n\\r\\n```python\\r\\nimport re\\r\\n\\r\\npattern = re.compile(r\'(\\\\w+) (\\\\w+) (?P<word>.*)\')\\r\\n\\r\\nmatch = pattern.match(\'My website is 痛点就是起点.win.\')\\r\\n\\r\\nprint(\'match.string:\' + match.string)\\r\\nprint(\'match.re:\', match.re)\\r\\nprint(\'match.pos:\', match.pos)\\r\\nprint(\'match.endpos:\', match.endpos)\\r\\nprint(\'match.lastindex:\', match.lastindex)\\r\\nprint(\'match.lastgroup:\', match.lastgroup)\\r\\nprint(\'match.group(1,2):\', match.group(1, 2))\\r\\nprint(\'match.groups():\', match.groups())\\r\\nprint(\'match.groupdict():\', match.groupdict())\\r\\nprint(\'match.start(2):\', match.start(2))\\r\\nprint(\'match.end(2):\', match.end(2))\\r\\nprint(\'match.span(2):\', match.span(2))\\r\\nprint(\\"match.expand(r\'\\\\2 \\\\1 \\\\3\'):\\", match.expand(r\'\\\\2 \\\\1 \\\\3\')\\r\\n```\\r\\n\\r\\n![](images/2018/August/Screenshot%20from%202018-08-08%2013-38-48.png)\\r\\n","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},"6480e3043c6ee88069a16e9e0f98dbf58835f47d8bb34ded5808f12b8a6ef67c":{"title":"正则表达式","hash":"6480e3043c6ee88069a16e9e0f98dbf58835f47d8bb34ded5808f12b8a6ef67c","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"正则"}],"create":"2018-08-07","update":"2018-08-07","content":"正则表达式是由普通字符以及特殊字符（称为“元字符”）组成的文字模式，可以作为模板，用来描述在搜索文本时要匹配的一个或多个字符串。\\r\\n\\r\\n### 常见元字符\\r\\n元字符主要作用有：用来匹配字符、用来匹配位置、用来匹配数量和用来匹配模式。常见的元字符如下表所示。\\r\\n\\r\\n| 元字符\\t | 含义 |\\r\\n| ------ | ------ |\\r\\n| . | 匹配除换行符以外的任意字符 |\\r\\n| \\\\b | 匹配单词的开始或结束\\t|\\r\\n| \\\\d | 匹配数字\\t|\\r\\n| \\\\w | 匹配字母、数字、下划线和汉子 |\\r\\n| \\\\s | 匹配任意空白符，包括空格、制表符、换行符、中午全角空格 |\\r\\n| ^ | 匹配字符串的开始 |\\r\\n| $ | 匹配字符串的结束 |\\r\\n\\r\\n### 字符转义\\r\\n如果需要匹配元字符本身，我们需要用到字符转义来实现，使用 “\\\\” 来取消元字符的特殊含义。\\r\\n\\r\\n> 例如，需求是匹配 `https://yhw-miracle.cn/` 这个网址时，正则表达式可以写成 `https://yhw-miracle\\\\.win/`。\\r\\n\\r\\n### 重复\\r\\n正则表达式中用于匹配重复的字符串，可以使用限定符描述，简化正则表达式的书写。\\r\\n\\r\\n| 限定符 | 含义 |\\r\\n| ------ | ------ |\\r\\n| * | 重复零次或更多次 |\\r\\n| + | 重复一次或更多次 |\\r\\n| ? | 重复零次或一次 |\\r\\n| {n} | 重复 n 次 |\\r\\n| {n,} | 重复 n 次或更多次 |\\r\\n| {n,m} | 重复 n 到 m 次 |\\r\\n\\r\\n### 字符集合\\r\\n如果需求是匹配没有预定义元字符的字符集合，例如需求是匹配 a,b,c,d,e 中任意一个字符，可以使用自定义字符集合。正则表达式支持自定义字符集合，用 [] 来实现自定义字符集合，中括号内写要匹配的自定义字符集合。对于上述需求，可以使用 [abcde] 来匹配待定字符串。\\r\\n\\r\\n中括号内不仅可以写自定义的字符集合，还可以指定自定义字符范围，例如 [0-9] 与 “\\\\d” 是等价的，[a-z0-9A-Z_] 与 “\\\\w” 是等价的（英文情况下）。\\r\\n\\r\\n### 分支条件\\r\\n正则表达式支持多种匹配规则，满足任意一种规则都是匹配成功，这叫作分支条件，用 “|” 把不同匹配规则分隔开即可。\\r\\n\\r\\n> 例如匹配 7－11 位 QQ 号，可以利用分支条件。\\r\\n> 正则表达式为：[1-9]\\\\d{6} | [1-9]\\\\d{7} | [1-9]\\\\d{9} | [1-9]\\\\d{9} | [1-9]\\\\d{10}\\r\\n\\r\\n### 分组\\r\\n对于有规律的字符串，我们可以将其分组，分组每一组，从而写出可以匹配的正则表达式。\\r\\n\\r\\n> 需求：匹配 IP 地址。\\r\\n> 分析：IP 地址可以分为四组，以 . 分隔开，每一组数字不能大于 255。\\r\\n> 正则表达式：((25[0-5] | 2[0-4]\\\\d | [0-1]\\\\d{2} | [1-9]?\\\\d).){3}(25[0-5] | 2[0-4]\\\\d | [0-1]\\\\d{2} | [1-9]?\\\\d).)\\r\\n\\r\\n正则表达式中使用小括号指定的表达式为一个分组，默认情况下，每一个分组自动有一个组号，从左到右，以分组的左括号为标志，第一个出现的分组组号为 1，第二个出现是分组组号为 2，以此类推。正则表达式可以利用分组号引用前面组的表达式，这叫做后向引用，简化正则表达式的书写。\\r\\n\\r\\n对于分组，我们也可以自定义分组名，利用自定义分组名引用相应的分组。语法为：(?\\\\d+) 或 (?”group”\\\\d+)，这样就把 “\\\\d+” 的组名定义为 “group” 了。如果要引用这个分组的内容，可以使用 \\\\k 来实现。常见的分组形式如下表所示。\\r\\n\\r\\n| 分类 | 语法 | 含义 |\\r\\n| ------ | ------ | ------ |\\r\\n| 捕获 | (exp) | 匹配 exp，并捕获文本到自动命名的组里 |\\r\\n| 捕获 | (?exp) or (?”name”exp) | 匹配 exp，并捕获文本到名称为 name 的组里 |\\r\\n| 捕获 | (?:exp) | 匹配 exp，不捕获匹配的文本，也不给此分组分配组号 |\\r\\n| 零宽断言 | (?=exp) | 匹配 exp 前面的位置 |\\r\\n| 零宽断言 | (?<=exp) | 匹配 exp 后面的位置 |\\r\\n| 零宽断言 | (?!exp) | 匹配后面跟的不是 exp　位置 |\\r\\n| 零宽断言 | (?<!exp) | 匹配前面不是 exp 位置 |\\r\\n| 注释 | (?#comment) | 提供注释 |\\r\\n\\r\\n### 反义\\r\\n如果需求是匹配除了某一类字符集合之外的字符，这时候可以使用反义来实现。\\r\\n\\r\\n| 反义 | 含义 |\\r\\n| ------ | ------ |\\r\\n| \\\\W | 匹配任意不是字母、数字、下划线、汉子的字符 |\\r\\n| \\\\S | 匹配任意不是空白符和字符 |\\r\\n| \\\\D | 匹配任意不是非数字的字符 |\\r\\n| \\\\B | 匹配不是单词开头或结束的位置 |\\r\\n| [^a] | 匹配除了 a 之外的任意字符 |\\r\\n| [^abcde] | 匹配除了 a、b、c、d、e 这几个字母之外的任意字符 |\\r\\n| [^(123 ｜ abc)] | 匹配除了 1、2、3 或者 a、b、c 这几个字符之外的任意字符 |\\r\\n\\r\\n### 贪婪与懒惰\\r\\n正则表达式中包含能接受重复的限定符时，通常情况是匹配尽可能多的字符，这是贪婪模式。有时，需求不希望匹配尽可能多的字符，这时可以使用懒惰模式，就是尽可能少的匹配字符，使用 “?” 启用懒惰模式。\\r\\n\\r\\n| 懒惰限定符 | 含义 |\\r\\n| ------ | ------ |\\r\\n| *? | 重复任意次，但尽可能少重复 |\\r\\n| +? | 重复 1 次或更多次，但尽可能少重复 |\\r\\n| ?? | 重复 0 次或 1 次，但尽可能少重复 |\\r\\n| {n,m}? | 重复 n 到 m 次，但尽可能少重复 |\\r\\n| {n,}? | 重复 n 次以上，但尽可能少重复 |\\r\\n\\r\\n### 处理选项\\r\\n\\r\\n| 处理选项 | 含义 |\\r\\n| ------ | ------ |\\r\\n| 忽略大小写 | 匹配时不区分大小写 |\\r\\n| 多行模式 | 更改 “^” 和 “$” 的含义，使得它们在任意一行的行首和行尾进行匹配 |\\r\\n| 单行模式 | 更改 “.” 的含义，使得它与任意字符匹配，包括换行符 |\\r\\n| 忽略空白 | 忽略表达式中非转义空白并启用有 “#” 标记的注释 |\\r\\n| 显示捕获 | 仅捕获已被显示命名的分组 |\\r\\n","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},"f13530d0feb23c9470656fd14367156ac309c9aaaca689ba0da11654d11d60c4":{"title":"Python 实现 HTTP 请求","hash":"f13530d0feb23c9470656fd14367156ac309c9aaaca689ba0da11654d11d60c4","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"HTTP"}],"create":"2018-08-06","update":"2018-08-06","content":"python　中实现 HTTP 请求有三种方式，分别为 urllib2/urllib、httplib/urllib 和 Requests。\\r\\n\\r\\n### urllib2/urllib\\r\\n#### 基本请求和响应模型\\r\\nurllib2 和 urllib 是 Python 中的两个内置模块，实现 HTTP 请求时，以 urllib2 为主，urllib　为辅。urllib2 模块提供了 urliopen() 方法，可以向指定的 URL 发出请求来获取数据。\\r\\n\\r\\n```python\\r\\n# coding:utf-8\\r\\n\\r\\nimport urllib2\\r\\n\\r\\n# 请求\\r\\nrequest = urllib2.Request(\'http://www.baidu.com\')\\r\\n\\r\\n# 响应\\r\\nresponse = urllib2.urlopen(request)\\r\\n\\r\\nprint response.read()\\r\\n```\\r\\n\\r\\n#### 请求头 headers 处理\\r\\n请求头信息可以直接与 URL 一起放到 Requset() 方法里，也可以使用 add_header() 方法添加请求头信息。\\r\\n\\r\\n```python\\r\\n# coding:utf-8\\r\\n\\r\\nimport urllib2\\r\\nimport urllib\\r\\n\\r\\nurl = \\"https://github.com/login\\"\\r\\nuserAgent = \'Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)\'\\r\\nreferer = \'https://github.com\'\\r\\npostData = {\'username\': \'111\', \'passowrd\': \'222\'}\\r\\n\\r\\n# 将 userAgent, referer 写入头信息\\r\\nheaders = {\'User-Agent\': userAgent, \'Referer\': referer}\\r\\n\\r\\ndata = urllib.urlencode(postData)\\r\\nrequest = urllib2.Request(url, data, headers)\\r\\n# request.add_header(\'User-Agent\', userAgent)\\r\\n# request.add_header(\'Referer\', referer)\\r\\nresponse = urllib2.urlopen(request)\\r\\nprint response.read()\\r\\n```\\r\\n\\r\\n#### Cookie 处理\\r\\nurllib2 对 Cookie 的处理是自动的，使用 CookieJar 函数进行 Cookie 的管理。我们也可以通过设置请求头中的 Cookie 域来自定义添加 Cookie 的内容。\\r\\n\\r\\n```python\\r\\n# coding:utf-8\\r\\n\\r\\nimport urllib2\\r\\nimport cookielib\\r\\n\\r\\ncookie = cookielib.CookieJar()\\r\\nopener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cookie))\\r\\nresponse = opener.open(\'http://www.baidu.com\')\\r\\nfor item in cookie:\\r\\n    print item.name + \':\' + item.value\\r\\n```\\r\\n\\r\\n```python\\r\\n# coding:utf-8\\r\\n\\r\\nimport urllib2\\r\\nimport cookielib\\r\\n\\r\\ncookie = cookielib.CookieJar()\\r\\nopener = urllib2.build_opener()\\r\\nopener.addheaders.append((\'cookie\', \'email=\'+\\"xxx@163.com\\"))\\r\\nrequest = urllib2.Request(\'http://www.baidu.com\')\\r\\nresponse = opener.open(request)\\r\\nprint response.headers\\r\\nprint response.read()\\r\\n```\\r\\n\\r\\n#### 设置超时处理的三种方法\\r\\n在 python2.6 之前的版本，urllib2 的 API 并没有 Timeout 的设置，要设置 Timeout 值，只能通过设置 Socket 的全局 Timeout 值实现。而在 python2.6 及新的版本中，urlopen() 函数提供了对 Timeout 的设置。\\r\\n\\r\\n```python\\r\\n# coding:utf-8\\r\\n\\r\\nimport urllib2\\r\\nimport socket\\r\\n\\r\\n# way 1\\r\\nsocket.setdefaulttimeout(10)\\r\\n\\r\\n# way 2\\r\\nurllib2.socket.setdefaulttimeout(10)\\r\\n\\r\\n# way 3\\r\\nrequest = urllib2.Request(\'http://www.baidu.com\')\\r\\nresponse = urllib2.urlopen(request, timeout=2)\\r\\nprint response.read()\\r\\n```\\r\\n\\r\\n#### 获取 HTTP 响应码\\r\\n对于 200 OK 来说，urlopen() 方法返回的 response 对象的 getcode() 方法可以得到该 HTTP 响应码，但是对于其他类型的响应码，urlopen() 方法会抛出异常，这样需要通过异常对象来获取响应码。\\r\\n\\r\\n```python\\r\\n# coding:utf-8\\r\\n\\r\\nimport urllib2\\r\\n\\r\\nresponse = urllib2.urlopen(\'http://www.baidu.com\')\\r\\nprint response.getcode()\\r\\n\\r\\ntry:\\r\\n    response = urllib2.urlopen(\'http://www.google.com\', timeout=10)\\r\\n    print response\\r\\nexcept urllib2.HTTPError as e:\\r\\n    if hasattr(e, \'code\'):\\r\\n        print \'Error code:\', e.code\\r\\n```\\r\\n\\r\\n#### 重定向\\r\\nurllib2 默认情况下会针对 HTTP 3XX 返回码自动进行重定向动作。要检测是否发生了重定向动作，只要检查一些 Response 的 URL 和 Resquest 的 URL 是否一致就可以了。\\r\\n\\r\\n```python\\r\\n# coding:utf-8\\r\\n\\r\\nimport urllib2\\r\\n\\r\\nresponse = urllib2.urlopen(\'http://www.zhihu.com\')\\r\\nisRedirected = response.geturl() == \'http://www.zhihu.com\'\\r\\nprint isRedirected\\r\\n```\\r\\n\\r\\n如果不想自动重定向，可以自定义 HTTPRedirectHandler 类实现。\\r\\n\\r\\n```python\\r\\n# coding:utf-8\\r\\n\\r\\nimport urllib2\\r\\n\\r\\n\\r\\nclass RedirectHandler(urllib2.HTTPRedirectHandler):\\r\\n    def http_error_301(self, req, fp, code, msg, headers):\\r\\n        pass\\r\\n\\r\\n    def http_error_302(self, req, fp, code, msg, headers):\\r\\n        result = urllib2.HTTPRedirectHandler.http_error_301(self, req, fp, code, msg, headers)\\r\\n        result.status = code\\r\\n        result.newurl = result.geturl()\\r\\n        return result\\r\\n\\r\\n\\r\\nopener = urllib2.build_opener(RedirectHandler)\\r\\nopener.open(\'http://www.zhihu.com\')\\r\\n```\\r\\n\\r\\n#### Proxy 代理\\r\\nurllib2 默认使用环境变量 http_proxy 来设置 HTTP Proxy；也可以使用 ProxyHandler 在程序中动态设置代理。\\r\\n\\r\\n```python\\r\\n# coding:utf-8\\r\\n\\r\\nimport urllib2\\r\\n\\r\\nproxy = urllib2.ProxyHandler({\'http\': \'127.0.0.1:8087\'})\\r\\nopener = urllib2.build_opener([proxy, ])\\r\\nurllib2.install_opener(opener)\\r\\nresponse = urllib2.urlopen(\'http://www.zhihu.com\')\\r\\nprint response.read()\\r\\n```\\r\\n\\r\\n使用 urllib2.install_opener() 方法会全局设置代理，不利于更细粒度的控制，可以使用 opener.open() 代替全局的 urlopen()　方法使用不同的代理。\\r\\n\\r\\n```python\\r\\n# coding:utf-8\\r\\n\\r\\nimport urllib2\\r\\n\\r\\nproxy = urllib2.ProxyHandler({\'http\': \'127.0.0.1:8087\'})\\r\\nopener = urllib2.build_opener(proxy, )\\r\\nresponse = opener.open(\'http://www.zhihu.com\')\\r\\nprint response.read()\\r\\n```\\r\\n\\r\\n### httplib/urllib\\r\\nhttplib 模块是一个底层基础模块，可以了解建立 HTTP 请求的每一步，正常情况下开发用的很少。\\r\\n\\r\\n| 功能 | API |\\r\\n| ------ | ------ |\\r\\n| 创建 HTTPConnection 对象 | httplib.HTTPConnection(host[.port,[strict[,timeout[,source_address]]]]) |\\r\\n| 发送请求 | HTTPConnection.request(method,url[,body[,headers]]) |\\r\\n| 获得响应 | HTTPConnection.getresponse() |\\r\\n| 读取响应信息 | HTTPResponse.read() |\\r\\n| 获取指定请求头信息 | HTTPResponse.getheader(name[,default]) |\\r\\n| 获取响应头，以 (header, value) 元组构成的列表返回 | HTTPResponse.getheaders() |\\r\\n| 获取底层 socket 文件描述符 | HTTPResponse.fileno() |\\r\\n| 获取头内容 | HTTPResponse.msg |\\r\\n| 获取头 http 版本 | HTTPResponse.version |\\r\\n| 获取返回状态码 | HTTPResponse.status |\\r\\n| 获取返回说明 | HTTPResponse.reason |\\r\\n\\r\\n### Requests\\r\\n#### Requests 安装\\r\\nPython 中 Requests 模块实现 HTTP　请求的方式非常简单，操作更加人性化。Requests 库是第三方模块，需要额外安装，其源码开源，位于 [Github](https://github.com/requests/requests) 上。安装 requests 方式有两种：\\r\\n\\r\\n> 1. 直接在 Terminal 上输入命令 pip install requests\\r\\n> 2. 下载 [requests 源码](https://github.com/requests/requests/releases)，然后解压，在 Terminal 中进入解压后的目录，运行 setup.py 文件即可。\\r\\n\\r\\n#### 基本请求和响应模型\\r\\n\\r\\n```python\\r\\n# coding:utf-8\\r\\n\\r\\nimport requests\\r\\n\\r\\n# get 请求\\r\\nreq = requests.get(\'http://www.baidu.com\')\\r\\nprint(req.content)\\r\\n\\r\\n# post 请求\\r\\npostData = {\'key\': \'value\'}\\r\\nreq = requests.post(\'http://www.xxx.com/login\', postData)\\r\\nprint(req.content)\\r\\n\\r\\n# https://zzk.cnblogs.com/s/blogpost?Keywords=blog:qiyeboy&pageindex=1\\r\\n# 处理 ? 后面的参数\\r\\npayload = {\'Keywords\': \'blog:qiyeboy\', \'pageindex\': 1}\\r\\nreq = requests.get(\'https://zzk.cnblogs.com/s/blogpost\', params=payload)\\r\\nprint(req.url)\\r\\n```\\r\\n\\r\\n#### 响应码 code 和请求头 headers 处理\\r\\n```python\\r\\nimport requests\\r\\n\\r\\nreq = requests.get(\'http://www.baidu.com\')\\r\\nif req.status_code == requests.codes.ok:\\r\\n    print(req.status_code)   # 响应码\\r\\n    print(req.headers)   # 响应头\\r\\n    print(req.headers.get(\'content-type\'))\\r\\n    print(req.headers[\'content-type\'])\\r\\nelse:\\r\\n    req.raise_for_status()\\r\\n```\\r\\n\\r\\n#### Cookie 处理\\r\\n```python\\r\\nimport requests\\r\\n\\r\\nuserAgent = \'Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)\'\\r\\nheaders = {\'User-Agent\': userAgent}\\r\\nreq = requests.get(\'http://www.baidu.com\', headers=headers)\\r\\nfor cookie in req.cookies.keys():\\r\\n    print(cookie + \':\' + req.cookies.get(cookie))\\r\\n\\r\\nuserAgent = \'Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)\'\\r\\nheaders = {\'User-Agent\': userAgent}\\r\\ncookies = dict(name=\'qiye\', age=\'10\')\\r\\n# 发送 cookie\\r\\nreq = requests.get(\'http://www.baidu.com\', headers=headers, cookies=cookies)\\r\\n\\r\\nloginUrl = \'http://www.xxx.com/login\'\\r\\ns = requests.session()\\r\\n# 首先访问登录页面，作为游客，服务器会先分配一个 cookie\\r\\nreq = s.get(loginUrl, allow_redirects=True)\\r\\ndatas = {\'name\': \'qiye\', \'passwd\': \'qiye\'}\\r\\n# 向登录链接发送 post 请求，验证成功，游客权限转为会员权限\\r\\nreq = s.post(loginUrl, data=datas, allow_redirects=True)\\r\\nprint(req.text)\\r\\n```\\r\\n\\r\\n#### 重定向与历史信息\\r\\n```python\\r\\nimport requests\\r\\n\\r\\n# allow_redirects=True 允许重定向，默认允许\\r\\n# requests.get(\'\', allow_redirects=True)\\r\\nreq = requests.get(\'http://github.com\')\\r\\nprint(req.url)\\r\\nprint(req.status_code)\\r\\nprint(req.history)\\r\\n```\\r\\n\\r\\n#### 超时设置\\r\\n```python\\r\\nimport requests\\r\\n\\r\\nprint(requests.get(\'http://www.google.com\', timeout=5).content)\\r\\n```\\r\\n\\r\\n#### 代理设置\\r\\n```python\\r\\nimport requests\\r\\n\\r\\nproxies = {\\r\\n    \\"http\\": \\"http://0.10.1.10:3128\\",\\r\\n    \\"https\\": \\"http://10.10.1.10:1080\\",\\r\\n}\\r\\nrequests.get(\'http://example.org\', proxies=proxies)\\r\\n```\\r\\n\\r\\n","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},"bfded87b556188c85172378eb4518f047f6b69fb88452c33d3c2ee8d1188d906":{"title":"学一点 XPath","hash":"bfded87b556188c85172378eb4518f047f6b69fb88452c33d3c2ee8d1188d906","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"XPath"}],"create":"2018-08-05","update":"2018-08-05","content":"XPath 是一门在 XML 文档中查找信息的语言，用于在 XML 文档中通过元素和属性进行导航。XPath 虽然被设计用来搜索 XML 文档，不过它也能很好地在 HTML 文档中工作，大部分浏览器都支持通过 XPath 来查询节点。XPath 叫做 path，说明它是以路径表达式的形式来搜索元素的，这种路径表达式与我们计算机系统上的文件系统路径表达很类似。接下来，我从节点、语法、轴和运算符这四个部分来学习 XPath 在 XML 文档中的使用。\\r\\n\\r\\n### XPath 节点\\r\\n在 XPath 中，XML 文档是被看作节点树，有七种类型的节点：元素、属性、文本、命名空间、处理指令、注释和文档（根）节点。\\r\\n\\r\\n在 XML 文档中，XPath 表示各节点的关系有：父 (Parent)、子 (Children)、同胞 (Sibling)、先辈 (Ancestor)、后代 (Descendant)。\\r\\n\\r\\n### XPath 语法\\r\\n#### 路径表达式\\r\\nXPath 使用路径表达式来选取　XML 文档中的节点或节点集，节点是沿着路径 (path) 或者步 (steps) 来选取的。路径表达式语法规则如下表所示。\\r\\n\\r\\n| 表达式 | 描述 |\\r\\n| ------ | ------ |\\r\\n| nodename | 选取此节点的所有子节点 |\\r\\n| / | 从根节点选取 |\\r\\n| // | 选择任意位置的某个节点 |\\r\\n| . | 选取当前节点 |\\r\\n| .. | 选取当前节点的父节点 |\\r\\n| @ | 选取属性| \\r\\n\\r\\n路径表达式中绝对路径、相对路径和步的概念如下所示。\\r\\n\\r\\n> * 绝对路径起始于正斜杠 (/)。\\r\\n> * 相对路径可以起始于任何节点。\\r\\n> * 步包括轴、节点测试、零个或多个谓语，用来更深入地选取节点集，语法为：轴名称::节点测试[谓语]\\r\\n\\r\\n#### 谓语\\r\\n路径表达式的实现效果是选取所有符合条件的节点，XPath 还能选取某个特定的节点或者包含一个特定值的节点，这里需要用到谓语，谓语语法是用中括号指定特定的节点。\\r\\n\\r\\n| 表达式 | 描述 |\\r\\n| ------ | ------ |\\r\\n| [index] | 选取某节点的第 index 元素 |\\r\\n| [last()] | 选取某节点的最后一个元素 |\\r\\n| [position()<index] | 选择某节点的前 index 个元素 |\\r\\n| [@name] | 选取包含 name 属性的元素 |\\r\\n| [name>iddex] | 选取属性 name 值大于 index　的元素 |\\r\\n\\r\\n#### 通配符\\r\\nXPath 在进行多节点选取时，可以使用通配符“*”匹配未知元素，使用通配符“|”一次选取多条路径。\\r\\n\\r\\n#### 实例\\r\\n下面以上述 XML 文档为例，通过 XPath 选取元素，演示 XPath 的语法。\\r\\n\\r\\n```xml\\r\\n<?xml version=\\"1.0\\" encoding=\\"UTF-8\\" ?>\\r\\n<classroom>\\r\\n    <student>\\r\\n        <id>10001</id>\\r\\n        <name lang=\\"zh-CN\\">Tom</name>\\r\\n        <age>22</age>\\r\\n        <sex>male</sex>\\r\\n    </student>\\r\\n    <student>\\r\\n        <id>10002</id>\\r\\n        <name lang=\\"zh-CN\\">Jack</name>\\r\\n        <age>21</age>\\r\\n        <sex>female</sex>\\r\\n    </student>\\r\\n</classroom>\\r\\n```\\r\\n\\r\\n| 实现效果 | 路径表达式 |\\r\\n| ------ | ------ |\\r\\n| 选取 classroom 元素所有子节点 | classroom |\\r\\n| 选取根元素 classroom | /classroom |\\r\\n| 选取元素 classroom 的子元素的所有 student 元素 |\\tclassroom/student |\\r\\n| 选取元素 student |\\t//student |\\r\\n| 选取元素 classroom 的后代 student 元素 |\\tclassroom//studetn |\\r\\n| 选取名为 zh-CN 所有属性 | //@lang |\\r\\n| 选取元素 classroom 的第 1 个 student 子元素 | classroom/student[1] |\\r\\n| 选取元素 name，且有值为　zh-CN 的 lang 属性 | //name[@lang=’zh-CN’] |\\r\\n| 选取元素 classroom 的所有子元素\\t | classroom/* |\\r\\n| 选取文档中所有元素 | //* |\\r\\n| 选取所有带有属性的 name 元素 | //name[@*] |\\r\\n| 选取元素 student 的所有 name 元素和 age 元素 | //student/name ｜ //student/age |\\r\\n\\r\\n### XPath 轴\\r\\n轴定义了所选节点与当前节点之间的树关系，XPath 中使用到的节点集如下表所示。\\r\\n\\r\\n| 轴\\t | 含义 |\\r\\n| ------ | ------ |\\r\\n| child | 选取当前节点的所有子元素 |\\r\\n| parent | 选取当前节点的父节点 |\\r\\n| ancestor | 选取当前节点的所有先辈节点 |\\r\\n| ancestor-or-self | 选取当前节点的所有先辈节点以及当前节点本身 |\\r\\n| descendant | 选取当前节点的所有后代元素 |\\r\\n| descendant-or-self | 选取当前节点的所有后代元素以及当前节点本身 |\\r\\n| preceding | 选取文档中当前节点的开始标记之前的所有节点 |\\r\\n| following | 选取文档中当前节点的结束标记之后的所有节点 |\\r\\n| preceding-sibling | 选取当前节点之前的所有同级节点 |\\r\\n| following-sibling | 选取当前节点之后的所有同级节点 |\\r\\n| self | 选取当前节点 |\\r\\n| attribute | 选取当前节点的所有属性 |\\r\\n| namespace | 选取当前节点的所有命名空间节点 |\\r\\n\\r\\n### XPath 运算符\\r\\nXPath 表达式可以返回节点集、字符串、逻辑值和数字，表达式中可以使用运算符进行连接，运算符如下表所示。\\r\\n\\r\\n| 运算符 | 含义 |\\r\\n| ------ | ------ |\\r\\n| ｜ | 计算两个节点集 |\\r\\n| + | 加法 |\\r\\n| - | 减法 |\\r\\n| * | 乘法 |\\r\\n| div | 除法 |\\r\\n| = | 等于 |\\r\\n| != | 不等于 |\\r\\n| < | 小于 |\\r\\n| <= | 小于等于 |\\r\\n| > | 大于 |\\r\\n| >= | 大于等于 |\\r\\n| or | 或 |\\r\\n| and | 与 |\\r\\n| mod | 取余 |\\r\\n\\r\\n","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},"33b458c1145416dc092dda4ea9ca96a3a6d5975ae01a7e15e136c1086ffa703d":{"title":"网络编程","hash":"33b458c1145416dc092dda4ea9ca96a3a6d5975ae01a7e15e136c1086ffa703d","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"Python"},{"name":"网络编程"},{"name":"TCP"},{"name":"UDP"}],"create":"2018-08-04","update":"2018-08-04","content":"### Socket\\r\\n提及网络编程，就不得不提　Socket(套接字) 概念。Socket 是网络编程中的一个抽象概念，通常我们用一个 Socket 表示“打开一个网络链接”，把打开链接的目标计算机的 IP 地址和端口号，以及协议类型等信息存储到 Socket 里。\\r\\n\\r\\npython 进行网络编程时，实际上是　python 程序本身的进程连接到服务器进程的通信端口进行通信，可以看作是两个进程间的通信。python 提供了两个基本的　Socket 模块实现网络编程，分别为 Socket 和 SocketServer。\\r\\n\\r\\n> * Socket 提供了标准的 BSD Sockets API。\\r\\n> * SocketServer 提供了服务器中心类，可以简化网络服务器的开发。\\r\\n\\r\\n#### Socket 类型\\r\\nSocket 格式为：socket(family, type[,protocal])，需要给定地址族、套接字类型、协议编号来创建　Socket。\\r\\n\\r\\n| Socket类型 | 描述 |\\r\\n| ------ | ------ |\\r\\n| socket.AF_UNIX | 只能用于单一的 Unix 系统进程间通信 |\\r\\n| socket.AF_INET | 服务器之间网络通信 |\\r\\n| socket.AF_INET6 | 服务器之间 IPv6 网络通信 |\\r\\n| socket.SOCK_STREAM | 流式 socket，用于 TCP |\\r\\n| socket.SOCK_DGRAM | 数据报式 socket，用于 UDP |\\r\\n| socket.SOCK_RAM | 原始套接字，普通的套接字无法处理 ICMP、IGMP　等网络报文，而 SOCK_RAM 可以；其次，SOCK_RAM 也可以处理特殊的 IPv4 报文；此外，利用原始套接字，可以通过 IP_HDRINCL 套接字选项由用户构造 IP 头 |\\r\\n| socket.SOCK_SEQPACKET | 可靠的连续数据报服务 |\\r\\n| 创建 TCP Socket | socket(socket.AF_INET, socket.SOCK_STREAM) |\\r\\n| 创建 UDP Socket | socket(socket.AF_INET, socket.SOCK_DGRAM) |\\r\\n\\r\\n#### Socket 函数\\r\\n服务器 Socket 函数：\\r\\n\\r\\n| Socket 函数 | 描述 |\\r\\n| ------ | ------ |\\r\\n| s.bind(address) | 将套接字绑定到地址，在 AF_INET 下，以元祖 (host, port) 的形式表示地址 |\\r\\n| s.listen(backlog) | 开始监听 TCP 传入连接。backlog 指定在拒绝连接之前，操作系统可以挂起的最大的连接数量。该值最小为１，大部分情况设为５就可以了 |\\r\\n| s.accept() | 接受 TCP 连接并返回 (conn, address) ，其中 conn 是新的套接字对象，可以用来接收和发送数据；address 是连接客户端的地址 |\\r\\n　\\r\\n客户端 Socket 函数：\\r\\n\\r\\n| Socket 函数 | 描述 |\\r\\n| ------ | ------ |\\r\\n| s.connect(address) | 连接到 address 处的套接字。一般 address 的格式为元祖 (host, port) ，如果连接出错，返回 socket.error 错误 |\\r\\n| s.connect_ex(address) | 功能与 connect(address) 相同，但是连接成功返回 0，连接失败返回 errno 的值 |\\r\\n\\r\\n公共 Socket 函数：\\r\\n\\r\\n| Socket 函数 | 描述 |\\r\\n| ------ | ------ |\\r\\n| s.recv(bufsize[,flag]) | 接收 TCP 套接字数据，数据以字符串形式返回 |\\r\\n| s.send(string[,flag]) | 发送 TCP 套接字数据，返回发送数据的字节数 |\\r\\n| s.sendall(string[,flag]) | 完整发送 TCP 套接字数据，成功返回 None，失败抛出异常 |\\r\\n| s.recvfrom(bufsize[,flag]) | 接收 UDP 套接字数据，返回 (data, address) |\\r\\n| s.sendto(string[,flag],address) | 发送 UDP 套接字数据，返回发送数据的字节数 |\\r\\n\\r\\n还有一些公共 Socket 函数，如：s.close()，s.getpeername()，s.getsockname()，s.setsockopt(level, optname, value)，s.getsockopt(level, optname[,buflen])，s.settimeout(timeout)，s.setblocking(flag)　等，这些函数一般可以见名知意，且使用频率较低，如果需要了解，都可以查询 API 获得。\\r\\n\\r\\n### TCP 编程\\r\\nTCP 是一种面向连接的通信方式，连接可靠，通信双方以流的形式发送数据。主动发起连接的是客户端，被动响应的是服务端。服务端程序编写步骤如下。\\r\\n\\r\\n> 1. 创建　Socket，绑定 Socket 到本地 IP 与端口。\\r\\n> 2. 开始监听连接。\\r\\n> 3. 进入循环，不断连接客户端的连接请求。\\r\\n> 4. 接收传来的数据，并发送给对方数据（一般为确认收到）。\\r\\n> 5. 传输完毕后，关闭 Socket。\\r\\n\\r\\n```python\\r\\n# coding:utf-8\\r\\nimport socket, threading, time\\r\\n\\r\\n\\r\\ndef dealClient(sock, addr):\\r\\n    # 第四步： 接收传来的数据，并发送给对方数据\\r\\n    print(\'Accept new connection from %s:%s\' % addr)\\r\\n    sock.send(b\'Hello,I am server!\')\\r\\n    while True:\\r\\n        data = sock.recv(1024)\\r\\n        time.sleep(1)\\r\\n        if not data or data.decode(\'utf-8\') == \'exit\':\\r\\n            break\\r\\n        print(\'--- > %s !\' % data.decode(\'utf-8\'))\\r\\n        sock.send((\'Loop_msg: %s!\' % data.decode(\'utf-8\')).encode(\'utf-8\'))\\r\\n\\r\\n    # 第五步： 关闭 Socket\\r\\n    sock.close()\\r\\n    print(\'Connection from %s:%s\' % addr)\\r\\n\\r\\n\\r\\nif __name__ == \'__main__\':\\r\\n    # 第一步： 创建一个基于 IPV4 和 TCP 协议的 Socket\\r\\n    # Socket 绑定的 IP(127.0.0.1 为本机 IP)与端口\\r\\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\\r\\n    s.bind((\'127.0.0.1\', 9999))\\r\\n\\r\\n    # 第二步： 监听链接\\r\\n    s.listen(5)\\r\\n    print(\'waiting for connection ...\')\\r\\n    while True:\\r\\n        # 第三步： 接收一个新连接\\r\\n        sock, addr = s.accept()\\r\\n        t = threading.Thread(target=dealClient, args=(sock, addr))\\r\\n        t.start()\\r\\n```\\r\\n\\r\\n接下来，需要编写客户端程序，与服务端程序检修交互。客户端程序编写步骤如下。\\r\\n\\r\\n> 1. 创建　Socket，连接服务器地址。\\r\\n> 2. 连接后发送数据和接收数据。\\r\\n> 3. 传输完毕后，关闭 Socket。\\r\\n\\r\\n```python\\r\\n# coding:utf-8\\r\\nimport socket\\r\\n\\r\\nif __name__ == \'__main__\':\\r\\n    # 初始化 Socket\\r\\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\\r\\n\\r\\n    # 连接目标的 IP 和端口\\r\\n    s.connect((\'127.0.0.1\', 9999))\\r\\n\\r\\n    # 接收消息\\r\\n    print(\'--- > \' + s.recv(1024).decode(\'utf-8\'))\\r\\n\\r\\n    # 发送消息\\r\\n    s.send(b\'Hello,I am client!\')\\r\\n    print(\'--- > \' + s.recv(1024).decode(\'utf-8\'))\\r\\n    s.send(b\'exit\')\\r\\n\\r\\n    # 关闭 Socket\\r\\n    s.close()\\r\\n```\\r\\n\\r\\n![](images/2018/August/Screenshot%20from%202018-08-04%2013-38-59.png)\\r\\n\\r\\n![](images/2018/August/Screenshot%20from%202018-08-04%2013-39-31.png)\\r\\n\\r\\n### UDP 编程\\r\\nUDP 是面向无连接的通信协议，使用 UDP 协议时，无需建立连接，只需知道对方的 IP 地址和端口号，就可以直接发送数据包，并不关心数据能否安全到达目的端。虽然 UDP 传输数据不可靠，没有建立连接的过程，但是 UDP 传输比 TCP 传输速度快，对于传输要求不严格的数据，可以采用 UDP 协议传输，从而提高速度。\\r\\n\\r\\nUDP 服务端程序编写步骤：\\r\\n\\r\\n> 1. 创建 Socket，绑定制定的 IP 地址和端口。\\r\\n> 2. 直接发送数据和接收数据。\\r\\n> 3. 传输完毕后，关闭 Socket。\\r\\n\\r\\n```python\\r\\n# coding:utf-8\\r\\n\\r\\nimport socket\\r\\n\\r\\nif __name__ == \'__main__\':\\r\\n    # 创建 Socket ，绑定指定的 IP 和端口\\r\\n    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\\r\\n    s.bind((\'127.0.0.2\', 9999))\\r\\n    print(\'Bind UDP on 127.0.0.2:9999 ...\')\\r\\n\\r\\n    while True:\\r\\n        # 直接发送数据和接收数据\\r\\n        data, addr = s.recvfrom(1024)\\r\\n        print(\'Received from %s:%s.\' % addr)\\r\\n        s.sendto(b\'Hello, %s!\' % data, addr)\\r\\n```\\r\\n\\r\\nUDP 客户端程序编写步骤：\\r\\n\\r\\n> 1. 创建 Socket。\\r\\n> 2. 直接可以与服务端程序进行数据交互。\\r\\n> 3. 传输完毕后，关闭 Socket。\\r\\n\\r\\n```python\\r\\n# coding:utf-8\\r\\n\\r\\nimport socket\\r\\n\\r\\nif __name__ == \'__main__\':\\r\\n    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\\r\\n    for data in [b\'hello\', b\'world\']:\\r\\n        # 发送数据\\r\\n        s.sendto(data, (\'127.0.0.2\', 9999))\\r\\n        # 接收数据\\r\\n        print(s.recv(1024).decode(\'utf-8\'))\\r\\n    s.close()\\r\\n```\\r\\n\\r\\n![](images/2018/August/Screenshot%20from%202018-08-04%2013-57-52.png)\\r\\n\\r\\n![](images/2018/August/Screenshot%20from%202018-08-04%2013-58-00.png)\\r\\n","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},"c2c695c6631e75c990ce897e3c73aee9df55accb4b3e703004447680e8e9a516":{"title":"分布式进程","hash":"c2c695c6631e75c990ce897e3c73aee9df55accb4b3e703004447680e8e9a516","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"Python"},{"name":"分布式进程"}],"create":"2018-08-03","update":"2018-08-03","content":"分布式进程是指将 Process 进程分布到多台机器上，充分利用多台机器的性能完成复杂的任务。python 中实现分布式进程要用到 multiprocessing 模块，该模块不仅支持多进程，其中 managers 子模块还支持把多进程分布到多台机器上。\\r\\n\\r\\n分布式进程可以用在做爬虫程序中，利用一个服务进程作为调度者，将不同任务分布到其他机器上的进程上，利用网络通信进行管理，提高爬虫程序的效率。下面举例说明分布式进程在爬虫程序中应用。\\r\\n\\r\\n> 需求：以爬取某个网站上所以图片为例\\r\\n\\r\\n> 如果使用多进程，一般是用一个进程负责抓取图片的链接地址，将链接地址放到本地队列中(Queue)，另一个进程负责从队列中读取链接地址并进行下载和存储到本地。\\r\\n\\r\\n> 如果使用分布式进程来完成这一需求，需要一台机器负责抓取链接，将链接地址放到队列中(Queue)，这时候需要将队列共享到网络中，便于其他机器中的进程可以访问到，其他机器上的进程负责读取链接并下载存储。分布式进程就是将这一过程进行了封装，相当于本地队列的网络化。\\r\\n\\r\\n要实现上述需求，可以编写服务进程，负责抓取链接地址，共享到网络队列上；编写任务进程，负责读取网络队列上的链接地址，并下载存储。\\r\\n\\r\\n#### 服务进程编写过程：\\r\\n> 1. 建立队列　Queue，用来进行进程间的通信。服务进程创建任务队列　taskQueue，用来作为传递任务给任务进程的通道；服务进程创建结果队列　resultQueue，作为任务进程完成任务后回复服务进程的通道。在分布式多进程中，需要通过　QueueManager 获得的　Queue 接口来添加任务。\\r\\n> 2. 把第一步创建的队列在网络上注册，共享给其他机器上的进程，注册后获得网络队列，相当于本地队列的映像。\\r\\n> 3. 建立一个对象　(QueueManager(BaseManager))　实例 manager，绑定端口和验证口令。然后，启动该实例，监管信息通道。\\r\\n> 4. 通过管理实例的方法获得网络访问的　Queue 对象，即把网络队列实体化可以使用的本地队列。\\r\\n> 5. 创建任务到本地队列中，自动上传任务到网络队列中，分配给任务进程进行处理。\\r\\n\\r\\n```python\\r\\n# coding:utf-8\\r\\n\\r\\nimport random, time, Queue\\r\\nfrom multiprocessing.managers import BaseManager\\r\\n\\r\\n# 第一步： 建立 taskQueue 和 resultQueue ，用了存放任务和结果\\r\\ntaskQueue = Queue.Queue()\\r\\nresultQueue = Queue.Queue()\\r\\n\\r\\n\\r\\nclass QueueManager(BaseManager):\\r\\n    pass\\r\\n\\r\\n\\r\\nif __name__ == \'__main__\':\\r\\n    # 第二步： 把创建的两个队列注册在网络上，利用 register 方法，callable 参数关联了 Queue 对象\\r\\n    # 将 Queue 对象在网络上暴露\\r\\n    QueueManager.register(\'getTaskQueue\', callable=lambda:taskQueue)\\r\\n    QueueManager.register(\'getResultQueue\', callable=lambda:resultQueue)\\r\\n\\r\\n    # 第三步： 绑定端口 8001，设置验证口令\'痛点就是起点\'（这个相当于对象的初始化）\\r\\n    manager = QueueManager(address=(\'\', 8001), authkey=\'痛点就是起点\')\\r\\n\\r\\n    # 启动管理，监听信息通道\\r\\n    manager.start()\\r\\n\\r\\n    # 第四步： 通过管理实例的方法获得通过网络访问的 Queue 对象\\r\\n    task = manager.getTaskQueue()\\r\\n    result = manager.getResultQueue()\\r\\n\\r\\n    # 第五步： 添加任务\\r\\n    for url in [\'ImageUrl_\' + str(i) for i in range(10)]:\\r\\n        print(\'put task %s ...\' % url)\\r\\n        task.put(url)\\r\\n\\r\\n    # 获取返回的结果\\r\\n    print(\'try get result ...\')\\r\\n    for i in range(10):\\r\\n        print(\'result is %s\' % result.get(timeout=10))\\r\\n\\r\\n    # 关闭管理\\r\\n    manager.shutdown()\\r\\n```\\r\\n\\r\\n#### 任务进程编写过程：\\r\\n> 1. 使用　QueueManager 注册用于获取　Queue 的方法名称，任务进程只能通过名称来获取网络上的 Queue。\\r\\n> 2. 连接服务器，保持端口和验证口令与服务进程一致。\\r\\n> 3. 获取网络上的　Queue，进行本地化。\\r\\n> 4. 从 taskQueue 获取任务，并把结果写入 resultQueue。\\r\\n\\r\\n```python\\r\\n# coding:utf-8\\r\\n\\r\\nimport time\\r\\nfrom multiprocessing.managers import BaseManager\\r\\n\\r\\n\\r\\n# 创建类似的 QueueManager\\r\\nclass QueueManager(BaseManager):\\r\\n    pass\\r\\n\\r\\n\\r\\nif __name__ == \'__main__\':\\r\\n    # 第一步： 使用 QueueManager 注册用于获取 Queue 的方法名称\\r\\n    QueueManager.register(\'getTaskQueue\')\\r\\n    QueueManager.register(\'getResultQueue\')\\r\\n\\r\\n    # 第二步： 连接到服务器\\r\\n    serverAddr = \'127.0.0.1\'\\r\\n    print(\'Connect to server %s ...\' % serverAddr)\\r\\n    # 端口和验证口令注意保持与服务进程完全一致\\r\\n    m = QueueManager(address=(serverAddr, 8001), authkey=\'痛点就是起点\')\\r\\n    m.connect()\\r\\n\\r\\n    # 第三步： 获取 Queue 对象\\r\\n    task = m.getTaskQueue()\\r\\n    result = m.getResultQueue()\\r\\n\\r\\n    # 第四步： 从 task 队列获取任务，并把结果写入到 result 队列\\r\\n    while(not task.empty()):\\r\\n        imageUrl = task.get(True, timeout=5)\\r\\n        print(\'run task download %s ...\' % imageUrl)\\r\\n        time.sleep(1)\\r\\n        result.put(\'%s ---\x3e success\' % imageUrl)\\r\\n\\r\\n    # 处理结束\\r\\n    print(\'worker exit.\')\\r\\n```\\r\\n\\r\\n![](images/2018/August/Screenshot%20from%202018-08-03%2013-31-06.png)\\r\\n\\r\\n![](images/2018/August/Screenshot%20from%202018-08-03%2013-31-15.png)\\r\\n\\r\\n小结：其实这是一个简单但真正的分布式进程，把代码稍加改造，启动多个任务进程，就可以把任务分不到多台机器上，实现大规模的分布式爬虫。\\r\\n","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},"ed97ff22a993cc52d108fbe26d97c2a0a6353315ae69f4d27d407273a28b762c":{"title":"协程","hash":"ed97ff22a993cc52d108fbe26d97c2a0a6353315ae69f4d27d407273a28b762c","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"Python"},{"name":"协程"}],"create":"2018-08-02","update":"2018-08-02","content":"协程(coroutine)，又称微线程，纤程，是一种用户级的轻量级线程。协程拥有自己的寄存器上下文和栈。协程调度切换时，将寄存器上下文和栈保存到其他地方，在切回来的时候，恢复先前保存的寄存器上下文和栈。因此协程能保留上一次调用时的状态，每次过程重入时，就相当于进入上一次调用的状态。在并发编程中，协程与线程类似，每个协程表示一个执行单元，有自己的本地数据，与其他协程共享全局数据和其他资源。\\r\\n\\r\\n协程需要用户自己编写调度逻辑，对于 CPU 来说，协程其实是单线程，CPU 不需要考虑怎么去调度、切换上下文，这样就省去了 CPU 的切换开销，因此协程在一定程度上有好于多线程。\\r\\n\\r\\n### python 实现协程\\r\\n第三方库　gevent 提供了比较完善的协程支持，gevent 是一个基于协程的 python 网络数据库，使用 greenlet 在　libev 事件循环顶部提供了一个有高级别并发性的　API。主要特性有以下几点。\\r\\n\\r\\n> * 基于　libev 的快速事件循环，Linux　上是　epoll 机制。\\r\\n> * 基于　greenlet 的轻量级执行单元。\\r\\n> * API 复用了 python 标准库里的内容。\\r\\n> * 支持 SSL 的协作式　sockets。\\r\\n> * 可通过线程池或　c-ares 实现 DNS 查询。\\r\\n> * 通过　monkey patching 功能使得第三方模块变成协作式。\\r\\n\\r\\ngevent 对协程的支持，本质上是　greenlet 在实现切换工作。greenlet 工作流程如下：假如进行访问网络的　IO 操作，出现阻塞，greenlet 就显式切换到另一段没有阻塞的代码段执行，直到原先的阻塞状况消失以后，再自动切换回原来的代码段继续处理。因此，greenlet 是一种合理安排的串行方式。\\r\\n\\r\\n由于 IO 操作非常耗时，经常使程序处于等待状态，有了　greenlet 自动切换协程，保证总有　greenlet 在运行，而不是等待　IO，这就是协程一般比多线程效率高的原因。由于切换在　IO 操作时自动完成，所以　gevent 需要修改　python 自带的一些标准库，将一些常见的阻塞，如　socket、select 等地方实现协程跳转，这一过程在启动时通过　monkey patch 完成。\\r\\n\\r\\n```python\\r\\nfrom gevent import monkey; monkey.patch_all()\\r\\nimport gevent, urllib2\\r\\n\\r\\n\\r\\ndef run_task(url):\\r\\n    print(\'visit ---\x3e %s\' % url)\\r\\n    try:\\r\\n        response = urllib2.urlopen(url)\\r\\n        data = response.read()\\r\\n        print(\'%d bytes received from %s.\' % (len(data), url))\\r\\n    except Exception, e:\\r\\n        print e\\r\\n\\r\\n\\r\\nif __name__ == \'__main__\':\\r\\n    urls = [\'http://github.com\', \'https://www.python.org\', \'http://痛点就是起点.win\']\\r\\n    greenLets = [gevent.spawn(run_task, url) for url in urls]\\r\\n    gevent.joinall(greenLets)\\r\\n```\\r\\n\\r\\n![](images/2018/August/Screenshot%20from%202018-08-02%2013-12-37.png)\\r\\n\\r\\n以上程序主要使用　gevent 中的　spawn 方法和　joinall 方法。spawn 方法是用来形成协程，joinall 方法是添加这些协程任务，并且启动运行。从结果可以看出，3 个网络操作是并发执行的，运行结束顺序不同，但其实只有一个线程。\\r\\n\\r\\n### 协程池的实现\\r\\ngevent 中还提供了对池的支持。当拥有动态数量的 gevent 需要进行并发管理时，如限制并发数，可以使用池来实现，这在处理大量的网络和　IO 操作时是非常需要的。\\r\\n\\r\\n```python\\r\\nimport urllib2\\r\\nfrom gevent.pool import Pool\\r\\nfrom gevent import monkey\\r\\nmonkey.patch_all()\\r\\n\\r\\n\\r\\ndef run_task(url):\\r\\n    print(\'visit ---\x3e %s\' % url)\\r\\n    try:\\r\\n        print(\'%d bytes received from %s.\' % (len(urllib2.urlopen(url).read()), url))\\r\\n    except Exception, e:\\r\\n        print(e)\\r\\n\\r\\n\\r\\nif __name__ == \'__main__\':\\r\\n    pool = Pool(2)\\r\\n    urls = [\'http://github.com\', \'https://www.python.org\', \'http://痛点就是起点.win\']\\r\\n    pool.map(run_task, urls)\\r\\n```\\r\\n\\r\\n![](images/2018/August/Screenshot%20from%202018-08-02%2013-27-30.png)\\r\\n\\r\\n运行结果可看出，Pool 对象实现了对协程的并发数量管理，代码中规定协程中的池容量为 2，因此程序是先执行前两个任务，当其中一个任务完成是，才会执行第三个任务，达到了限制并发数的目的。\\r\\n","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},"5866bb2a66ecf886bb0cd9d085a0b773c690d148ad6e36ffb5ffc31c3396a931":{"title":"Python 之多线程","hash":"5866bb2a66ecf886bb0cd9d085a0b773c690d148ad6e36ffb5ffc31c3396a931","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"Python"},{"name":"多线程"}],"create":"2018-08-01","update":"2018-08-01","content":"线程是进程中可以同时运行的不同程序，有时被称为轻量进程，是系统独立调度和分派的基本单位。多线程运行有很多优点：\\r\\n\\r\\n> * 可以把运行时间长的任务放到后台去处理。\\r\\n> * 程序的运行速度可能会加快。\\r\\n> * 用户界面可以更加吸引人，比如用户点击了一个按钮去触发某些事件的处理，可以弹出一个进度条来显示处理的进度。\\r\\n> * 在一些需要等待的任务实现上，比如用户输入、文件读写好人网络收发数据等，线程就可以释放一些珍贵的系统资源，避免内存占用。\\r\\n\\r\\n### Python 中线程实现\\r\\npython 中提供了两个模块：thread 和 threading 实现多进程，thread 是低级模块，threading 是高级模块，是对 thread 的封装。在绝大数情况下，我们只需要使用 threading 这个高级模块就能实现多线程。\\r\\n\\r\\n使用 threading 实现多线程有两种方法，一种是把一个函数传入并创建 Thread 实例，然后调用 start 方法开始执行；另一种是直接继承 threading.Thread 类并创建自定义线程类，然后重写 __init__ 方法和 run 方法。下面就分别介绍这两种实现多线程的方法。\\r\\n\\r\\n#### 创建 Thread 实例\\r\\n\\r\\n```python\\r\\nimport random, time, threading\\r\\n\\r\\n\\r\\ndef thread_run(urls):\\r\\n    print(\'Current (%s) is running...\' % threading.current_thread().name)\\r\\n    for url in urls:\\r\\n        print(\'%s ---\x3e %s\' % (threading.current_thread().name, url))\\r\\n        time.sleep(random.random())\\r\\n    print(\'%s ended.\' % threading.current_thread().name)\\r\\n\\r\\n\\r\\nif __name__ == \'__main__\':\\r\\n    print(\'%s is running...\' % threading.current_thread().name)\\r\\n    t1 = threading.Thread(target=thread_run, name=\'Thread1\', args=([\'url1\', \'url2\', \'url3\'],))\\r\\n    t2 = threading.Thread(target=thread_run, name=\'Thread2\', args=([\'url4\', \'url5\', \'url6\'],))\\r\\n\\r\\n    t1.start()\\r\\n    t2.start()\\r\\n    t1.join()\\r\\n    t2.join()\\r\\n\\r\\n    print(\'%s ended.\' % threading.current_thread().name)\\r\\n```\\r\\n\\r\\n![](images/2018/August/Screenshot%20from%202018-08-01%2012-41-20.png)\\r\\n\\r\\n#### 创建自定义线程类\\r\\n\\r\\n```python\\r\\nimport random, threading, time\\r\\n\\r\\n\\r\\nclass MyThread(threading.Thread):\\r\\n    def __init__(self, name, urls):\\r\\n        threading.Thread.__init__(self, name=name)\\r\\n        self.urls = urls\\r\\n\\r\\n    def run(self):\\r\\n        print(\'Current (%s) is running...\' % threading.current_thread().name)\\r\\n        for url in self.urls:\\r\\n            print(\'%s ---\x3e %s\' % (threading.current_thread().name, url))\\r\\n            time.sleep(random.random())\\r\\n        print(\'%s ended.\' % threading.current_thread().name)\\r\\n\\r\\n\\r\\nif __name__ == \'__main__\':\\r\\n    print(\'%s is running...\' % threading.current_thread().name)\\r\\n    t1 = MyThread(name=\'Thread1\', urls=[\'url1\', \'url2\', \'url3\'])\\r\\n    t2 = MyThread(name=\'Thread2\', urls=[\'url4\', \'url5\', \'url6\'])\\r\\n\\r\\n    t1.start()\\r\\n    t2.start()\\r\\n    t1.join()\\r\\n    t2.join()\\r\\n\\r\\n    print(\'%s ended.\' % threading.current_thread().name)\\r\\n```\\r\\n\\r\\n![](images/2018/August/Screenshot%20from%202018-08-01%2012-44-33.png)\\r\\n\\r\\n### 线程同步\\r\\n如果多个线程共同对某个数据修改，则可能会出现不可预料的结果。为了保证数据的正确性，我们需要对多个进行同步。Python 中使用 Thread 对象的 Lock 和 RLock 对象实现简单的线程同步，这两个对象都有 acquire 方法和 release 方法，对于每次只允许一个线程操作的资源，可以将该资源放到 acquire 和 release 方法之间。\\r\\n\\r\\n> 对于 Lock 对象，如果一个线程连续两次进行 acquire 操作，那么由于第一次 acquire 没有 release，第二次 require 将挂起线程，这会导致 Lock 对象永远不会 release，使得线程死锁。\\r\\n\\r\\n> RLock 对象允许一个线程多次对其进行 acquire 操作，因为在其内部通过一个变量 counter 维护线程 acquire 的次数，而且每一次的 acquire 操作必须有一个 release 操作与之对应，在所有的 release 操作完成后，别的线程才能申请该 RLock 对象。\\r\\n\\r\\n```python\\r\\nimport threading, time\\r\\n\\r\\nmyLock = threading.RLock()\\r\\nnum = 0\\r\\n\\r\\n\\r\\nclass MyThread(threading.Thread):\\r\\n    def __init__(self, name):\\r\\n        threading.Thread.__init__(self, name=name)\\r\\n\\r\\n    def run(self):\\r\\n        global num\\r\\n        while True:\\r\\n            myLock.acquire()\\r\\n\\r\\n            print(\'%s locked, number: %d\' % (threading.current_thread().name, num))\\r\\n            if num >= 4:\\r\\n                myLock.release()\\r\\n                print(\'%s released, number: %d\' % (threading.current_thread().name, num))\\r\\n                break\\r\\n            num += 1\\r\\n            print(\'%s released, number: %d\' % (threading.current_thread().name, num))\\r\\n\\r\\n            time.sleep(1)\\r\\n\\r\\n            myLock.release()\\r\\n\\r\\n\\r\\nif __name__ == \'__main__\':\\r\\n    thread1 = MyThread(\'Thread1\')\\r\\n    thread2 = MyThread(\'Thread2\')\\r\\n\\r\\n    thread1.start()\\r\\n    thread2.start()\\r\\n```\\r\\n\\r\\n![](images/2018/August/Screenshot%20from%202018-08-01%2013-03-49.png)\\r\\n\\r\\n### 小结\\r\\n在 python 的原始解释器中存在着 GIL(Global Interpreter Lock，全局解释器锁)，因此在解释执行 python 代码时，会产生互斥锁来限制线程对共享资源的访问，直到解释器遇到 I/O 操作或者操作次数达到一定数目时才会释放 GIL。由于全局解释器锁的存在，在进行多线程操作时，不能调用多个 CPU 内核，只能利用一个内核，所以在进行 CPU 密集型操作的时候，不推荐使用多线程，更倾向于多进程；对于 IO 密集型操作，多线程可以明显提高效率。\\r\\n","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},"d5481e803c02a7aca6a7e5786a1fbc1ccd06a6846ebc3b408e005c0dc9a04a8c":{"title":"Python 之进程","hash":"d5481e803c02a7aca6a7e5786a1fbc1ccd06a6846ebc3b408e005c0dc9a04a8c","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"Python"},{"name":"进程"}],"create":"2018-07-31","update":"2018-07-31","content":"进程（Process）是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，是操作系统结构的基础。为了提高程序运行的效率，python 中提供了多进程机制。 python 实现多进程的方式主要有两种，一种是使用 os 模块中的 fork 方法，另一种是使用 multiprocessing 模块。这两种方法的区别在于前者适用于 Unix/Linux 操作系统，对 Windows 系统不支持，后者则是跨平台的实现方式。\\r\\n\\r\\n### 使用 os 模块中的 fork 方法实现多进程\\r\\npython 的 os 模块封装了常见的系统调用，其中就有 fork 方法。fork 方法来自于 Unix/Linux 操作系统中提供的一个 fork 系统调用，这个方法非常特殊。普通方法都是调用一次，返回一次。而fork 方法是调用一次，返回两次，原因在操作系统将当前系统（父进程）复制出一份进程（子进程），这两个进程几乎完全相同，于是 fork 方法分别在父进程和子进程中返回。子进程中永远返回 0，父进程中返回的是子进程的 ID。具体情况，见如下代码，其中，os 模块中的 getpid 方法用于返回当前进程的 ID，getppid 方法用于获取父进程的 ID。\\r\\n\\r\\n```python\\r\\nimport os\\r\\nif __name__ == \'__main__\':\\r\\n    print \'current Process (%s) start ...\' % (os.getpid())\\r\\n    pid = os.fork()\\r\\n    if pid < 0:\\r\\n        print \'error in fork.\'\\r\\n    elif pid > 0:\\r\\n        print \'I (%s) create a child process (%s)\' % (os.getpid(), pid)\\r\\n    else:\\r\\n        print \'I am child process (%s) and my parent process is (%s)\' % (os.getpid(), os.getppid())\\r\\n```\\r\\n\\r\\n![](images/2018/Screenshot%20from%202018-07-31%2012-32-10.png)\\r\\n\\r\\n### 使用 multiprocessing 模块创建多进程\\r\\nmultiprocessing 模块提供了一个 Process 类来描述进程对象。创建子进程时，只需要传入一个执行函数和函数参数，即可完成一个 Process 实例的创建，用 start() 方法启动进程，用 join() 实现进程间的同步。下面，用一个例子来演示说明。\\r\\n\\r\\n```python\\r\\nimport os\\r\\nfrom multiprocessing import Process\\r\\ndef run_process(name):\\r\\n    print \'Child process %s (%s) Running...\' % (name, os.getpid())\\r\\n\\r\\n\\r\\nif __name__ == \'__main__\':\\r\\n    print \'Parent process %s.\' % os.getpid()\\r\\n    for i in range(5):\\r\\n        p = Process(target=run_process, args=(str(i),))\\r\\n        print \'Process will start.\'\\r\\n        p.start()\\r\\n    p.join()\\r\\n    print \'Process end.\'\\r\\n```\\r\\n\\r\\n![](images/2018/Screenshot%20from%202018-07-31%2012-38-25.png)\\r\\n\\r\\n进程具有并发性，共享性，独立性和异步性，以上代码中子进程输出语句说明了进程的异步性。\\r\\n\\r\\n### multiprocessing 模块提供了 Pool 类来代表进程池对象\\r\\n以上两种创建进程的方法在启动大量子进程时，需要手动限制进程数量，显得太过繁琐，而使用进程池批量创建子进程的方式更加方便。\\r\\n\\r\\nmultiprocessing 模块提供了 Pool 类来代表进程池对象，Pool 类可以提供制定数量的进程供用户调用，默认大小是 CPU 的核数。当有新的请求提交到 Pool 中时，如果进程池还没有满，那么就会创建一个新的进程用来执行该请求；如果进程池中的进程数已经达到规定的最大值，那么该请求就好等待，直到池中有进程结束，才会创建新的进程来处理它。下面，用代码来演示进程池对象。\\r\\n\\r\\n```python\\r\\nfrom multiprocessing import Pool\\r\\nimport os, time, random\\r\\n\\r\\n\\r\\ndef run_task(name):\\r\\n    print \'Task %s (pid = %s) is running...\' % (name, os.getpid())\\r\\n    time.sleep(random.random() * 3)\\r\\n    print \'Task %s end.\' % name\\r\\n\\r\\n\\r\\nif __name__ == \'__main__\':\\r\\n    print \'current process %s.\' % os.getpid()\\r\\n    p = Pool(processes=3)\\r\\n    for i in range(5):\\r\\n        p.apply_async(run_task, args=(i,))\\r\\n    print \'Waiting for all subprocess done...\'\\r\\n    p.close()\\r\\n    p.join()\\r\\n    print \'All subprocess done.\'\\r\\n```\\r\\n\\r\\n![](images/2018/Screenshot%20from%202018-07-31%2012-56-10.png)\\r\\n\\r\\n### 进程间通信\\r\\n操作系统中存在大量进程，那么进程间的通信是必不可少的。python 提供了 Queue 和 Pipe 两张方式实现进程间的通信，两张区别在于，Pipe 常用来在两个进程间通信，Queue 用来在多个进程间实现通信。\\r\\n\\r\\n#### Queue 实现进程通信\\r\\nQueue 是多进程安全的队列，可以使用 Queue 实现多进程间的数据传递，有两个方法 Put 和 Get 可以进行 Queue 操作。\\r\\n\\r\\n> Put 方法用以插入数据到队列中，它还有两个可选数据：blocked 和 timeout。如果 blocked 为 True （默认值），并且 timeout 为正值，该方法会阻塞 timeout 指定的时间，直到该队列有剩余空间；如果超时，会抛出 Queue.Full 异常。如果 blocked 为 False，但该队列以满，会立即抛出 Queue.Full 异常。\\r\\n\\r\\n> Get 方法可以从队列读取并且删除一个元素。Get 方法也有两个可选参数：blocked 和 timeout。如果 blocked 为 True （默认值），并且 timeout 为正值，那么在等待时间内没有取到任何元素，会抛出 Queue.Empty 异常；如果 blocked 为 False，有两张情况：如果队列有元素可以用，则立即会返回该值；否则，如果队列为空，立即抛出 Queue.Empty 异常。\\r\\n\\r\\n下面用代码来演示 Queue 实现进程间通信。\\r\\n\\r\\n```python\\r\\nfrom multiprocessing import Process, Queue\\r\\nimport os, time, random\\r\\n\\r\\n\\r\\ndef process_write(q, urls):\\r\\n    print(\'Process (%s) is writing...\' % os.getpid())\\r\\n    for url in urls:\\r\\n        q.put(url)\\r\\n        print(\'Put %s to queue...\' % url)\\r\\n        time.sleep(random.random())\\r\\n\\r\\n\\r\\ndef process_read(q):\\r\\n    print(\'Process (%s) is reading...\' % os.getpid())\\r\\n    while True:\\r\\n        url = q.get(True)\\r\\n        print(\'Get %s from queue...\' % url)\\r\\n\\r\\n\\r\\nif __name__ == \'__main__\':\\r\\n    q = Queue()\\r\\n    process_write1 = Process(target=process_write, args=(q, [\'url1\', \'url2\', \'url3\']))\\r\\n    process_write2 = Process(target=process_write, args=(q, [\'url4\', \'url5\', \'url6\']))\\r\\n    process_reader = Process(target=process_read, args=(q,))\\r\\n\\r\\n    process_write1.start()\\r\\n    process_write2.start()\\r\\n    process_reader.start()\\r\\n\\r\\n    process_write1.join()\\r\\n    process_write2.join()\\r\\n\\r\\n    process_reader.terminate()\\r\\n```\\r\\n\\r\\n![](images/2018/Screenshot%20from%202018-07-31%2013-20-31.png)\\r\\n\\r\\n#### Pipe 实现进程通信\\r\\nPipe 通常用来在两个进程间进行通信，两个进程分别位于管道的两端。Pipe 方法返回 (conn1, conn2) 代表管道的两端，该方法还有 duplex 参数，如果 duplex 参数为 True （默认值），那么这个管道是全双工模式，也就是管道两端均可以同时接收和返送数据；如果 duplex 参数为 False，conn1 只负责接收消息，conn2 只负责发送消息。\\r\\n\\r\\nsend 和 recv 方法分别是发送和接收消息的方法，如果没有消息可接收，recv 方法会一直阻塞，如果管道关闭，那么 recv 方法会抛出 EOFError。下面通过代码来演示 Pipe 实现进程通信。\\r\\n\\r\\n```python\\r\\nimport multiprocessing, random, os, time\\r\\n\\r\\n\\r\\ndef process_send(pipe, urls):\\r\\n    for url in urls:\\r\\n        print(\'Process (%s) send: %s\' % (os.getpid(), url))\\r\\n        pipe.send(url)\\r\\n        time.sleep(random.random())\\r\\n\\r\\n\\r\\ndef process_recv(pipe):\\r\\n    while True:\\r\\n        print(\'Process (%s) recv: %s\' % (os.getpid(), pipe.recv()))\\r\\n        time.sleep(random.random())\\r\\n\\r\\n\\r\\nif __name__ == \'__main__\':\\r\\n    pipe = multiprocessing.Pipe()\\r\\n    p1 = multiprocessing.Process(target=process_send, args=(pipe[0], [\'url\' + str(i) for i in range(10)]))\\r\\n    p2 = multiprocessing.Process(target=process_recv, args=(pipe[1],))\\r\\n\\r\\n    p1.start()\\r\\n    p2.start()\\r\\n\\r\\n    p1.join()\\r\\n    p2.terminate()\\r\\n```\\r\\n\\r\\n![](images/2018/Screenshot%20from%202018-07-31%2013-34-23.png)\\r\\n","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},"19b5f41b0e8b98b6f2fe3db2131c38d73bbc64a9344159cfeb55ffe1bd9fd940":{"title":"Python 之 IO 编程","hash":"19b5f41b0e8b98b6f2fe3db2131c38d73bbc64a9344159cfeb55ffe1bd9fd940","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"Python"},{"name":"IO编程"}],"create":"2018-07-30","update":"2018-07-30","content":"IO 在计算机中指的是 Input/Output，也就是输入和输出。凡是用到数据交换的地方，都会涉及到 IO 编程。在 IO 编程中，Stream（流）是一种很重要的概念，分为输入流（Input Stream）和输出流（Output Stream）对于流的概念，我们可以这样理解，流相当于一个水管，数据相当于水管中的水，但是只能单向流动，所以数据传输过程中需要架设连个两个水管，一个负责输入，一个负责输出，这样读写就可以实现读写同步了。\\r\\n\\r\\n### 文件读写\\r\\n#### 文件打开\\r\\nPython 内置了读写文件的函数，方便了文件的 IO 操作。在读写文件前，需要打开文件，确定文件的读写模式。打开文件语法如下：\\r\\n\\r\\n```python\\r\\nopen(name[.mode[.buffering]])\\r\\n```\\r\\n\\r\\n其中， open 函数必须要给出文件名参数，模式（mode）和缓冲区（buffering）是可选的，默认模式是读模式，默认缓冲是无，若成功打开文件，会返回一个文件对象；若打开文件失败（文件不存在或文件路径错误等），会产生异常。\\r\\n\\r\\n![](images/2018/Screenshot%20from%202018-07-30%2014-00-41.png)\\r\\n___\\r\\n![](images/2018/Screenshot%20from%202018-07-30%2014-01-20.png)\\r\\n\\r\\n#### 文件模式\\r\\nopen 函数中 mode 参数可以实现对文件不同的操作。其中，mode 参数具体值如下表所示。\\r\\n\\r\\n| 值\\t | 功能 |\\r\\n| ------ | ------ |\\r\\n| ‘r’ | 读模式 |\\r\\n| ‘w’ | 写模式 |\\r\\n| ‘a’ | 追加模式 |\\r\\n| ‘b’ | 二进制模式 |\\r\\n| ‘+’ | 读/写模式 |\\r\\n\\r\\n这里，需要注意以下几点：\\r\\n\\r\\n1. 一般在处理一些二进制文件（如，音频，视频，图像文件），需要在模式参数上加上 ‘b’；\\r\\n2. 模式 ‘b’ 和 ‘+’ 可以和其他模式共同使用，如，’rb’ 表示读取一个二进制文件；\\r\\n3. ‘w’ 模式在写文件时，每运行一次程序，会从头开始写；而 ‘a’ 模式可以以追加的方式每次默认在文件末尾进行读或写文件。\\r\\n\\r\\n#### 文件缓冲区\\r\\nopen 函数中 buffering 参数控制着文件的缓冲。如果该参数为 0，IO 操作就是无缓冲，数据是直接写到硬盘上；若果该参数是 1，IO 操作是有缓冲的，数据先写到内存里（缓冲区里），只有使用 flush 函数或者 close 函数，数据才会更新到磁盘。\\r\\n\\r\\n如果该参数是大于 1 的数字，代表缓冲区的大小（单位为字节），-1 （或者其他任何负数）代表使用默认缓冲区的大小。\\r\\n\\r\\n#### 文件读取\\r\\n文件读取主要分为按字节读取和按行读取，先利用 f=open(‘’) 打开文件，如果成功打开文件；接下来利用 f.read() 就可以读取文件了，将文件内容以 str 类型返回；最后需要利用 f.close() 关闭文件。文件使用完毕必须关闭，因为文件对象会占用操作系统资源，影响系统的 IO 操作。\\r\\n\\r\\n由于文件操作过程中可能会出现 IO 异常，一旦出现 IO 异常，后面的 close() 方法就不会调用。为了保证程序的健壮性，我们可以使用 try—except—finally 来实现。\\r\\n\\r\\n```python\\r\\ntry:\\r\\n    f = open(r\'./test.txt\')\\r\\n    print(f.read())\\r\\nfinally:\\r\\n    if f:\\r\\n        f.close()\\r\\n```\\r\\n\\r\\n上面的代码略长， python 提供了一种简单的写法，使用 with语句来代替 try—finally 代码块和 close() 方法，可以这样写。\\r\\n\\r\\n```python\\r\\nwith open(r\'./test.txt\',\'r\') as fileReader:\\r\\n    print(fileReader.read())\\r\\n```\\r\\n\\r\\n这里，需要注意几点：\\r\\n\\r\\n* 调用 read() 方法是一次将文件内容读到内存中，如果文件过大，将会出现内存不足的问题，一般对于大文件，我们可以对此调用 read(size) 方法来读取，每次读取 size 字节数；\\r\\n\\r\\n* 对于文本文件，可以调用 readline() 函数一次读取一行内容，调用 readlines() 函数一次读取所以内容并按行返回列表。\\r\\n\\r\\n#### 文件写入\\r\\n写文件和读文件流程是一样的，区别是在调用 open() 方法时，传入标识符 ‘w’ 或者 ‘wb’ 表示写入文本文件或者写入二进制文件；接下来调用 write() 方法，制定写入内容；最后文件使用完毕后，需要关闭文件，释放文件对象。\\r\\n\\r\\n```python\\r\\nf = open(\'./test.txt\',\'w\')\\r\\nf.write(\'\')\\r\\nf.close()\\r\\n```\\r\\n\\r\\n在使用 write() 方法时，操作系统不会立即将数据写入到文件中，而是先将数据写入内存中的缓冲区里，等到空间时在写入到文件中，最后使用 close() 方法将数据完整地写入文件中，也可以使用 flush() 方法将数据立即写入到文件中。写文件过程可能会出现 IO 异常，我们可以采用 with 语句。\\r\\n\\r\\n```python\\r\\nwith open(r\'./test.txt\',\'w\') as fileWriter:\\r\\n    fileWriter.write(\'hello\')\\r\\n```\\r\\n\\r\\n### 序列化操作\\r\\n序列化，就是将内存中的变量变成可存储或可传输的过程。将内存中的变量序列化之后，可以把序列化的内容写入到磁盘，或者通过网络传输到别的机器上，实现程序状态的保存和共享。反过来，把变量内容从序列化的对象重新读取到内存，成为反序列化。\\r\\n\\r\\n在 python 中提供了两个模块（cPickle 和 pickle）来实现序列化，前者是由 c 语言编写的，效率要比后者高很多，但是两个模块的功能是一样的。一般在编写程序时，采取的方案是先导入 cPickle 模块，如果此模块不存在，再导入 pickle 模块。\\r\\n\\r\\n```python\\r\\ntry:\\r\\n    import cPickle as pickle\\r\\nexcept ImportError:\\r\\n    import pickle\\r\\n```\\r\\n\\r\\n#### 序列化\\r\\npickle 实现序列化主要使用的是 dumps 方法或 dump 方法。dumps 方法可以将任意对象序列化成一个 str，然后可以将这个 str 写入到文件中保存（需额外操作）。\\r\\n\\r\\n```python\\r\\nd = dict(url=\'index.html\', tilte=\'firstPage\', content=\'firstPage\')\\r\\nprint pickle.dumps(d)\\r\\n```\\r\\n\\r\\n![](images/2018/Screenshot%20from%202018-07-30%2015-20-24.png)\\r\\n\\r\\n如果使用 dump 方法，可以将序列化后的对象直接写入到文件中。\\r\\n\\r\\n```python\\r\\nd = dict(url=\'index.html\', tilte=\'firstPage\', content=\'firstPage\')\\r\\nf = open(\'./dump.txt\', \'wb\')\\r\\npickle.dump(d, f)\\r\\n```\\r\\n\\r\\n![](images/2018/Screenshot%20from%202018-07-30%2015-21-29.png)\\r\\n\\r\\n\\r\\n#### 反序列化\\r\\npython 实现反序列化使用的是 loads 方法或 load 方法。把序列化后的文件从磁盘上读取为一个 str，然后使用 loads 方法将这个 str 反序列化为对象，或者直接使用 load 方法将文件直接反序列化为对象。\\r\\n\\r\\n```python\\r\\nwith open(\'./dump.txt\', \'rb\') as f:\\r\\n    print pickle.load(f)\\r\\n```\\r\\n\\r\\n![](images/2018/Screenshot%20from%202018-07-30%2015-28-08.png)\\r\\n","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},"a20001dd0b5a81ca59431426fe6b2a5cddf41cc001d8f6a59825b48f49fa16e5":{"title":"Ubuntu16.04 系统安装 PyCharm","hash":"a20001dd0b5a81ca59431426fe6b2a5cddf41cc001d8f6a59825b48f49fa16e5","sub_title":null,"category":{"name":"问题解决"},"tags":[{"name":"ubuntu"},{"name":"PyCharm"}],"create":"2018-07-22","update":"2018-07-22","content":"随着人工智能的发展，python 越来越流行。作为年轻一代的互联网技术人员，学习 python 就变得十分必要。俗话说，“工欲善其事必先利其器”，在学习 python 之前，一个好的 IDE 将会使编程效率得到大幅度提高。本人在进行 python 开发时，强烈建议 pycharm 编辑器。\\r\\n\\r\\n### pycharm\\r\\npycharm 主要分为专业版和社区版，专业版是收费的，有 30 天试用期，当然专业版功能非常强大；而社区版是免费的，是专业版的阉割版，但基本上可以满足学习和开发的需要。pycharm 具有跨平台性，可以在 windows、linux、mac系统下使用。其官方链接为 [PyCharm](https://www.jetbrains.com/pycharm/) 。\\r\\n\\r\\n### 安装过程\\r\\npycharm 安装十分简单，windows 系统下只需要简单的一路“next”，即可成功安装。本人以 pycharm 社区版在 Ubuntu 16.04 系统安装为例，介绍其安装过程。首先介绍一种最简单的安装方式，只需要两条命令即可，分别为:\\r\\n\\r\\n```bash\\r\\nsudo add-apt-repository ppa:mystic-mirage/pycharm\\r\\n```\\r\\n\\r\\n![](images/2018/XR6zLENFy4WAZlVAFkwFV3zs.png)\\r\\n\\r\\n\\r\\n```bash\\r\\nsudo apt-get install pycharm-community\\r\\n```\\r\\n\\r\\n这种方式可能由于镜像源的问题，我在安装时网速很慢，安装进程严重耽误，故我放弃这种安装方式，采用官网安装包解压安装的方式。\\r\\n\\r\\n* 首先在官网上下载 pycahrm 在 linux 系统的软件包。\\r\\n\\r\\n* 下载完 pycharm 安装包后，如图所示，将其解压到 Linux 系统下某个路径下，这里我是解压到 /usr/local/ 目录下。\\r\\n解压命令为：\\r\\n\\r\\n```bash\\r\\nsudo tar -zxvf pycharm-community-2018.1.4.tar.gz -C /usr/local/\\r\\n```\\r\\n\\r\\n![](images/2018/Db_FgbgW3ailrm2teuaryPNr.png)\\r\\n\\r\\n![](images/2018/zn8Nlp40rVrJz_opjSBIM4Nw.png)\\r\\n\\r\\n\\r\\n* 进入到 /usr/local/pycharm-community-2018.1.4/bin/ 目录下，运行 pycharm.sh 文件即可打开 pycharm 查询，首次运行会弹出初始设置界面，只要进行相应的设置即可。相应的 linux 命令为：\\r\\n\\r\\n```bash\\r\\ncd /usr/local/pycharm-community-2018.1.4/bin/\\r\\n./pycharm.sh\\r\\n```\\r\\n\\r\\n![](images/2018/8e9jpPJWpDD2oPHIjE8vc9dS.png)\\r\\n\\r\\n![](images/2018/veNihRw8WdrlX_33KfW2Tw0J.png)\\r\\n\\r\\n\\r\\n* 以上过程完成后，恭喜你，你已经完成 pycharm 在 Ubuntu 16.04 系统下的安装，可以使用 pycharm 编辑器了。但是，以上步骤有一个问题，就是每次启动 pycharm 时都需要在 Terminal 运行 ./pycharm.sh 命令，有没有可以直接点击桌面图标，像 windows 系统那样便捷启动方式？答案是有的。这需要在 /usr/share/applications/ 下创建 pycharm 的快捷方式 pycharm.desktop（姑且这么理解吧），然后在 pycharm.desktop 文件下键入以下内容，启动 pycarm 时，右键将其锁定在桌面上。创建快捷方式的命令是：\\r\\n\\r\\n```bash\\r\\nsudo gedit /usr/share/applications/pycharm.desktop\\r\\n```\\r\\n\\r\\n![](images/2018/Y0YSUQcPIsaeHBNBj9pHlbJ0.png)\\r\\n\\r\\n![](images/2018/WeijxqZPKha2rOoCtuNFxGIf.png)\\r\\n\\r\\n\\r\\n现在，你可以在 Ubuntu 16.04 系统下尽情享受 pycharm 编辑器了。\\r\\n","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},"16665bcb0323c5e9cfbce331c45f41a7d498db7082f9a8465c3a43bfefc81d88":{"title":"JAVA 基础之变量","hash":"16665bcb0323c5e9cfbce331c45f41a7d498db7082f9a8465c3a43bfefc81d88","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"JAVA"},{"name":"变量"}],"create":"2018-06-30","update":"2018-06-30","content":"### 变量概述\\r\\n计算机程序中有很多数据，在运行这些程序时，需要将数据“搬运”到内存中，这时需要容器来存储这些数据，变量就是来存储这些数据的。变量是内存中装载数据的容器，程序中可以用它来存取数据。变量就如同生活中装水的杯子，放东西的袋子。\\r\\n\\r\\n### 变量在计算机中存储\\r\\n变量是内存中的容器，用来存储数据。那么计算机内存是怎么存储数据的呢？在计算机存储设备中，如内存和硬盘，存储数据的最小信息单元叫“位（bit）”，我们又称之为“比特位”，通常用小写的字母b表示。而计算机中最小存储单元叫“字节（byte）”，是计算机分配程序存储空间的最小存储单元，通常用大写字母B表示，1个字节是由连续的8个位组成，其换算公式为 1B=8bit。\\r\\n\\r\\n为了表示计算机中庞大的数据量，计算机中常用的存储单位有 KB，MB，GB，TB 等，它们的转换关系如下所示。\\r\\n\\r\\n![](images/2018/XvI8oS7e626foZUvFZFN85U2.png)\\r\\n\\r\\n### 变量类型\\r\\n生活中不同容器可以装不同物品，如果混用会弄出很大麻烦。计算机中变量也有不同类型，来存储不同类型的数据。计算机中变量有两大类型，基本数据类型和引用数据类型。\\r\\n\\r\\n* 基本数据类型\\r\\nJava 中基本数据类型一共有四类，展开后有八中类型，分别为 byte，short，int，long，float，double，char，boolean，具体描述如下表所示。Java 中对于数值类型的常量定义同变量，整型数默认为 int，浮点数默认为 double。对于 long 类型的常量需要在数据后面加上“l”或“L”标记，float 类型的常量需要在数据后面加上“f”或“F”标记，double 类型的常量需要在数据后面加上“d”或“D”标记。\\r\\n\\r\\n![](images/2018/47CSgKQtLHfxjZJ-wz7yjtmM.png)\\r\\n\\r\\n* 引用数据类型\\r\\nJava 中引用数据类型有 string，class，interface，数组等，这些类型出 string 可以存储多个基本数据类型。\\r\\n\\r\\n### 定义变量及注意事项\\r\\nJava 中定义变量正常情况下需要满足变量类型、变量名和变量内容三个部分。有时，在定义变量时可以不包含变量内容，但该变量不能使用。变量定义规范如下图所示。\\r\\n\\r\\n![](images/2018/Pt2829Ah1NkHUOLCZCUvUUjV.png)\\r\\n\\r\\n因此，定义变量有如下注意事项。\\r\\n* 变量定义可以不包含变量内容，待需要改变量时在赋值；\\r\\n下图是定义变量没有赋值，编译器会给出警告。\\r\\n\\r\\n![](images/2018/VYghY4Iou48lXGdTXDj-gMn8.png)\\r\\n\\r\\n* 变量有作用域，使用变量要在作用域内；\\r\\n下图中，变量 i 未在其作用域中使用，编译器报错了。\\r\\n\\r\\n![](images/2018/9Qe2oVGWsl2lZNYgVBlA22KR.png)\\r\\n\\r\\n* 变量不能重复定义，否则会报错。\\r\\n\\r\\n![](images/2018/UClRdJSYqHy4pueNnZCg2k9-.png)\\r\\n\\r\\n### 变量类型转换\\r\\n不同类型的变量是否可以在一起运算呢？答案是可以的，但要先进行类型转换再运算。在 Java 中，范围小的数据类型值（如byte），可以直接转换为范围大的数据类型值（如int）；范围大的数据类型值（如int），不可以直接转换为范围小的数据类型值（如byte）。各种数据类型按照数据范围从小到大依次列出：byte -> short -> int -> long -> float -> double。Java 中有两种变量类型转换，分别为自动类型转换和强制类型转换。\\r\\n\\r\\n* 自动类型转换\\r\\n表示范围小的数据类型转换成范围大的数据类型，这种方式称为自动类型转换，自动类型转换格式：范围大的数据类型 变量 = 范围小的数据类型值。\\r\\n\\r\\n![](images/2018/WxfnYLVJSye-2NuEZhPuzyk6.png)\\r\\n\\r\\n* 强制类型转换\\r\\n表示范围大的数据类型转换成范围小的数据类型，这种方式称为强制类型转换，强制类型转换格式：范围小的数据类型 变量 = (范围小的数据类型) 范围大的数据类型值。\\r\\n\\r\\n![](images/2018/8a60ayHyCeMMxJqD3CAtrqkP.png)\\r\\n","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},"02782fa3c8fabf7fc0090b80df8beb16c58eadc7de4a8ebd2ca8472f8b289e76":{"title":"JAVA 基础之注释、关键字、标识符、数据类型和常量","hash":"02782fa3c8fabf7fc0090b80df8beb16c58eadc7de4a8ebd2ca8472f8b289e76","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"JAVA"},{"name":"注释"},{"name":"关键字"},{"name":"标识符"},{"name":"数据类型"},{"name":"常量"}],"create":"2018-06-26","update":"2018-06-26","content":"### 了解 Java 程序\\r\\n在学习 java 基础语法之前，我先介绍一下 java 程序如何编译和运行。java 程序在编译时需要 javac.exe 工具。运行时需要 java.exe 工具，这两个工具在 jdk 中有，具体见下图所示。\\r\\n\\r\\n![](images/2018/stWJxc6RceRTsvEoyyMo3d7v.png)\\r\\n\\r\\n### java 程序中的注释\\r\\n我们在编写 java 程序时，需要在源代码中添加文字用来对进行代码解释说明，但这些文字并不是Java代码的语法，直接书写会导致编译出错。这时我们可以使用注释来完成这一功能。在编译时，编译器会忽略注释的存在，所以注释并不会导致编译出错，同时注释还方便编写者和其他人阅读源代码，加强对代码的理解。\\r\\n\\r\\nJava 中提供了三种注释方式，分别是：\\r\\n\\r\\n* 单行注释 //注释内容\\r\\n* 多行注释 /注释内容/\\r\\n* 文档注释 /*注释内容/\\r\\n\\r\\n其中，单行注释一般作为为单行代码解释，书写在被解释代码的上一行位置。\\r\\n\\r\\n![](images/2018/vWGoK_2lTdzWFOS_pJEhPr5W.png)\\r\\n\\r\\n多行注释可以书写多行的解释文字，一般用来解释 Java 程序中类的功能或者解释某一段代码，也可以在多行解释中前几行注明开发者姓名和联系方式，便于交流。\\r\\n\\r\\n![](images/2018/ctDtPvnJItCjNCYbrBCmf4Ur.png)\\r\\n\\r\\n文档注释与多行注释作用基本相同，唯一的区别是文档注释可以使用 javadoc.exe 命令生成API文档。\\r\\n\\r\\n![](images/2018/B-Ro0y6qGlhuHxS4YQ7CoNdh.png)\\r\\n\\r\\n![](images/2018/zyVDVPupzW0eGqQtnQbeVx0G.png)\\r\\n\\r\\n### 关键字\\r\\njava 中关键字是被赋予特殊含义，具有专门用途。这些单词我们可以随时使用，但是不能用于定义标识符。\\r\\n\\r\\n![](images/2018/K2Tpzxy0QxPS-yFhrU-A5-rc.png)\\r\\n\\r\\n### 标识符\\r\\nJava 语言中，标识符是由英文字母（A-Z，a-z），数字（0-9），下划线（_）和美元符号（$）组成；其中，在定义标识符时，不能以数字开头，不能使用关键字，严格区分大小写；在起名时，要尽量做到见名知意。\\r\\n\\r\\n一般，在命名类名时，习惯采用大驼峰命名法，也就是每一个单词第一个字母大写，如：“AddStudentInfo”；在命名方法时，习惯使用小驼峰命名法，就是方法名的第一个单词小写，后面单词的第一个字母大写，如：“addStudentInfo”。\\r\\n\\r\\n### 数据类型\\r\\nJava 语言中数据类型分为基本数据类型和引用数据类型。基本数据类型是 Java 语言中内置的类型，分别是整数类型、小数类型、字符类型、布尔类型。这四类基本类型是最简单、最基础的类型。引用数据类型是强大的数据类型，它是基于基本数据类型创建的，主要有数组、类和接口。\\r\\n\\r\\n![](images/2018/BQrOU_XL27fsaUOBhnKO6djs.png)\\r\\n\\r\\n* 常量\\r\\nJava 语言中常量就是不变的数据量，根据基本数据类型划分，常量有以下类型。\\r\\n\\r\\n* 整数类型\\r\\n十进制表示法（0-9）；二进制表示法（0和1），以 0b 开头；八进制表示法（0-7），以 0 开头；十六进制表示法（0-9，A-F），以 0x 开头。\\r\\n\\r\\n* 小数类型\\r\\n\\r\\n* 布尔类型\\r\\n有 true 和 false 两种形式。\\r\\n\\r\\n* 字符类型\\r\\n用单引号（‘’）括起来，单引号里只能写一个字符。\\r\\n\\r\\n* 字符串类型\\r\\n用双引号（“”）括起来，双引号里可以写 0 到任意个字符。\\r\\n","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},"43aa03863e4d1a39661fc6944b698c128eeeae604412e661076ebc0646ec36ce":{"title":"JAVA 开发环境安装","hash":"43aa03863e4d1a39661fc6944b698c128eeeae604412e661076ebc0646ec36ce","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"JAVA"},{"name":"JDK"}],"create":"2018-06-25","update":"2018-06-25","content":"笔者学习 Java 的原因很简单，java 目前位居编程语言排行榜，多学习一门语言，不让自己出路变窄。\\r\\n\\r\\n### java环境搭建\\r\\n* 下载 Java 开发工具包\\r\\n链接如下[jdk](https://www.oracle.com/technetwork/java/javase/downloads/index.html)；\\r\\n\\r\\n* 安装 jdk\\r\\n安装步骤很简单，一直“下一步”即可；\\r\\n\\r\\n* 配置环境变量\\r\\n右击计算机—属性—高级系统设置—环境变量，将 jdk 的安装路径放到系统变量中 path 变量中。\\r\\n\\r\\n![](images/2018/T8EgHRSikOM5lREMwugQ1oxr.png)\\r\\n\\r\\n### Java跨平台原理\\r\\n每个平台有不同的Java虚拟机，不跨平台的 Java 虚拟机使得 Java 具有跨平台性。\\r\\n\\r\\n![](images/2018/-A7BNAagY9tt_r8qU01RGVDZ.png)\\r\\n\\r\\n### 命令行工具\\r\\n* `cd`: 进入目录\\r\\n* `cd / or cd /`: 进入根目录\\r\\n* `cd .`: 进入当前目录\\r\\n* `cd ..`: 进入上一级目录\\r\\n* `rd`: 删除目录 md:创建目录\\r\\n* `dir`: 显示当前目录下有哪些文件和目录\\r\\n* `help`: 查看系统有哪些命令和命令具体使用方法。\\r\\n\\r\\n![](images/2018/5Mkn6WM0f_r4DowjChQY9j5Z.png)\\r\\n\\r\\n### 环境变量设置\\r\\n* 对于 windows 7 及其以下系统，设置环境变量时不易操作。为了放在用户误删环境变量的值，因此另外设置 “JAVA_HOME” 变量保存 jdk 安装的路径，然后在变量 path 中添加“%JAVA_HOME%\\\\bin;”即可。\\r\\n\\r\\n* 临时环境变量设置。在命令行工具中输入“set path=”，输入相应的值即可。\\r\\n  * 若值为空，说明临时 path 变量为空；\\r\\n  * 若值为“.;%patn%”，说明临时 path 变量是原来 path 变量加上当前目录；\\r\\n  * 若值为“(某个目录);”，说明临时 path 变量是该目录；\\r\\n  * 若值为“（某个目录）;%path%”，说明 path 变量是原来 path 变量加上该目录。\\r\\n\\r\\n### classpath 变量\\r\\n* classpath 变量保存的是 Java 类库的目录，方便其他命令访问类库。\\r\\n* 可以在环境变量里设置，也可以在命令行中使用命令“set classpath=”进行设置。\\r\\n","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},"a0de301e2d15abe7b82f858ea1f708040d963e67351c360c6bd58479ec7b69dd":{"title":"决不碌碌无为","hash":"a0de301e2d15abe7b82f858ea1f708040d963e67351c360c6bd58479ec7b69dd","sub_title":null,"category":{"name":"生活感悟"},"tags":[{"name":"鸡汤"}],"create":"2018-03-24","update":"2018-03-24","content":"**人无法避免饮食、睡眠、怠惰和恋情，不得不接触生活中最温情的东西，然而人不能屈服。在不得不做各种事情的时候，必须保持不随波逐流的思想，使之处于支配地位，使之在卑微的头脑中不受干扰。人必须使生活变成一个梦想，并且使这个梦想变为现实。（《居里夫人传》，贾文浩译本）**\\r\\n\\r\\n看了上面这段话，我瞬间崩溃了。回想自己过去的十年里，我从来没有把【升学】当作我人生中不得不做的事，总是想着【升学】若不成功，我还可以在下一个【升学】路口继续奋斗。于是，我中考，高考，甚至经历了去年大半年的考研，可以说，我都失败了，我的所作所为一次有一次让我的父母伤心而无奈。如今，我还有三个月就大学毕业了，此时留给我的路真的只能靠我自己，【就职】还是【再战】，这两条路对我来说都是十分艰巨的。没有了初中和高中那样的【理所当然】，此时，真的是我亲自去选择我未来的路，我必须改变心态，不要自己后悔。\\r\\n\\r\\n感谢去年考研群的群友，让我看到这句话，希望在未来，我要改变我的心态，保持自律，不受干扰地完成自己不得不做的事，努力做好它。\\r\\n","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},"1981b1044cb10eecb3efc3fa2a1848ab549394b6cf6c97ecf9d70cf667362a20":{"title":"论文排版总结","hash":"1981b1044cb10eecb3efc3fa2a1848ab549394b6cf6c97ecf9d70cf667362a20","sub_title":null,"category":{"name":"问题解决"},"tags":[{"name":"论文排版"}],"create":"2018-03-13","update":"2018-03-13","content":"最近，笔者在忙毕业论文，在写论文时遇到了一些排版问题。因此，我用这篇博客来总结这些问题并给出解决方案。\\r\\n\\r\\n* Q: 如何在论文上生成不同页码？比如，摘要部分页码应该是“I，II，...”，正文部分页码应该是“1，2，3...”。\\r\\n\\r\\n  * A：这可以利用 word 2013 上的“分节符（下一页）”来实现。\\r\\n  * (1).首先在需要设置不同页码区域每个部分末尾添加“分节符（下一页）”，即使用“分节符（下一页）”将前后两部分分开。如下图。\\r\\n\\r\\n![](images/2018/vv9sx-pgqopbha7CD1u8mWYu.png)\\r\\n\\r\\n  * (2).然后将光标放到前一个部分的页脚或者后一部分的页眉，点击“链接到前一条页眉”，使其取消链接。\\r\\n\\r\\n![](images/2018/asohhpSKP-sCK22hj13qIUmv.png)\\r\\n\\r\\n点击前的情况：\\r\\n\\r\\n![](images/2018/-zCOkUwC0wbmsorlQNLAFPjO.png)\\r\\n\\r\\n点击后的情况：\\r\\n\\r\\n![](images/2018/CbI78-94O1gawZCVI_DHYUHe.png)\\r\\n\\r\\n  * (3).之后就可以在每一步添加页码，并设置各自页码的格式。\\r\\n添加页码：\\r\\n\\r\\n![](images/2018/qizTBGqvNk0ecohtM4i1RddW.png)\\r\\n\\r\\n设置页码格式：\\r\\n\\r\\n![](images/2018/1oOv2kFT4a5YWfUIt9brOXSX.png)\\r\\n\\r\\n___\\r\\n\\r\\n* Q: 论文首页如何不现实页码？\\r\\n  * A: 点击“首页不同”即可删除论文封面的页码。\\r\\n\\r\\n![](images/2018/yNAdWx01rnWzwuMzskBSP-bg.png)\\r\\n\\r\\n___\\r\\n\\r\\n* Q: 论文目录如何生成？\\r\\n  * A: 利用 word 里自带的目录生成工具生成目录。\\r\\n\\r\\n![](images/2018/DJUvr7jmXkMf-KsyhEaftkVz.png)\\r\\n\\r\\n___\\r\\n\\r\\n* Q: 目录部分不应该生成页码，若目录占多页，如何删除目录页码？\\r\\n  * A: 我们假设目录是第3页到第5页。\\r\\n  * (1).在正文编辑状态下，将鼠标定位到目录页末尾，即第5页，然后点击“分节符（连续）”，插入一个分节符。\\r\\n\\r\\n![](images/2018/TPI2pSVwiA_A-pyNiIw2CCvU.png)\\r\\n\\r\\n  * (2).进入正文部分，即第6页，进入页眉和页脚编辑部分，点击“链接到前一条页眉”，取消第8页页眉与第7页页眉的链接关系。同理，取消第6页页脚与第5页页脚的链接关系。\\r\\n\\r\\n![](images/2018/F5JGM0KD5r3JvHD2WybYSJoZ.png)\\r\\n\\r\\n![](images/2018/FuKBb1JibSE9DUDMNtjDerb8.png)\\r\\n\\r\\n  * (3).同理，设置第2页效果与第6页相同。\\r\\n  * (4).删除目录部分页码，并设置目录前后部分的页码格式。\\r\\n","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},"584ef201c104528b488eae8773b85054d56c86ffbc2e9217f5d596f0fef2fc0e":{"title":"2017 总结","hash":"584ef201c104528b488eae8773b85054d56c86ffbc2e9217f5d596f0fef2fc0e","sub_title":null,"category":{"name":"生活感悟"},"tags":[{"name":"总结"}],"create":"2017-12-30","update":"2017-12-30","content":"2017 年马上过去了，这一年，我只能说过得还行，不是非常糟糕，也不是非常逊色，马马虎虎吧。\\r\\n\\r\\n2017 年，我的大部分时间是在备考研究生考试，这一年，我背英语单词，做阅读理解；做政治选择题，背政治分析题；做数学题目；看专业课知识。我不是像大部分莘莘学子那样，在寝室——食堂——图书馆过着三点一线的生活，我只是在寝室——食堂循环着，早上七点到七点半起来，晚上二十三点四十几就睡觉了，偶尔周末还睡到九点左右。虽然我的努力可能不如那些拼命在图书馆学习的同学，但是我自己的身体如何，自己的智力如何，什么时候该睡觉，什么时候该学习，我是清楚的。我认为学习就要在适合自己的最佳学习状况下，否则一切就是做疲劳功。关于考研的一些心得体会，这里我不想谈。我一直认为凡事没有到最后，就没有资格谈心得体会。我想等考研结束，明年三四月份时，再谈谈我这一年考研生活的历史。\\r\\n\\r\\n这一年，我在备考研究生考试的途中，忙里偷闲地学习了 Android ,巩固了 php,java等知识。在这么忙的备考时间里，我学习这些可能显得很不合群，感觉我好像很厉害一样，可以一心多用。对于这样的情况，我只想说我是全凭自己的兴趣去做的，即使考研失败，我也不会后悔的。人的一生，能够做自己感兴趣的事其实没几件，我很庆幸，在我 2017 年，我做了自己感兴趣的事。关于这些技术所做的项目，我现在就不列在这了，后期我会打包放在我的 Github 上。\\r\\n\\r\\n这一年，有一件小事，我一直念念不忘。2017 年 10 月的某一天，我在上钟老师的 Android 课程，可能是大四了，上课的人少了，一些考研的人会带自己的书在课堂上看，我也不例外。就在我在看考研的书，钟老师走到我这儿，看我在看考研的书，问我准备考哪所学校，我怯怯地说我想考南京大学。旁边一位老师担心地说，南京大学可是 985,这有点难度呀。我当时没说什么，只是低下了头，只见钟老师说了句令我至今难忘的话。钟老师说，我看尹浩伟同学是一个很认真的学生，学习踏踏实实的，凡事认真就是学好。钟老师说这句话可能仅仅是为了缓和一些尴尬的气氛，可能只是给我加油的，可能只是其他什么原因，但是就是这句话当时鼓舞了我，让我在学习和生活钟以认真的态度去面对。2018 年，我要时刻保持认真处事的态度。\\r\\n\\r\\n谈了这么多，好像把我 2017 年的事都说得差不多了。其实 2017 年，我所做的事很少，没有坚持的毅力，是很难完成这些事的。我坚持备考研究生考试到 12 月 23 日，坚持考完了所有的考试，坚持学习了备考的书籍，但是，我觉得我坚持得还不够，说好的每天背单词呢，说好的每天早起呢，说好的每天锻炼呢，说好的每天看一点书呢，说好的每天听一点音频呢……这些我都没做到。我希望 2018 年，我要培养坚持的毅力，坚持每天早起，坚持每天运动，坚持每天背单词，坚持每天看一点书，做一个终身学习者。\\r\\n\\r\\n最后，我再谈谈 2017 年里最让我感动的影视剧《敢爱》。这部电视剧真的打动我了，我看了三遍。虽然电视剧钟主角罗永浩处事认真，却时常碰壁，三次创业都失败了，最终承受不住岳母的打击，和雷蕾分手。我想如果我今后以认真态度去面世，会不会遇到“罗永浩”的境况？虽然这个社会崇尚正能量，崇尚以人为本，我只希望今后在这个纷繁复杂的社会里，能够活好在这个社会。下面，我分享一些《敢爱》中，感动我的一些台词。\\r\\n\\r\\n罗永浩：雷蕾，我们分手吧，请原谅我违背了我的誓言，无法守护你一生，但是我爱你一生，我会做到。我爱你，雷蕾，但是，我们不能在一起了，如果没有我拖累你，你会有大好前程，会有更好的更幸福的生活等待着你，会有比我更优秀的男人守护者你。我爱你，所以希望你能更幸福。忘了我吧。\\r\\n雷蕾：我爱你，永浩，一生不变，你可以不守护我，但我要跟在你身边，你希望我幸福，那我就告诉你，没有你我就没有幸福，一切都会好起来的，相信我，等我。\\r\\n\\r\\n罗永浩：分手吧，雷蕾，不要再挣扎了，我们爱的太辛苦，我真的好累。\\r\\n雷蕾：如果分手能让你感到释然和幸福，我不再强求，是我的错，因为我的家人打击了你的自尊，伤害了你，我向你道歉。我一直以为爱情只属于两个人，我以为只要我们相爱，桑田可变沧海；我以为只要我们相爱，我们就可以手拉着手，一直到地老天荒。今天，我清楚的看到了爱情的卑微，它最终输给自尊，输给金钱，输给时间，输给誓言。此刻，再次看到你要分手的短信，我意外的特别的平静，我是个幸运的女人，因为有你，曾经爱我，守护我八年，我人在世间，可心却在天堂，离开你，我想我不会再爱了，也彻底失去了爱的能力，你说分手我不会再勉强，但是我会继续等待，虽然等待是一个如此卑微的名词，但是毕竟等待是我一个人的事，我一个人能完成的事，不需要别人跟我同行，如果有一天，你蓦然回首，想起我的话，请记着，我，一直在等待。\\r\\n\\r\\n雷蕾：世上有太多的不可挽回，比如爱一个人，比如和他共度的岁月，—-再也没有一个人，让我看到他笑，会轻扬唇角；看到他皱眉，欲以身代—-永浩，我爱你，这种爱从来没有改变过，你一定要幸福，不然对不起我的退出。\\r\\n\\r\\n2018 年，加油！技术不是全部，但没有技术不能拥有一切！\\r\\n","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},"4eec2eaca39c49a25b273f287d6c9b78208c6aa6431400d95d671781f9731b07":{"title":"Android 动态自动匹配输入框","hash":"4eec2eaca39c49a25b273f287d6c9b78208c6aa6431400d95d671781f9731b07","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"Android"},{"name":"自动匹配"}],"create":"2017-09-16","update":"2017-09-16","content":"动态自动匹配输入框,可以分为单匹配和多匹配两种，如百度搜索框和邮箱发件人的输入框。\\r\\n\\r\\n* 单匹配(AutoCompleteTextView)\\r\\n  * 初始化 AutoCompleteTextView 控件\\r\\n  * 需要一个适配器\\r\\n  * 初始化数据源\\r\\n  * 将 adapter 与 acTextView 绑定\\r\\n\\r\\n```java\\r\\nAutoCompleteTextView acTextView = (AutoCompleteTextView)findViewById(R.id.AutoCompleteTextView1);\\r\\nString[] data1 = {\\"Android\\",\\"Book\\",\\"system\\",\\"haha\\",\\"hehe\\",\\"shabi\\"};\\r\\nArrayAdapter<String> adapter1 = new ArrayAdapter<String>(this,R.layout.support_simple_spinner_dropdown_item,data1);\\r\\nacTextView.setAdapter(adapter1);\\r\\n```\\r\\n\\r\\n* 多匹配(MultiAutoCompleteTextView)\\r\\n  * 初始化 MultiAutoCompleteTextView 控件\\r\\n  * 需要一个适配器\\r\\n  * 初始化数据源\\r\\n  * 将 adapter 与 acTextView 绑定\\r\\n  * 设置分隔符\\r\\n\\r\\n```java\\r\\nMultiAutoCompleteTextView macTextView = (MultiAutoCompleteTextView)findViewById(R.id.MultiAutoCompleteTextView1);\\r\\nString[] data2 = {\\"123\\",\\"12345\\",\\"haharr\\",\\"httt,\\"rr\\"};\\r\\nArrayAdapter<String> adapter2 = new ArrayAdapter<String>(this,R.layout.support_simple_spinner_dropdown_item,data2);\\r\\nmacTextView.setAdapter(adapter2);\\r\\nmacTextView.setTokenizer(new MultiAutoCompleteTextView.CommaTokenizer());\\r\\n```\\r\\n\\r\\n该方法只支持逗号连接，若需要自定义分隔符，需要自定义类，然后用语句\\r\\n\\r\\n```java\\r\\nmacTextView.setTokenizer(new SemicolonTokenizer(\';\'));\\r\\n```\\r\\n\\r\\n执行。自定义分隔符类的代码如下。\\r\\n\\r\\n```java\\r\\nimport android.text.SpannableString;\\r\\nimport android.text.Spanned;\\r\\nimport android.text.TextUtils;\\r\\nimport android.widget.MultiAutoCompleteTextView;\\r\\n\\r\\n/**\\r\\n * Created by 痛点就是起点 on 2017/9/13.\\r\\n * @effect 自定义 MultiAutoCompleteTextView 添加分隔符\\r\\n */\\r\\n\\r\\npublic class SemicolonTokenizer implements MultiAutoCompleteTextView.Tokenizer {\\r\\n\\r\\n    private char charS;\\r\\n    private String mSTring;\\r\\n\\r\\n    public SemicolonTokenizer(char charS) {\\r\\n        this.charS = charS;\\r\\n        mSTring = String.valueOf(charS);\\r\\n    }\\r\\n\\r\\n    @Override\\r\\n    public int findTokenStart(CharSequence text, int cursor) {\\r\\n        int i = cursor;\\r\\n\\r\\n        while (i > 0 && text.charAt(i - 1) != charS) {\\r\\n            i--;\\r\\n        }\\r\\n        while (i < cursor && text.charAt(i) == \' \') {\\r\\n            i++;\\r\\n        }\\r\\n\\r\\n        return i;\\r\\n    }\\r\\n\\r\\n    @Override\\r\\n    public int findTokenEnd(CharSequence text, int cursor) {\\r\\n        int i = cursor;\\r\\n        int len = text.length();\\r\\n\\r\\n        while (i < len) {\\r\\n            if (text.charAt(i) == charS) {\\r\\n                return i;\\r\\n            } else {\\r\\n                i++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return len;\\r\\n    }\\r\\n\\r\\n    @Override\\r\\n    public CharSequence terminateToken(CharSequence text) {\\r\\n        int i = text.length();\\r\\n\\r\\n        while (i > 0 && text.charAt(i - 1) == \' \') {\\r\\n            i--;\\r\\n        }\\r\\n\\r\\n        if (i > 0 && text.charAt(i - 1) == charS) {\\r\\n            return text;\\r\\n        } else {\\r\\n            if (text instanceof Spanned) {\\r\\n                SpannableString sp = new SpannableString(text + mSTring);\\r\\n                TextUtils.copySpansFrom((Spanned) text, 0, text.length(), Object.class, sp, 0);\\r\\n                return sp;\\r\\n            } else {\\r\\n                return text + mSTring;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n```\\r\\n","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},"ce542e82194be19458e1a88c6bc1ff8d97a232776d58f74fb19dada4baac14ec":{"title":"Intent 实现页面之间跳转","hash":"ce542e82194be19458e1a88c6bc1ff8d97a232776d58f74fb19dada4baac14ec","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"Android"},{"name":"Intent"}],"create":"2017-09-14","update":"2017-09-14","content":"* 无数据传递页面跳转\\r\\n\\r\\n```java\\r\\nIntent intent = new Intent(MainActivity.this,DemoActivity.class);\\r\\nstartActivity(intent);\\r\\n```\\r\\n\\r\\n* 有数据回传页面跳转\\r\\n页面跳转:\\r\\n\\r\\n```java\\r\\nIntent data = new Intent(MainActivity.this,DemoActivity.class);\\r\\nMainActivity.this.startActivityForResult(Intent intent,int requestCode);\\r\\n```\\r\\n\\r\\n回传数据:\\r\\n\\r\\n```java\\r\\nshowReturnData = (Button)findViewById(R.id.buttonShowReturnData);\\r\\nshowReturnData.setOnClickListener(new View.OnClickListener() {\\r\\n    @Override\\r\\n    public void onClick(View v) {\\r\\n        /**\\r\\n         * 传数据:setResult(int resultCode,Intent data)\\r\\n         */\\r\\n        Intent data = new Intent();\\r\\n        data.putExtra(\\"username\\",\\"123\\");\\r\\n        //setResult(Intent intent,int resultCode)\\r\\n        setResult(2,data);\\r\\n        finish();\\r\\n    }\\r\\n});\\r\\n```\\r\\n\\r\\n接受回传数据:\\r\\n\\r\\n```java\\r\\nprotected void onActivityResult(int requestCode, int resultCode, Intent data) {\\r\\n    super.onActivityResult(requestCode, resultCode, data);\\r\\n    if(requestCode == 1 && resultCode == 2){\\r\\n        showData.setText(data.getStringExtra(\\"username\\"));\\r\\n    }\\r\\n}\\r\\n```\\r\\n\\r\\n* 效果\\r\\n\\r\\n![](images/2017/B1wWs4CutRh1lKFdbWOhPk-d.png)\\r\\n\\r\\n![](images/2017/E8x9lCuJJist0Jf6bQwinI1.png)\\r\\n\\r\\n![](images/2017/ZDN_ondxf5ypikwW27tK1ynp.png)\\r\\n","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},"23295cecd21cfd64f57e6732f574d910f9359a2aeb72c5654730bb4b29c44b2f":{"title":"Android 布局","hash":"23295cecd21cfd64f57e6732f574d910f9359a2aeb72c5654730bb4b29c44b2f","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"Android"},{"name":"界面布局"}],"create":"2017-09-14","update":"2017-09-14","content":"这篇文章将讲述 Addroid 的五大布局方式，分别为 LinearLayout、Relativelayout、FrameLayout、AbsoluteLayout 和 TableLayout。\\r\\n\\r\\n* LinearLayout 线性布局\\r\\n  * LinearLayout 的属性：\\r\\n    * orientation 决定其子类控件的排布方式，垂直分布或者水平分布\\r\\n    * gravity 决定其子类控件的 xy 位置，垂直居中、水平居中、都居中、左边、右边或者底部\\r\\n\\r\\n    ```java\\r\\n    android:orientation=\\"horizontal | vertical\\"\\r\\n    android:gravity=\\"center | center_horizontal | center_vertical | left | right | bottom\\"\\r\\n    ```\\r\\n\\r\\n    * 子类控件用到的属性：\\r\\n      * layout_gravity 决定本身控件在父类容器的 xy 位置\\r\\n      * layout_weight 决定本身控件在父类容器的比例\\r\\n\\r\\n    ```java\\r\\n    android:layout_gravity=\\"\\"\\r\\n    android:layout_weight=\\"\\"\\r\\n    ```\\r\\n\\r\\n___\\r\\n\\r\\n* RelativeLayout 相对布局\\r\\n    * 子类控件相对父类容器的位置：\\r\\n\\r\\n    ```java\\r\\n    android:layout_alignParentLeft=\\"\\"\\r\\n    android:layout_alignParentRight=\\"\\"\\r\\n    android:layout_alignParentTop=\\"\\"\\r\\n    android:layout_alignParentBottom=\\"\\"\\r\\n    android:layout_marginLeft=\\"\\"\\r\\n    android:layout_marginRight=\\"\\"\\r\\n    android:layout_marginTop=\\"\\"\\r\\n    android:layout_marginBottom=\\"\\"\\r\\n    android:layout_centerHorizontal=\\"\\"\\r\\n    android:layout_centerVertical=\\"\\"\\r\\n    android:layout_centerInParent=\\"\\"\\r\\n    ```\\r\\n\\r\\n    * 子类控件相对于子类控件的位置：\\r\\n\\r\\n    ```java\\r\\n    android:layout_below=\\"\\"\\r\\n    android:layout_toLeftOf=\\"\\"\\r\\n    android:layout_toRightOf=\\"\\"\\r\\n    android:layout_above=\\"\\"\\r\\n    android:layout_alignBaseline=\\"\\"\\r\\n    android:layout_alignLeft=\\"\\"\\r\\n    android:layout_alignRight=\\"\\"\\r\\n    android:layout_alignTop=\\"\\"\\r\\n    android:layout_alignBottom=\\"\\"\\r\\n    ```\\r\\n\\r\\n___\\r\\n\\r\\n\\r\\n* FrameLayout 帧布局\\r\\n帧布局不能设置子类控件的位置，子类控件会自动显示在左上角，后来添加的子类控件会部分或全部覆盖前面的控件。\\r\\n\\r\\n___\\r\\n\\r\\n* AbsoluteLayut 绝对布局\\r\\n这种布局方式以固定的位置规定控件的位置，不具有适配多种手机的能力。\\r\\n\\r\\n```java\\r\\nandroid:layout_X=\\"\\"\\r\\nandroid:layout_Y=\\"\\"\\r\\n```\\r\\n\\r\\n___\\r\\n\\r\\n* TableLayout 表格布局\\r\\n表格布局的每一行是 TableRow ，可以将布局以表格三大形式显示在屏幕上。\\r\\n\\r\\n  * 全局属性：\\r\\n\\r\\n    ```java\\r\\n    android:collapseColumns=\\"\\"\\r\\n    android:shrinkColumns=\\"\\"\\r\\n    android:stretchColumns=\\"\\"\\r\\n    ```\\r\\n\\r\\n    * 控件属性：\\r\\n\\r\\n    ```java\\r\\n    android:layout_column=\\"\\"\\r\\n    android:layout_span=\\"\\"\\r\\n    ```\\r\\n","author":{"username":"yhw-miracle"},"reader":2,"is_comment":true,"comments":[]},"d18fd06de5bb19f3c0919717ceb1bf54d5e436a9f8b905bc7b65d53bdc133cb9":{"title":"Android 跑马灯效果","hash":"d18fd06de5bb19f3c0919717ceb1bf54d5e436a9f8b905bc7b65d53bdc133cb9","sub_title":null,"category":{"name":"技术案例"},"tags":[{"name":"Android"},{"name":"跑马灯"}],"create":"2017-09-13","update":"2017-09-13","content":"用 Android 实现跑马灯效果，前提是显示的内容较长，超过屏幕的宽度，不然实现跑马灯没有意义。\\r\\n\\r\\n* 一个 TextView\\r\\n\\r\\n```xml\\r\\nandroid:singleLine=\\"true\\"\\r\\nandroid:ellipsize=\\"marquee\\"\\r\\nandroid:focusable=\\"true\\"\\r\\nandroid:focusableInTouchMode=\\"true\\"\\r\\n```\\r\\n\\r\\n![](images/2017/3aOJ8Df5RxTPF6jWQfEUYngP.png)\\r\\n\\r\\n* 多个 TextView\\r\\n\\r\\n![](images/2017/jxAIieloK0Y7mzM6qtSPYyfD.png)\\r\\n\\r\\n用继承 TextView 类来实现，isFocused 方法返回 true。\\r\\n\\r\\n![](images/2017/UfmVeJ-WLwJocTRGmHzQKRKX.png)\\r\\n\\r\\n* 效果\\r\\n\\r\\n![](images/2017/L2XSCvyI6Np7C395bpsOxNIi.png)\\r\\n","author":{"username":"yhw-miracle"},"reader":3,"is_comment":true,"comments":[]},"b92653c33b69aa4b03d6f8789243fc7e62a431bb46a582059739a608adeacd7e":{"title":"Android 按钮点击事件实现","hash":"b92653c33b69aa4b03d6f8789243fc7e62a431bb46a582059739a608adeacd7e","sub_title":null,"category":{"name":"知识总结"},"tags":[{"name":"Android"},{"name":"按钮事件"}],"create":"2017-09-13","update":"2017-09-13","content":"在 Android 开发中，按钮的点击事件有三种方式。\\r\\n\\r\\n* 匿名内部类的方式\\r\\n该方法比较方便实现按钮的点击事件，较常见\\r\\n\\r\\n```java\\r\\n/**\\r\\n * 1. 匿名内部类\\r\\n */\\r\\nloginButton.setOnClickListener(new View.OnClickListener() {\\r\\n    @Override\\r\\n    public void onClick(View v) {\\r\\n        Toast toast1 = Toast.makeText(getApplicationContext(), R.string.loginSuccess, Toast.LENGTH_LONG);\\r\\n        toast1.show();\\r\\n    }\\r\\n});\\r\\n```\\r\\n\\r\\n* 外部类的方式\\r\\n该方法可以实现较多按钮的共同效果，可以将共同的业务逻辑写到外部类中实现。\\r\\n\\r\\n```java\\r\\npublic class commonListener implements View.OnClickListener {\\r\\n    @Override\\r\\n    public void onClick(View v) {\\r\\n        v.setAlpha(0.5f);\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * 2. 外部类\\r\\n */\\r\\nloginButton.setOnClickListener(new commonListener() {\\r\\n    @Override\\r\\n    public void onClick(View v) {\\r\\n        super.onClick(v);\\r\\n        Toast toast1 = Toast.makeText(getApplicationContext(), R.string.loginSuccess, Toast.LENGTH_LONG);\\r\\n        toast1.show();\\r\\n    }\\r\\n});\\r\\n```\\r\\n\\r\\n* 接口的方式\\r\\n该方法可以在本类中重写 onClick 方法，也是一种实现按钮点击事件方法。\\r\\n\\r\\n```java\\r\\npublic class MainActivity extends AppCompatActivity implements View.OnClickListener {\\r\\n\\t/**\\r\\n\\t * 3. 接口方式\\r\\n\\t * @param v\\r\\n\\t */\\r\\n\\t@Override\\r\\n\\tpublic void onClick(View v) {\\r\\n\\t\\t...\\r\\n\\t}\\r\\n}\\r\\n```\\r\\n","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},"af2e093886cbd69d1d36c2d191d0f7d30ca9a9b5753ad01aed387e586e005007":{"title":"数据结构与算法（翻译）","hash":"af2e093886cbd69d1d36c2d191d0f7d30ca9a9b5753ad01aed387e586e005007","sub_title":null,"category":{"name":"技术翻译"},"tags":[{"name":"数据结构"},{"name":"算法"}],"create":"2017-07-20","update":"2017-07-20","content":"### Data Structures And Algorithms\\r\\n\\r\\n> The level of questions asked on Data Structures And Algorithms totally depends on the company for which you are applying.\\r\\n\\r\\n - Array\\r\\n - LinkedList\\r\\n  - A LinkedList, just like a tree and unlike an array, consists of a group of nodes which together represent a sequence. Each node contains data and a pointer. The data in a node can be anything, but the pointer is a reference to the next item in the LinkedList. A LinkedList contains both a head and a tail. The Head is the first item in the LinkedList, and the Tail is the last item. A LinkedList is not a circular data structure, so the tail does not have its pointer pointing at the Head, the pointer is just null. The run time complexity for each of the base methods are as follows:\\r\\n\\r\\n| Algorithm | Average | WorstCase |\\r\\n| ------ | ------ | ------ |\\r\\n| Space | O(n) | O(n) | \\r\\n| Search | O(n) | O(n) |\\r\\n| Insert | O(1)| O(1) |\\r\\n| Delete | O(1) | O(1) |\\r\\n\\r\\n - DoublyLinkedList\\r\\n - Stack\\r\\n  - A Stack is a basic data structure with a “Last-in-First-out” methodology. Which means that the last item that was added to the stack, is the first item that comes out of the stack. A Stack is like a stack of books. In order to get to the first book that was added in the stack (the bottom book), all of the books that were added after need to be removed first. Adding to a Stack is called a Push, removing from a stack is called a Pop, and getting the last item inserted into the stack without removing it is called Top. The most common way to implement a stack is by using a LinkedList, but there are also StackArray (implemented with an array) which does not replace null entries, and there is also a Vector implementation that does replace null entries.\\r\\n\\r\\n| Algorithm | Average | Worst Case | Image representation |\\r\\n| ------ | ------ | ------ | ------ |\\r\\n| Space | O(n) | O(n) |\\r\\n| Search | O(n) | O(n) |\\r\\n| Insert(Push) | O(1) | O(1) |\\r\\n| Delete(Pop) | O(1) | O(1) |\\r\\n| Top | O(1) | O(1) |\\r\\n\\r\\n - Queue\\r\\n - PriorityQueue\\r\\n - Dynamic Programming\\r\\n - String Manipulation\\r\\n - Binary Tree\\r\\n - Binary Search Tree\\r\\n - Sorting Algorithms\\r\\n - Hash Table or Hash Map\\r\\n - Breadth First Search\\r\\n - Depth First Search\\r\\n - Greedy Algorithm\\r\\n\\r\\n___\\r\\n\\r\\n翻译如下：\\r\\n\\r\\n### 数据结构和算法\\r\\n> 数据结构和算法的问题层面完全取决于你所应聘公司的要求。\\r\\n\\r\\n - 数组\\r\\n - 链表\\r\\n  - 就像树形结构，而不像数组那样的链表结构是由一起表示一个序列数据的一组结点组成的。每个结点包含数据域和指针域。结点中的数据域可以是任何一种数据结构，但是指针域是链表中对后一个元素的引用。一个链表可以包含一个头指针和一个尾指针，头指针是指向链表的的第一个元素,即头部，而尾指针是指向最后一个元素的，即尾部。链表不是一个循环的数据结构，因此尾指针所指向的尾部没有指向头部的指针，尾部的指针域为 null。链表具有增删改查等基本操作，下表是链表中每个基本操作运行的时间复杂度。\\r\\n\\r\\n| 操作 | 平均时间复杂度 | 最差时间复杂度 |\\r\\n| ------ | ------ | ------ |\\r\\n| 修改 | O(n) | O(n) |\\r\\n| 查询 | O(n) | O(n) |\\r\\n| 插入 | O(1) | O(1) |\\r\\n| 删除 | O(1) | O(1) |\\r\\n\\r\\n - 双向链表\\r\\n - 栈\\r\\n  - 栈是一个具有“后进先出”操作的基本数据结构。这就说明被添加到栈的最后一个元素将是第一个出栈元素。栈结构就像一堆书，如果你为了获得在这堆书中的第一本书（就是最底部的书），你需要书堆里的所有书都需要先移除，这样你才能获得书堆里的第一本书。在栈里面，添加一个元素到栈里的操作被称为入栈，即 Push，从栈了删除一个元素的操作被称为出栈，即 Pop，而在不移除栈的情况下获取栈里最后一个元素的操作叫做获取栈顶部元素，即 Top。栈的内部实现的最常用方法是使用链表；但是也有用堆栈数组（用数组实现）的，这会保留一些空条目；还有是用 Vector 实现的，这不会保留空条目。\\r\\n\\r\\n| 操作 | 平均时间复杂度 | 最差时间复杂度 | 图像表示 |\\r\\n| ------ | ------ | ------ | ------ |\\r\\n| 修改 | O(n) | O(n) |\\r\\n| 查询 | O(n) | O(n) |\\r\\n| 插入(Push) | O(1) | O(1) |\\r\\n| 删除(Pop) | O(1) | O(1) |\\r\\n| 取栈顶元素(Top) | O(1) | O(1) |\\r\\n\\r\\n - 队列\\r\\n - 优先队列\\r\\n - 动态编程\\r\\n - 字符串操作\\r\\n - 二叉树\\r\\n - 二叉搜索树\\r\\n - 排序算法\\r\\n - 散列表和散列图\\r\\n - 广度优先遍历\\r\\n - 深度优先遍历\\r\\n - 贪婪算法\\r\\n\\r\\n* 原文：[https://github.com/MindorksOpenSource/android-interview-questions](https://github.com/MindorksOpenSource/android-interview-questions)","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},"9969ffbdb6ab010b16adaf48c13b99d6420dee48cb94103bbd8f1c5fb3aa4031":{"title":"windows 系统下 MySQL 安装","hash":"9969ffbdb6ab010b16adaf48c13b99d6420dee48cb94103bbd8f1c5fb3aa4031","sub_title":null,"category":{"name":"问题解决"},"tags":[{"name":"MySQL"}],"create":"2017-05-27","update":"2017-05-27","content":"* 软件下载\\r\\n下载地址为：[https://downloads.mysql.com/archives/community/](https://downloads.mysql.com/archives/community/)，我选择的是社区服务版本5.7.17，且是解压版到的。\\r\\n\\r\\n* 配置环境变量\\r\\n将 mysql 的 bin 目录（如：D:\\\\MySQL\\\\mysql-5.7.17-winx64\\\\bin）放到 Path 里。操作：我的电脑—>属性—>高级系统设置—>环境变量—>系统变量—>Path。\\r\\n\\r\\n* 配置 my-default.ini 文件\\r\\n在 my-default.ini 文件里添加如下代码：\\r\\n\\r\\n```text\\r\\n[mysqld]\\r\\nbasedir = D:\\\\MySQL\\\\mysql-5.7.17-winx64（mysql 的目录）\\r\\ndatadir = D:\\\\MySQL\\\\mysql-5.7.17-winx64\\\\data（mysql 的目录\\\\data）\\r\\n```\\r\\n\\r\\n如果 mysql 目录下没有 data 目录，自行在在 mysql 目录下新建 data 文件夹。\\r\\n\\r\\n![](images/2017/qt0SrHtVggeA0ncYHTYoISs6.png)\\r\\n\\r\\n![](images/2017/sSfgZ0WAahadPJaDTflA0TPy.png)\\r\\n\\r\\n* 初始化 mysql 服务\\r\\n在 Windows PowerShell 或 CMD 里切换到 mysql 目录下的 bin 目录，执行下面的命令。\\r\\n\\r\\n```bash\\r\\nmysqld --initialize-insecure --user=mysql\\r\\n```\\r\\n\\r\\n* 注册 mysql 服务\\r\\n在 Windows PowerShell 或 CMD 里切换到 mysql 目录下的 bin 目录，执行下面的命令。\\r\\n\\r\\n```bash\\r\\nmysqld --install mysql --defaults-file=d:\\\\MySQL\\\\mysql-5.7.17-winx64\\\\my-default.ini\\r\\n```\\r\\n\\r\\n记得将路径切换成自己的。\\r\\n\\r\\n* 启动 mysql 服务\\r\\n在 Windows PowerShell 或 CMD 里切换到 mysql 目录下的 bin 目录，执行下面的命令。\\r\\n\\r\\n```bash\\r\\nnet start mysql\\r\\n```\\r\\n\\r\\n![](images/2017/C3OfsPgYjHKQUqBv_78wTtGX.png)\\r\\n\\r\\n* 修改 root 登录密码\\r\\n解压版安装时，初始情况 mysql 登录是没有密码，需要先登录数据库，再修改 root 登录密码。登录 mysql 数据库的命令是：\\r\\n\\r\\n```bash\\r\\nmysql -u root -p\\r\\n```\\r\\n\\r\\n修改 root 密码的命令是：\\r\\n\\r\\n```bash\\r\\nupdate mysql.user set authentication_string=password(\'123\') where user=\'root\';\\r\\n```\\r\\n\\r\\n修改完 root 登录密码需要重启 mysql 数据库，密码才生效。\\r\\n\\r\\n* 说明\\r\\n若从第四步开始出错，可以以管理员方式打开 Windows PowerShell 或 CMD 软件，再依次执行命令。若在安装 myql 数据库时出错了，可以将安装错的服务删除，并清空 data 目录。删除服务的命令如下。\\r\\n\\r\\n```bash\\r\\nmysqld --remove mysql\\r\\n```\\r\\n\\r\\n* 开始使用 mysql 数据库吧。\\r\\n操作 mysql 数据库可以是终端加上脚本，也可以是 GUI 软件。\\r\\n","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},"be65c94d33d8252a6bdd79c9da3cf72345df74df9e5b974e6199b31f6bb3407a":{"title":"读书使人勤奋","hash":"be65c94d33d8252a6bdd79c9da3cf72345df74df9e5b974e6199b31f6bb3407a","sub_title":null,"category":{"name":"问题解决"},"tags":[{"name":"读书"}],"create":"2017-03-30","update":"2017-03-30","content":"今晚，闲来没事，便玩起来学校官网，点着点着，就点到了[妙思文献管理集成系统](http://192.168.12.36/index.asp)，看看我有没有书到期了，需要续借的。\\r\\n\\r\\n突然，我点到了“归还查询”，一看，从大学以来我借了47本书。这个数字，不少，可又不多。我看了我大学以来借的书,这些书大多数都是关于计算机专业，有c++，C语言，java等；很少是其他类书籍，比如，雅舍谈吃等。面对这一切，我只想说，我看得书还是没有“达标”的。\\r\\n\\r\\n于是，我灵机一动，何不看看别人都借了哪些书？虽然这个不好，但是，好奇心害死猫，我忍不住看了，在在这里给大家道歉了。如果有人比较反感，可以看完这篇文章之后修改密码。关于如何查看别人的借的书，这里就不透露了。不看不知道，一看吓一跳，有借的多的，超过70本的；当然，也有借的少的，在10本以下的。我感觉，在大学里，借的书多的，我不敢说他有多厉害，至少他是勤奋的，能够耐得住寂寞看完借来的书，能够不计其烦地往返与寝室与图书馆，能够明白自己短板用书来补齐，至少他是爱书之人。爱书的人，书也会爱你的。\\r\\n\\r\\n生活，就是由这些许许多多的回忆小片段组成，爱回忆的人，总能找到过去与未来的平衡点，总能发现自己不足点，总能更好的面对未来。大学，已剩下不到三个学期了，未来，我会“狩猎”图书馆的角角落落，我要在本科阶段逛遍图书馆。加油吧，少年！\\r\\n\\r\\n![](images/2017/upu9TWJL9j_VnwxhyhoYjzXS.jpg)\\r\\n\\r\\n```c\\r\\n#include<stdio.h>\\r\\n\\r\\nvoid reading();\\r\\nvoid absord();\\r\\n\\r\\nvod reading()\\r\\n{\\r\\n\\t//reading some books...\\r\\n}\\r\\n\\r\\nvoid absorb()\\r\\n{\\r\\n\\tint i = 0;\\r\\n\\tString knowledge = \\"\\";\\r\\n\\treading();\\r\\n\\tknowledge[i++];\\r\\n}\\r\\n\\r\\nint main()\\r\\n{\\r\\n\\twhile(1)\\r\\n\\t{\\r\\n    \\t...\\r\\n    \\treading();\\r\\n        absorbed();\\r\\n        ...\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n```\\r\\n","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},"142b5ba4628ce8a16b6df7548d2bf5b3799f3e4f223bc84d041235a27ffbac58":{"title":"鸡汤","hash":"142b5ba4628ce8a16b6df7548d2bf5b3799f3e4f223bc84d041235a27ffbac58","sub_title":null,"category":{"name":"生活感悟"},"tags":[{"name":"鸡汤"}],"create":"2017-03-03","update":"2017-03-03","content":"当你有急事需要找人帮忙时，你应该找现在比较忙的人，而不是找现在很闲的人。\\r\\n\\r\\n证明：比较忙的人，会比你还急着把这件事做完，好继续他的事情，所以，你不要催那个这在忙且帮你做事的人，因为他才是真心去帮你的人且真正地对这件事上心的人；而如果你找一个现在很闲的人，他可能不急不忙地把这件事做完，就不符合急事的标准。证明完毕。“鸡汤很毒”，小心品尝。","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},"61307657ccd2c968e76bd5161f022f4bb9dd23517dce7af79c3c4316ff97b1b3":{"title":"人生感悟","hash":"61307657ccd2c968e76bd5161f022f4bb9dd23517dce7af79c3c4316ff97b1b3","sub_title":null,"category":{"name":"生活感悟"},"tags":[{"name":"知识垄断"}],"create":"2017-01-07","update":"2017-01-07","content":"### 校园的梅花开了\\r\\n\\r\\n![梅花1](images/2017/PE902C-Jp7zQcALguMFuq8G6.png)\\r\\n\\r\\n![梅花2](images/2017/OPkNbl5ueEDSV_Ris51kOdDE.png)\\r\\n\\r\\n当今社会，唯有知识能垄断一切，当知识成为垄断的资本时候，我们只有两种选择，接收或者拒绝。当然，接收作为垄断的知识，你可能会得到垄断知识带来的好处，同时，你也必须承认并毫无保留地认同它们带来的弊端。如果你拒绝垄断的知识，你可能会因此错失一次良好的机会，可能你想去试图修改垄断的知识，使其变得不再垄断，那么你必须学会更垄断的知识，否则你将会被其伤害。","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]},"dc84dff033ed9373e3ebdee6a5f48496b2402c77dec9c1d49d8b6f8ca42d635a":{"title":"eclipse启动失败","hash":"dc84dff033ed9373e3ebdee6a5f48496b2402c77dec9c1d49d8b6f8ca42d635a","sub_title":null,"category":{"name":"问题解决"},"tags":[{"name":"eclipse"}],"create":"2016-12-25","update":"2016-12-25","content":"### 1. 问题还原，见图！\\r\\n\\r\\n![](images/2016/j8_TaphBQLxqYl0mrEKgUjWt.png)\\r\\n\\r\\n![](images/2016/miKOrCmfHxT9u35-rvWDHySC.png)\\r\\n\\r\\n### 2. 原因：\\r\\n这个原因是因为在安装JDK的时候在 C:\\\\Windows\\\\System32 生成的 java.exe, javaw.exe, javaws.exe 这个 3 个引起的。\\r\\n\\r\\n### 3. 解决\\r\\n只要把这 3 个运行文件删除掉就可以了。\\r\\n\\r\\n___\\r\\n\\r\\n* 参考\\r\\n    * [http://blog.csdn.net/y6300023290/article/details/45478009](http://blog.csdn.net/y6300023290/article/details/45478009)","author":{"username":"yhw-miracle"},"reader":1,"is_comment":true,"comments":[]}}');const vt=e=>((0,i.dD)("data-v-2c54329a"),e=e(),(0,i.Cn)(),e),Mt={class:"editorView"},Pt=vt((()=>(0,i._)("link",{rel:"stylesheet",href:"/editor-md/css/editormd.preview.min.css"},null,-1))),At=["id"],Ct=vt((()=>(0,i._)("textarea",{style:{display:"none"}},"###Hello world!",-1))),Dt=[Ct];function Nt(e,t,n,r,a,o){return(0,i.wg)(),(0,i.iD)("div",Mt,[Pt,(0,i._)("div",{ref:"container",id:n.editorViewId},Dt,8,At)])}var Et=n(173),Ot=n.n(Et),Vt={name:"BlogEditorView",props:{editorViewId:{type:String,default:""},editorViewValue:{type:String,default:""}},data(){return{editorView:null}},methods:{fetchScript:async function(){return new Promise((e=>{Ot().path("/editor-md/"),Ot()("jquery-3.6.0.min.js",(function(){Ot()("lib/marked.min.js",(function(){Ot()("lib/prettify.min.js",(function(){Ot()("lib/raphael.min.js",(function(){Ot()("lib/underscore.min.js",(function(){Ot()("lib/sequence-diagram.min.js",(function(){Ot()("lib/flowchart.min.js",(function(){Ot()("lib/jquery.flowchart.min.js",(function(){Ot()("zepto.min.js",(function(){Ot()("editormd.min.js",(function(){e()}))}))}))}))}))}))}))}))}))}))}))},initEditorView:function(){this.fetchScript().then((()=>{this.$nextTick((()=>{let e=this.$refs.container.id=this.editorViewId||"editorView_"+this.randomNum(8),t={markdown:this.editorViewValue,htmlDecode:"style,script,iframe",tocm:!0,emoji:!0,taskList:!0,tex:!0,flowChart:!0,sequenceDiagram:!0};this.editorView=window.editormd.markdownToHTML(e,t)}))}))},randomNum(e){let t="";for(var n=0;n<e;n++){var r=Math.ceil(25*Math.random());t+=String.fromCharCode(97+r)}return t}},mounted:function(){this.initEditorView()}};const Gt=(0,F.Z)(Vt,[["render",Nt],["__scopeId","data-v-2c54329a"]]);var Rt=Gt,Ft={name:"ArticleDetail",components:{BlogEditorView:Rt},data(){return{article:null,isShowTop:!1}},mounted(){if(!this.article){var e=this.$router.currentRoute.value.query.id;this.article=kt[e]}window.addEventListener("scroll",this.scrollToTop)},unmounted(){window.removeEventListener("scroll",this.scrollToTop)},methods:{backTop(){const e=this;let t=setInterval((()=>{let n=Math.floor(-e.scrollTop/5);document.documentElement.scrollTop=document.body.scrollTop=e.scrollTop+n,0===e.scrollTop&&clearInterval(t)}))},scrollToTop(){const e=this;let t=window.pageYOffset||document.documentElement.scrollTop||document.body.scrollTop;e.scrollTop=t,e.scrollTop>0?e.isShowTop=!0:e.isShowTop=!1}}};const qt=(0,F.Z)(Ft,[["render",Wt],["__scopeId","data-v-65c101dd"]]);var Ht=qt,zt=[{path:"/",component:H,name:"主页"},{path:"/articles",component:te,name:"所有文章"},{path:"/detail",component:Ht,name:"文章详情"},{path:"/about",component:we,name:"我"},{path:"/category",component:Ce,name:"分类"},{path:"/tag",component:Ye,name:"标签"},{path:"/readed",component:at,name:"阅读是件小事"}],Ut={name:"BlogHeader",data(){return{current:"/",menu_info:[]}},mounted(){var e=this;zt.forEach((function(t){"文章详情"!=t.name&&e.menu_info.push(t)}))},watch:{$route(){this.setCurrentRoute()}},methods:{handleSelect(e){this.current=e},setCurrentRoute(){this.current=this.$route.path}},created(){this.setCurrentRoute()}};const jt=(0,F.Z)(Ut,[["render",b],["__scopeId","data-v-ff611bb0"]]);var Jt=jt;const Kt=e=>((0,i.dD)("data-v-7c75b53c"),e=e(),(0,i.Cn)(),e),Yt={class:"footer"},Xt=Kt((()=>(0,i._)("p",null,[(0,i._)("span",null,"© 2016 - 2022 "),(0,i._)("span",null," by "),(0,i._)("a",{href:""},"yhw-miracle")],-1))),Zt=Kt((()=>(0,i._)("p",null,[(0,i._)("span",null," base "),(0,i._)("a",{href:"https://github.com",target:"_blank"}," Github Pages "),(0,i._)("a",{href:"https://www.iconfont.cn",target:"_blank"}," iconfont "),(0,i._)("a",{href:"https://v3.cn.vuejs.org/",target:"_blank"}," vue3 ")],-1))),$t=[Xt,Zt];function en(e,t,n,r,a,o){return(0,i.wg)(),(0,i.iD)("div",Yt,$t)}var tn={name:"BlogFooter"};const nn=(0,F.Z)(tn,[["render",en],["__scopeId","data-v-7c75b53c"]]);var rn=nn,an={name:"App",components:{BlogHeader:Jt,BlogFooter:rn,BlogEditorView:Rt}};const on=(0,F.Z)(an,[["render",u]]);var sn=on,dn=n(678),cn=n(837);n(4415);const ln=(0,dn.p7)({history:(0,dn.r5)(),routes:zt}),un=(0,r.ri)(sn);un.use(ln),un.use(cn.Z),un.mount("#app")}},t={};function n(r){var i=t[r];if(void 0!==i)return i.exports;var a=t[r]={exports:{}};return e[r].call(a.exports,a,a.exports,n),a.exports}n.m=e,function(){var e=[];n.O=function(t,r,i,a){if(!r){var o=1/0;for(l=0;l<e.length;l++){r=e[l][0],i=e[l][1],a=e[l][2];for(var s=!0,d=0;d<r.length;d++)(!1&a||o>=a)&&Object.keys(n.O).every((function(e){return n.O[e](r[d])}))?r.splice(d--,1):(s=!1,a<o&&(o=a));if(s){e.splice(l--,1);var c=i();void 0!==c&&(t=c)}}return t}a=a||0;for(var l=e.length;l>0&&e[l-1][2]>a;l--)e[l]=e[l-1];e[l]=[r,i,a]}}(),function(){n.n=function(e){var t=e&&e.__esModule?function(){return e["default"]}:function(){return e};return n.d(t,{a:t}),t}}(),function(){n.d=function(e,t){for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})}}(),function(){n.g=function(){if("object"===typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"===typeof window)return window}}()}(),function(){n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)}}(),function(){var e={143:0};n.O.j=function(t){return 0===e[t]};var t=function(t,r){var i,a,o=r[0],s=r[1],d=r[2],c=0;if(o.some((function(t){return 0!==e[t]}))){for(i in s)n.o(s,i)&&(n.m[i]=s[i]);if(d)var l=d(n)}for(t&&t(r);c<o.length;c++)a=o[c],n.o(e,a)&&e[a]&&e[a][0](),e[a]=0;return n.O(l)},r=self["webpackChunkblog"]=self["webpackChunkblog"]||[];r.forEach(t.bind(null,0)),r.push=t.bind(null,r.push.bind(r))}();var r=n.O(void 0,[998],(function(){return n(9269)}));r=n.O(r)})();
//# sourceMappingURL=app.b87abe6a.js.map